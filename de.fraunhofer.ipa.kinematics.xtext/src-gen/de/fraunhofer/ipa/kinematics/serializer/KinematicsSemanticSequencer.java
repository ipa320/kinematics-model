/*
 * generated by Xtext 2.25.0
 */
package de.fraunhofer.ipa.kinematics.serializer;

import com.google.inject.Inject;
import de.fraunhofer.ipa.kinematics.services.KinematicsGrammarAccess;
import java.util.Set;
import kinematics.Joint;
import kinematics.KinematicsPackage;
import kinematics.Link;
import kinematics.robot;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class KinematicsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private KinematicsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == KinematicsPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case KinematicsPackage.JOINT:
				sequence_Joint(context, (Joint) semanticObject); 
				return; 
			case KinematicsPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case KinematicsPackage.ROBOT:
				sequence_robot(context, (robot) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Joint returns Joint
	 *
	 * Constraint:
	 *     (name=EString parent=[Link|EString] child=Link)
	 */
	protected void sequence_Joint(ISerializationContext context, Joint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KinematicsPackage.Literals.JOINT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KinematicsPackage.Literals.JOINT__NAME));
			if (transientValues.isValueTransient(semanticObject, KinematicsPackage.Literals.JOINT__PARENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KinematicsPackage.Literals.JOINT__PARENT));
			if (transientValues.isValueTransient(semanticObject, KinematicsPackage.Literals.JOINT__CHILD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KinematicsPackage.Literals.JOINT__CHILD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getJointAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getJointAccess().getParentLinkEStringParserRuleCall_4_0_1(), semanticObject.eGet(KinematicsPackage.Literals.JOINT__PARENT, false));
		feeder.accept(grammarAccess.getJointAccess().getChildLinkParserRuleCall_6_0(), semanticObject.getChild());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Link returns Link
	 *
	 * Constraint:
	 *     name=EString
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, KinematicsPackage.Literals.LINK__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, KinematicsPackage.Literals.LINK__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLinkAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     robot returns robot
	 *
	 * Constraint:
	 *     (name=EString prefix=EString? root_link=Link? (joints+=Joint joints+=Joint*)?)
	 */
	protected void sequence_robot(ISerializationContext context, robot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
