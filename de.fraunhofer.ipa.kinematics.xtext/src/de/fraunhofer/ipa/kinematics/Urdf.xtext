// automatically generated by Xtext
grammar de.fraunhofer.ipa.kinematics.Urdf with org.eclipse.xtext.common.Terminals

import "http://www.ipa.fraunhofer.de/urdf" 
import "http://www.eclipse.org/emf/2003/XMLType" as type
import "http://www.eclipse.org/emf/2002/Ecore" as ecore

RobotType returns RobotType:
	'RobotType'
	'{'
		'name' name=EString
		('version' version=EString)?
		('joint' '{' joint+=Joint ( "," joint+=Joint)* '}' )?
		('link' '{' link+=Link ( "," link+=Link)* '}' )?
		('material' '{' material+=MaterialGlobal ( "," material+=MaterialGlobal)* '}' )?
		('transmission' '{' transmission+=Transmission ( "," transmission+=Transmission)* '}' )?
	'}';

Joint returns Joint:
	'Joint'
	'{'
		'name' name=EString
		'type' type=EString
		'parent' parent=[Link|EString]
		'child' child=[Link|EString]
		('origin' origin=Pose)?
		('axis' axis=Axis)?
		('calibration' calibration=Calibration)?
		('dynamics' dynamics=Dynamics)?
		('limit' limit=Limit)?
		('safetyController' safetyController=SafetyController)?
		('mimic' mimic=Mimic)?
	'}';

Link returns Link:
	'Link'
	'{'
		'name' name=EString
		('type' type=EString)?
		('inertial' inertial=Inertial)?
		('visual' visual=Visual)?
		('collision' collision=Collision)?
	'}';

MaterialGlobal returns MaterialGlobal:
	'MaterialGlobal'
	'{'
		'name' name=EString
		('color' color=Color)?
		('texture' texture=Texture)?
	'}';

Transmission returns Transmission:
	'Transmission'
	'{'
		('mechanicalReduction' '{' mechanicalReduction+=Double0 ( "," mechanicalReduction+=Double0)* '}' )?
		'name' name=EString
		'type' type=EString
		('leftActuator' '{' leftActuator+=ActuatorTransmission ( "," leftActuator+=ActuatorTransmission)* '}' )?
		('rightActuator' '{' rightActuator+=ActuatorTransmission ( "," rightActuator+=ActuatorTransmission)* '}' )?
		('flexJoint' '{' flexJoint+=ActuatorTransmission ( "," flexJoint+=ActuatorTransmission)* '}' )?
		('rollJoint' '{' rollJoint+=ActuatorTransmission ( "," rollJoint+=ActuatorTransmission)* '}' )?
		('gapJoint' '{' gapJoint+=GapJointTransmission ( "," gapJoint+=GapJointTransmission)* '}' )?
		('passiveJoint' '{' passiveJoint+=PassiveJointTransmission ( "," passiveJoint+=PassiveJointTransmission)* '}' )?
		('useSimulatedGripperJoint' '{' useSimulatedGripperJoint+=UseSimulatedGripperJointType ( "," useSimulatedGripperJoint+=UseSimulatedGripperJointType)* '}' )?
		('actuator' '{' actuator+=Name ( "," actuator+=Name)* '}' )?
		('joint' '{' joint+=Name ( "," joint+=Name)* '}' )?
	'}';

EString returns ecore::EString:
	STRING | ID;

Pose returns Pose:
	{Pose}
	'Pose'
	'{'
		('rpy' rpy=EString)?
		('xyz' xyz=EString)?
	'}';

Axis returns Axis:
	{Axis}
	'Axis'
	'{'
		('xyz' xyz=EString)?
	'}';

Calibration returns Calibration:
	{Calibration}
	'Calibration'
	'{'
		('falling' falling=Double0)?
		('referencePosition' referencePosition=Double0)?
		('rising' rising=Double0)?
	'}';

Dynamics returns Dynamics:
	{Dynamics}
	'Dynamics'
	'{'
		('damping' damping=Double0)?
		('friction' friction=Double0)?
	'}';

Limit returns Limit:
	{Limit}
	'Limit'
	'{'
		('effort' effort=Double0)?
		('lower' lower=Double0)?
		('upper' upper=Double0)?
		('velocity' velocity=Double0)?
	'}';

SafetyController returns SafetyController:
	'SafetyController'
	'{'
		('kPosition' kPosition=Double0)?
		'kVelocity' kVelocity=Double0
		('softLowerLimit' softLowerLimit=Double0)?
		('softUpperLimit' softUpperLimit=Double0)?
	'}';

Mimic returns Mimic:
	'Mimic'
	'{'
		'joint' joint=EString
		('multiplier' multiplier=Double0)?
		('offset' offset=Double0)?
	'}';


Inertial returns Inertial:
	{Inertial}
	'Inertial'
	'{'
		('origin' origin=Pose)?
		('mass' mass=Mass)?
		('inertia' inertia=Inertia)?
	'}';

Visual returns Visual:
	'Visual'
	'{'
		('origin' origin=Pose)?
		'geometry' geometry=Geometry
		('material' material=Material)?
	'}';

Collision returns Collision:
	'Collision'
	'{'
		('name' name=EString)?
		('origin' origin=Pose)?
		'geometry' geometry=Geometry
		('verbose' verbose=Verbose)?
	'}';

Mass returns Mass:
	{Mass}
	'Mass'
	'{'
		('value' value=Double0)?
	'}';

Inertia returns Inertia:
	{Inertia}
	'Inertia'
	'{'
		('ixx' ixx=Double0)?
		('ixy' ixy=Double0)?
		('ixz' ixz=Double0)?
		('iyy' iyy=Double0)?
		('iyz' iyz=Double0)?
		('izz' izz=Double0)?
	'}';

Geometry returns Geometry:
	{Geometry}
	'Geometry'
	'{'
		('box' box=Box)?
		('cylinder' cylinder=Cylinder)?
		('sphere' sphere=Sphere)?
		('mesh' mesh=Mesh)?
	'}';

Material returns Material:
	{Material}
	'Material'
	'{'
		('name' name=EString)?
		('color' color=Color)?
		('texture' texture=Texture)?
	'}';

Box returns Box:
	{Box}
	'Box'
	'{'
		('size' size=EString)?
	'}';

Cylinder returns Cylinder:
	'Cylinder'
	'{'
		'length' length=Double0
		'radius' radius=Double0
	'}';

Sphere returns Sphere:
	'Sphere'
	'{'
		'radius' radius=Double0
	'}';

Mesh returns Mesh:
	'Mesh'
	'{'
		'filename' filename=AnyURI
		('scale' scale=EString)?
	'}';

AnyURI returns type::AnyURI:
	'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;

Color returns Color:
	{Color}
	'Color'
	'{'
		('rgba' rgba=EString)?
	'}';

Texture returns Texture:
	{Texture}
	'Texture'
	'{'
		('filename' filename=AnyURI)?
	'}';

Verbose returns Verbose:
	{Verbose}
	'Verbose'
	'{'
		('value' value=EString)?
	'}';

ActuatorTransmission returns ActuatorTransmission:
	'ActuatorTransmission'
	'{'
		'mechanicalReduction' mechanicalReduction=Double0
		'name' name=EString
	'}';

GapJointTransmission returns GapJointTransmission:
	'GapJointTransmission'
	'{'
		'a' a=Double0
		'b' b=Double0
		'gearRatio' gearRatio=Double0
		'h' h=Double0
		'l0' l0=Double0
		'mechanicalReduction' mechanicalReduction=Double0
		'name' name=EString
		'phi0' phi0=Double0
		'r' r=Double0
		'screwReduction' screwReduction=Double0
		't0' t0=Double0
		'theta0' theta0=Double0
	'}';

PassiveJointTransmission returns PassiveJointTransmission:
	'PassiveJointTransmission'
	'{'
		'name' name=EString
	'}';

UseSimulatedGripperJointType returns UseSimulatedGripperJointType:
	{UseSimulatedGripperJointType}
	'UseSimulatedGripperJointType'
	;

Name returns Name:
	{Name}
	'Name'
	'{'
		('name' name=EString)?
	'}';
	
// from https://github.com/ipa320/ros-model/blob/e9279c9eab1c5d2554f239e80150f2df1bbb5ab3/plugins/de.fraunhofer.ipa.rossystem.xtext/src/de/fraunhofer/ipa/rossystem/RosSystem.xtext#L283-L307
terminal fragment DIGIT: '0'..'9';
terminal BOOLEAN: 'true'|'false';
terminal DOUBLE returns ecore::EDouble: DECINT (('.' DIGIT*) | (('.' DIGIT*)? ('E'|'e') ('-'|'+')? DECINT));  // Use terminal to avoid 'e' turning into a keyword
terminal DECINT: '0' | ('1'..'9' DIGIT*) | ('-''0'..'9' DIGIT*) ;

Double0 returns type::Double:
	DOUBLE;

Integer0 returns type::Int:
	DECINT;
