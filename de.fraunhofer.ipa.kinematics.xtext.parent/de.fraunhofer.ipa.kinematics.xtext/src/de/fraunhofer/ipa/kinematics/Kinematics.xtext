// automatically generated by Xtext
grammar de.fraunhofer.ipa.kinematics.Kinematics with org.eclipse.xtext.common.Terminals

import "http://www.ipa.fraunhofer.de/xacro" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

Robot returns Robot:
	{Robot}
	'Robot'
	'{'
		'name' name=ID
		('version' version=STRING)?
		('macro' '{' macro+=Macro ( "," macro+=Macro)* '}' )?
		('macroCall' '{' macroCall+=MacroCall ( "," macroCall+=MacroCall)* '}' )?
		('body' body=Body)?
	'}';

Macro returns Macro:
	'Macro'
	'{'
		'name' name=ID
		('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
		('body' body=Body)?
	'}';

Parameter returns Parameter:
	{Parameter}
	'Parameter'
	name=ID
	'{'
		'type' type=ParameterType
		('value' value=ParameterValue)?
	'}';

ParameterValue returns ParameterValue:
	value=ID | Pose | LinkRef
;

LinkRef returns LinkRef:
	ref=[Link|STRING]
;

ParameterString returns ParameterString:
	{ParameterString} ref=([Parameter|STRING])? (value=ID)?
;

ParameterPose returns ParameterPose:
	ref=[Parameter|STRING] | value=Pose 
;

ParameterLink returns ParameterLink:
	param=[Parameter] | link=[Link|STRING]
;

ParameterType returns ParameterType:
	ParameterStringType | ParameterLinkRefType | ParameterPoseType
;

ParameterStringType returns ParameterStringType:
	{ParameterStringType}
	'String'
;

ParameterLinkRefType returns ParameterLinkRefType:
	{ParameterLinkRefType}
	'LinkRef'
;

ParameterPoseType returns ParameterPoseType:
	{ParameterPoseType}
	'Pose'
;


Body returns Body:
	{Body}
	'Body'
	'{'
		('link' '{' link+=Link ( "," link+=Link)* '}' )?
		('joint' '{' joint+=Joint ( "," joint+=Joint)* '}' )?
	'}';

MacroCall returns MacroCall:
	{MacroCall}
	'MacroCall'
	'{'
		'macro' macro=[Macro|STRING]
		('parameter' '{' parameterCall+=ParameterCall ( "," parameterCall+=ParameterCall)* '}' )?
	'}';

ParameterCall returns ParameterCall:
	{ParameterCall}
	'ParameterCall'
	'{'
		'parameter' parameter=[Parameter|STRING]
		'value' value=ParameterValue
	'}';

Joint returns Joint:
	'Joint'
	'{'
		'name' name=ParameterString
		'type' type=JOINTTYPE
		'parent' parent=ParameterLink 
		'child' child=ParameterLink
		('origin' origin=ParameterPose)?
		('axis' axis=Vector3)?
		('limit' limit=Limit)?
	'}';

Link returns Link:
	'Link'
	'{'
		'name' name=ParameterString
		('inertial' inertial=Inertial)?
		('visual' visual=Visual)?
		('collision' collision=Collision)?
	'}';

Pose returns Pose:
	{Pose}
	'Pose'
	'{'
		('rpy' rpy=STRING)?
		('xyz' xyz=STRING)?
	'}';

Vector3 returns Vector3:
	{Vector3}
	'Vector3'
	'{'
		('xyz' xyz=STRING)?
	'}';

Limit returns Limit:
	{Limit}
	'Limit'
	'{'
		('effort' effort=STRING)?
		('lower' lower=STRING)?
		('upper' upper=STRING)?
		('velocity' velocity=STRING)?
	'}';

Inertial returns Inertial:
	{Inertial}
	'Inertial'
	'{'
		('origin' origin=Pose)?
		('mass' mass=Mass)?
		('inertia' inertia=Inertia)?
	'}';

Visual returns Visual:
	'Visual'
	'{'
		('origin' origin=Pose)?
		'geometry' geometry=Geometry
	'}';

Collision returns Collision:
	'Collision'
	'{'
		('origin' origin=Pose)?
		'geometry' geometry=Geometry
	'}';

Mass returns Mass:
	{Mass}
	'Mass'
	'{'
		('value' value=Double0)?
	'}';

Inertia returns Inertia:
	{Inertia}
	'Inertia'
	'{'
		('ixx' ixx=Double0)?
		('ixy' ixy=Double0)?
		('ixz' ixz=Double0)?
		('iyy' iyy=Double0)?
		('iyz' iyz=Double0)?
		('izz' izz=Double0)?
	'}';

Geometry returns Geometry:
	{Geometry}
	'Geometry'
	'{'
		('box' box=Box)?
		('cylinder' cylinder=Cylinder)?
		('sphere' sphere=Sphere)?
		('mesh' mesh=Mesh)?
	'}';

Box returns Box:
	{Box}
	'Box'
	'{'
		('size' size=ParameterString)?
	'}';

Cylinder returns Cylinder:
	'Cylinder'
	'{'
		'length' length=Double0
		'radius' radius=Double0
	'}';

Sphere returns Sphere:
	'Sphere'
	'{'
		'radius' radius=Double0
	'}';

Mesh returns Mesh:
	'Mesh'
	'{'
		'filename' filename=STRING
		('scale' scale=Double0)?
	'}';

AnyURI returns type::AnyURI:
	'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;

EString returns ecore::EString:
	STRING
;

// from https://github.com/ipa320/ros-model/blob/e9279c9eab1c5d2554f239e80150f2df1bbb5ab3/plugins/de.fraunhofer.ipa.rossystem.xtext/src/de/fraunhofer/ipa/rossystem/RosSystem.xtext#L283-L307
terminal fragment DIGIT: '0'..'9';
terminal BOOLEAN: 'true'|'false';
terminal DOUBLE returns ecore::EDouble: DECINT (('.' DIGIT*) | (('.' DIGIT*)? ('E'|'e') ('-'|'+')? DECINT));  // Use terminal to avoid 'e' turning into a keyword
terminal DECINT: '0' | ('1'..'9' DIGIT*) | ('-''0'..'9' DIGIT*) ;
terminal JOINTTYPE: 'revolute' | 'continuous' | 'prismatic' | 'fixed' | 'floating' | 'planar';

Double0 returns type::Double:
	DOUBLE;

Integer0 returns type::Int:
	DECINT;