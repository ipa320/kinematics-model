// automatically generated by Xtext
grammar de.fraunhofer.ipa.kinematics.Kinematics with org.eclipse.xtext.common.Terminals

import "http://www.ipa.fraunhofer.de/urdf" as urdf
import "http://www.ipa.fraunhofer.de/xacro" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

Robot returns XacroRobot:
	{XacroRobot}
	'Robot'
	'{'

	'}';

Parameter returns Parameter:
	{Parameter}
	'Parameter'
	name=EString
	'{'
	'}';

Joint returns urdf::Joint:
	'Joint'
	'{'
		'name' name=EString
		'type' type=JOINTTYPE
		'parent' parent=[urdf::Link]
		'child' child=[urdf::Link]
		('origin' origin=Pose)?
		('axis' axis=Axis)?
		('limit' limit=Limit)?
	'}';

Link returns urdf::Link:
	'Link'
	'{'
		'name' name=EString
		('inertial' inertial=Inertial)?
		('visual' visual=Visual)?
		('collision' collision=Collision)?
	'}';

Axis returns urdf::Axis:
	{urdf::Axis}
	'Axis'
	'{'
		('xyz' xyz=EString)?
	'}';

Pose returns urdf::Pose:
	{urdf::Pose}
	'Pose'
	'{'
		('rpy' rpy=EString)?
		('xyz' xyz=EString)?
	'}';

Limit returns urdf::Limit:
	{urdf::Limit}
	'Limit'
	'{'
		('effort' effort=Double0)?
		('lower' lower=Double0)?
		('upper' upper=Double0)?
		('velocity' velocity=Double0)?
	'}';

Inertial returns urdf::Inertial:
	{urdf::Inertial}
	'Inertial'
	'{'
		('origin' origin=Pose)?
		('mass' mass=Mass)?
		('inertia' inertia=Inertia)?
	'}';

Visual returns urdf::Visual:
	'Visual'
	'{'
		('origin' origin=Pose)?
		'geometry' geometry=Geometry
	'}';

Collision returns urdf::Collision:
	'Collision'
	'{'
		('origin' origin=Pose)?
		'geometry' geometry=Geometry
	'}';

Mass returns urdf::Mass:
	{urdf::Mass}
	'Mass'
	'{'
		('value' value=Double0)?
	'}';

Inertia returns urdf::Inertia:
	{urdf::Inertia}
	'Inertia'
	'{'
		('ixx' ixx=Double0)?
		('ixy' ixy=Double0)?
		('ixz' ixz=Double0)?
		('iyy' iyy=Double0)?
		('iyz' iyz=Double0)?
		('izz' izz=Double0)?
	'}';

Geometry returns urdf::Geometry:
	{urdf::Geometry}
	'Geometry'
	'{'
		('box' box=Box)?
		('cylinder' cylinder=Cylinder)?
		('sphere' sphere=Sphere)?
		('mesh' mesh=Mesh)?
	'}';

Box returns urdf::Box:
	{urdf::Box}
	'Box'
	'{'
		('size' size=EString)?
	'}';

Cylinder returns urdf::Cylinder:
	'Cylinder'
	'{'
		'length' length=Double0
		'radius' radius=Double0
	'}';

Sphere returns urdf::Sphere:
	'Sphere'
	'{'
		'radius' radius=Double0
	'}';

Mesh returns urdf::Mesh:
	'Mesh'
	'{'
		'filename' filename=STRING
		('scale' scale=EString)?
	'}';

AnyURI returns type::AnyURI:
	'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;

EString returns ecore::EString:
	STRING
;

// from https://github.com/ipa320/ros-model/blob/e9279c9eab1c5d2554f239e80150f2df1bbb5ab3/plugins/de.fraunhofer.ipa.rossystem.xtext/src/de/fraunhofer/ipa/rossystem/RosSystem.xtext#L283-L307
terminal fragment DIGIT: '0'..'9';
terminal BOOLEAN: 'true'|'false';
terminal DOUBLE returns ecore::EDouble: DECINT (('.' DIGIT*) | (('.' DIGIT*)? ('E'|'e') ('-'|'+')? DECINT));  // Use terminal to avoid 'e' turning into a keyword
terminal DECINT: '0' | ('1'..'9' DIGIT*) | ('-''0'..'9' DIGIT*) ;
terminal JOINTTYPE: 'revolute' | 'continuous' | 'prismatic' | 'fixed' | 'floating' | 'planar';

Double0 returns type::Double:
	DOUBLE;

Integer0 returns type::Int:
	DECINT;