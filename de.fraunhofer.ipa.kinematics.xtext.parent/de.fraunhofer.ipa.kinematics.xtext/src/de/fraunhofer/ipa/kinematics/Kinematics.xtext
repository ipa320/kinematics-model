// automatically generated by Xtext
grammar de.fraunhofer.ipa.kinematics.Kinematics with org.eclipse.xtext.common.Terminals

import "http://www.ipa.fraunhofer.de/urdf" as urdf
import "http://www.ipa.fraunhofer.de/component" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

Component returns Component:
	{Component}
	'component:'
	BEGIN
		'name:' name=EString
		'version:' version=EString
		('category:' category=CATEGORY)?
		('gitRepo:' gitRepo=GitRepo)?
		('baseAttachment:'
			(baseAttachment+=BaseAttachment)* | baseAttachment+=BaseAttachment
		)?
		('flangeAttachment:'
			(flangeAttachment+=FlangeAttachment)* | flangeAttachment+=FlangeAttachment
		)?
		('component:'
			(component+=ConfiguredComponent)* | component+=ConfiguredComponent
		)?
		('connection:'
			(connection+=Connection)* | connection+=Connection
		)?
		('group:'
			(group+=Group)* | group+=Group
		)?
		('link:'
			(link+=Link)* | link+=Link
		)?
		('joint:'
			(joint+=Joint)* | joint+=Joint
		)?
	END;
	
ConfiguredComponent returns ConfiguredComponent:
	'-' 'name:' name=EString
	BEGIN
		'type:' type=[Component|EString]
		('prefix:' prefix=EString)?
	END
;


GitRepo returns GitRepo:
	BEGIN
		'distro:' distro=EString
		'repo:' repo=EString
		'branch:' branch=EString
		'package:' package=EString
		'version:' version=EString
	END;
	
Group returns Group:
	'-' 'name:' name=EString
	BEGIN
		'baseLink:' baseLink=[urdf::Link|EString]
		'endLink:' endLink=[urdf::Link|EString]
		('ros2_control:' ros2_control=EString)?
	END
;

BaseAttachment returns BaseAttachment:
	'-' 'name:' name=EString
	BEGIN
		'origin:' origin=Pose
		'parent:' parent=[urdf::Link|EString]
	END
;

FlangeAttachment returns FlangeAttachment:
	'-' 'name:' name=EString
	BEGIN
		'origin:' origin=Pose
		'parent:' parent=[urdf::Link|EString]
	END
;

Connection returns Connection:
	'-' 'name:' name=EString
	BEGIN
		'baseAttachment:' baseAttachment=[BaseAttachment|EString]
		'flangeAttachment:' flangeAttachment=[FlangeAttachment|EString]
	END
;

Joint returns urdf::Joint:
	'-' 'name:' name=EString
	BEGIN
		('type:' type=JOINTTYPE)
		('parent:' parent=Parent) 
		('child:' child=Child)
		('origin:' origin=Pose)
		('axis:' axis=Axis)?
		('limit:' limit=Limit)?
	END;

Parent returns urdf::Parent:
	BEGIN
		'link:' link=EString
	END;

Child returns urdf::Child:
	BEGIN
		'link:' link=EString
	END;

Link returns urdf::Link:
	'-' 'name:' name=EString
	(BEGIN
		('inertial:' inertial=Inertial)?
		('visual:' visual=Visual)?
		('collision:' collision=Collision)?
	END)?;

Pose returns urdf::Pose:
	{urdf::Pose}
	BEGIN
		('rpy:' '[' rpy+=DOUBLE (',' rpy+=DOUBLE)* ']')?
		('xyz:' '[' xyz+=DOUBLE (',' xyz+=DOUBLE)* ']')?
	END;

Axis returns urdf::Axis:
	{urdf::Axis}
	BEGIN
		('xyz:' xyz=EString)?
	END;

Limit returns urdf::Limit:
	{urdf::Limit}
	BEGIN
		('effort:' effort=DOUBLE)?
		('lower:' lower=DOUBLE)?
		('upper:' upper=DOUBLE)?
		('velocity:' velocity=DOUBLE)?
	END;

Inertial returns urdf::Inertial:
	{urdf::Inertial}
	BEGIN
		('origin:' origin=Pose)?
		('mass:' mass=Mass)?
		('inertia:' inertia=Inertia)?
	END;

Visual returns urdf::Visual:
	BEGIN
		('origin:' origin=Pose)?
		'geometry:' geometry=Geometry
	END;

Collision returns urdf::Collision:
	BEGIN
		('origin:' origin=Pose)?
		'geometry:' geometry=Geometry
	END;

Mass returns urdf::Mass:
	{urdf::Mass}
	BEGIN
		'value:' value=DOUBLE
	END;

Inertia returns urdf::Inertia:
	{urdf::Inertia}
	BEGIN
		('ixx:' ixx=DOUBLE)?
		('ixy:' ixy=DOUBLE)?
		('ixz:' ixz=DOUBLE)?
		('iyy:' iyy=DOUBLE)?
		('iyz:' iyz=DOUBLE)?
		('izz:' izz=DOUBLE)?
	END;

Geometry returns urdf::Geometry:
	{urdf::Geometry}
	BEGIN
		('box:' box=Box)?
		('cylinder:' cylinder=Cylinder)?
		('sphere:' sphere=Sphere)?
		('mesh:' mesh=Mesh)?
	END;

Box returns urdf::Box:
	{urdf::Box}
	BEGIN
		'size:' size=EString
	END;

Cylinder returns urdf::Cylinder:
	BEGIN
		'length:' length=EString
		'radius:' radius=EString
	END;

Sphere returns urdf::Sphere:
	BEGIN
		'radius:' radius=Double0
	END;

Mesh returns urdf::Mesh:
	BEGIN
		'filename:' filename=EString
		('scale:' '[' scale+=DOUBLE (',' scale+=DOUBLE)* ']')?
	END;

AnyURI returns type::AnyURI:
	'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;

EString returns ecore::EString:
	STRING
;

// from https://github.com/ipa320/ros-model/blob/e9279c9eab1c5d2554f239e80150f2df1bbb5ab3/plugins/de.fraunhofer.ipa.rossystem.xtext/src/de/fraunhofer/ipa/rossystem/RosSystem.xtext#L283-L307
terminal fragment DIGIT: '0'..'9';
terminal BOOLEAN: 'true'|'false';
terminal DOUBLE returns ecore::EDouble: ('-')? INT* ('.' INT+)? (('e' | 'E') ('-' | '+') INT)?;  // Use terminal to avoid 'e' turning into a keyword
terminal DECINT: '0' | ('1'..'9' DIGIT*) | ('-''0'..'9' DIGIT*) ;
terminal JOINTTYPE: "revolute" | "continuous" | "prismatic" | "fixed" | "floating" | "planar";
terminal CATEGORY: "manipulator" | "gripper" | "camera";

///////////////////
// YAML format
///////////////////
terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';

@Override 
terminal SL_COMMENT: '#' !('\n'|'\r')*;

Double0 returns type::Double:
	DOUBLE;

Integer0 returns type::Int:
	DECINT;