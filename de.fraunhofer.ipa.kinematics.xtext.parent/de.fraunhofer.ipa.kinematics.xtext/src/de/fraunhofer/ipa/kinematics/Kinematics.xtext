// automatically generated by Xtext
grammar de.fraunhofer.ipa.kinematics.Kinematics with org.eclipse.xtext.common.Terminals

import "http://www.ipa.fraunhofer.de/xacro" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

Robot returns Robot:
	{Robot}
	'robot:'
	BEGIN
		'name:' name=ID
		('version:' version=STRING)?
		('macros:'
			macro+=Macro*
		)?
		('macroCalls:'
			macroCall+=MacroCall*
		)?

		('body:'
			BEGIN
			body=Body
			END
		)?
	END;	

Macro returns Macro:
	'-' name=ID ':'
	BEGIN
		('parameters:'
			parameter+=Parameter*
		)?
		('body:'
			BEGIN
			body=Body
			END
		)?
	END;

Parameter returns Parameter:
	{Parameter}
	'-' name=ID ':'
	BEGIN
		'type:' type=ParameterType
		('default' value=ParameterValue)?
	END;

ParameterValue returns ParameterValue:
	value=ID | Pose | LinkRef
;

LinkRef returns LinkRef:
	ref=[Link|STRING]
;

ParameterString returns ParameterString:
	{ParameterString} ref=([Parameter|STRING])? (value=ID)?
;

ParameterPose returns ParameterPose:
	ref=[Parameter|STRING] | value=Pose 
;

ParameterLink returns ParameterLink:
	param=[Parameter] | link=[Link|STRING]
;

ParameterType returns ParameterType:
	ParameterStringType | ParameterLinkRefType | ParameterPoseType
;

ParameterStringType returns ParameterStringType:
	{ParameterStringType}
	'String'
;

ParameterLinkRefType returns ParameterLinkRefType:
	{ParameterLinkRefType}
	'LinkRef'
;

ParameterPoseType returns ParameterPoseType:
	{ParameterPoseType}
	'Pose'
;


Body returns Body:
	{Body}
	('links:' link+=Link*)?
	('joints:' joint+=Joint* )?;

MacroCall returns MacroCall:
	{MacroCall}
	'-' macro=[Macro|STRING] ':'
	BEGIN
		parameterCall+=ParameterCall*
	END;

ParameterCall returns ParameterCall:
	{ParameterCall}
	'-' parameter=[Parameter|STRING] ':'
	BEGIN
		'value' value=ParameterValue
	END;

Joint returns Joint:
	'-' name=ParameterString ':'
	BEGIN
		'type:' type=JOINTTYPE
		'parent:' parent=ParameterLink 
		'child:' child=ParameterLink
		'origin:' origin=ParameterPose
		('axis:' axis=Vector3)?
		('limit:' limit=Limit)?
	END;

Link returns Link:
	'-' name=ParameterString
	(':' BEGIN
		('inertial:' inertial=Inertial)?
		('visual:' visual=Visual)?
		('collision:' collision=Collision)?
	END)?;

Pose returns Pose:
	{Pose}
	BEGIN
		('rpy:' rpy=STRING)?
		('xyz:' xyz=STRING)?
	END;

Vector3 returns Vector3:
	{Vector3}
	BEGIN
		('xyz:' xyz=STRING)?
	END;

Limit returns Limit:
	{Limit}
	BEGIN
		('effort:' effort=STRING)?
		('lower:' lower=STRING)?
		('upper:' upper=STRING)?
		('velocity:' velocity=STRING)?
	END;

Inertial returns Inertial:
	{Inertial}
	BEGIN
		('origin:' origin=Pose)?
		('mass:' mass=Mass)?
		('inertia:' inertia=Inertia)?
	END;

Visual returns Visual:
	BEGIN
		('origin:' origin=Pose)?
		'geometry:' geometry=Geometry
	END;

Collision returns Collision:
	BEGIN
		('origin:' origin=Pose)?
		'geometry:' geometry=Geometry
	END;

Mass returns Mass:
	{Mass}
	value=Double0;

Inertia returns Inertia:
	{Inertia}
	BEGIN
		('ixx:' ixx=Double0)?
		('ixy:' ixy=Double0)?
		('ixz:' ixz=Double0)?
		('iyy:' iyy=Double0)?
		('iyz:' iyz=Double0)?
		('izz:' izz=Double0)?
	END;

Geometry returns Geometry:
	{Geometry}
	BEGIN
		('box:' box=Box)?
		('cylinder:' cylinder=Cylinder)?
		('sphere:' sphere=Sphere)?
		('mesh:' mesh=Mesh)?
	END;

Box returns Box:
	{Box}
	BEGIN
		'size' size=ParameterString
	END;

Cylinder returns Cylinder:
	BEGIN
		'length:' length=Double0
		'radius:' radius=Double0
	END;

Sphere returns Sphere:
	BEGIN
		'radius:' radius=Double0
	END;

Mesh returns Mesh:
	BEGIN
		'filename:' filename=STRING
		('scale:' scale=Double0)?
	END;

AnyURI returns type::AnyURI:
	'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;

EString returns ecore::EString:
	STRING
;

// from https://github.com/ipa320/ros-model/blob/e9279c9eab1c5d2554f239e80150f2df1bbb5ab3/plugins/de.fraunhofer.ipa.rossystem.xtext/src/de/fraunhofer/ipa/rossystem/RosSystem.xtext#L283-L307
terminal fragment DIGIT: '0'..'9';
terminal BOOLEAN: 'true'|'false';
terminal DOUBLE returns ecore::EDouble: DECINT (('.' DIGIT*) | (('.' DIGIT*)? ('E'|'e') ('-'|'+')? DECINT));  // Use terminal to avoid 'e' turning into a keyword
terminal DECINT: '0' | ('1'..'9' DIGIT*) | ('-''0'..'9' DIGIT*) ;
terminal JOINTTYPE: 'revolute' | 'continuous' | 'prismatic' | 'fixed' | 'floating' | 'planar';

///////////////////
// YAML format
///////////////////
terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';

@Override 
terminal SL_COMMENT: '#' !('\n'|'\r')*;


Double0 returns type::Double:
	DOUBLE;

Integer0 returns type::Int:
	DECINT;