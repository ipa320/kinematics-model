// automatically generated by Xtext
grammar de.fraunhofer.ipa.kinematics.Kinematics with org.eclipse.xtext.common.Terminals

import "http://www.ipa.fraunhofer.de/urdf" as urdf
import "http://www.ipa.fraunhofer.de/xacro" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

Robot returns XacroRobot:
	{XacroRobot}
	'xacrorobot:'
	BEGIN
		'name:' name=EString
		('macros:'
			macros+=Macro*
		)?
//		('configuredMacros:'
//			configuredMacros+=ConfiguredMacro*
//		)?
	END;	

Macro returns Macro:
	'-' 'name:' name=EString
	BEGIN
		('parameters:'
			parameters+=Parameter*
		)?
		('link:'
			link+=Link*
		)?
		('joint:'
			joint+=Joint*
		)?
	END;

Parameter returns Parameter:
	{Parameter}
	'-' 'name:' name=EString
	BEGIN
		'type:' type=ParameterType
		('default' default=EString)?
		('value' value=EString)?
	END;

enum ParameterType:
	Link='0' | String='1' | Pose='2'
;

Joint returns urdf::Joint:
	'-' 'name:' name=EString
	BEGIN
		'type:' type=JOINTTYPE
		'parent:' parent=[urdf::Link] 
		'child:' child=[urdf::Link]
		'origin:' origin=Pose
		('axis:' axis=Vector3)?
		('limit:' limit=Limit)?
	END;

Link returns urdf::Link:
	'-' 'name:' name=EString
	(':' BEGIN
		('inertial:' inertial=Inertial)?
		('visual:' visual=Visual)?
		('collision:' collision=Collision)?
	END)?;

Pose returns urdf::Pose:
	{urdf::Pose}
	BEGIN
		('rpy:' rpy=EString)?
		('xyz:' xyz=EString)?
	END;

Vector3 returns urdf::Axis:
	{urdf::Axis}
	BEGIN
		('xyz:' xyz=EString)?
	END;

Limit returns urdf::Limit:
	{urdf::Limit}
	BEGIN
		('effort:' effort=Double0)?
		('lower:' lower=Double0)?
		('upper:' upper=Double0)?
		('velocity:' velocity=Double0)?
	END;

Inertial returns urdf::Inertial:
	{urdf::Inertial}
	BEGIN
		('origin:' origin=Pose)?
		('mass:' mass=Mass)?
		('inertia:' inertia=Inertia)?
	END;

Visual returns urdf::Visual:
	BEGIN
		('origin:' origin=Pose)?
		'geometry:' geometry=Geometry
	END;

Collision returns urdf::Collision:
	BEGIN
		('origin:' origin=Pose)?
		'geometry:' geometry=Geometry
	END;

Mass returns urdf::Mass:
	{urdf::Mass}
	value=Double0;

Inertia returns urdf::Inertia:
	{urdf::Inertia}
	BEGIN
		('ixx:' ixx=Double0)?
		('ixy:' ixy=Double0)?
		('ixz:' ixz=Double0)?
		('iyy:' iyy=Double0)?
		('iyz:' iyz=Double0)?
		('izz:' izz=Double0)?
	END;

Geometry returns urdf::Geometry:
	{urdf::Geometry}
	BEGIN
		('box:' box=Box)?
		('cylinder:' cylinder=Cylinder)?
		('sphere:' sphere=Sphere)?
		('mesh:' mesh=Mesh)?
	END;

Box returns urdf::Box:
	{urdf::Box}
	BEGIN
		'size' size=EString
	END;

Cylinder returns urdf::Cylinder:
	BEGIN
		'length:' length=Double0
		'radius:' radius=Double0
	END;

Sphere returns urdf::Sphere:
	BEGIN
		'radius:' radius=Double0
	END;

Mesh returns urdf::Mesh:
	BEGIN
		'filename:' filename=EString
		('scale:' scale=EString)?
	END;

AnyURI returns type::AnyURI:
	'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;

EString returns ecore::EString:
	STRING
;

// from https://github.com/ipa320/ros-model/blob/e9279c9eab1c5d2554f239e80150f2df1bbb5ab3/plugins/de.fraunhofer.ipa.rossystem.xtext/src/de/fraunhofer/ipa/rossystem/RosSystem.xtext#L283-L307
terminal fragment DIGIT: '0'..'9';
terminal BOOLEAN: 'true'|'false';
terminal DOUBLE returns ecore::EDouble: DECINT (('.' DIGIT*) | (('.' DIGIT*)? ('E'|'e') ('-'|'+')? DECINT));  // Use terminal to avoid 'e' turning into a keyword
terminal DECINT: '0' | ('1'..'9' DIGIT*) | ('-''0'..'9' DIGIT*) ;
terminal JOINTTYPE: 'revolute' | 'continuous' | 'prismatic' | 'fixed' | 'floating' | 'planar';

///////////////////
// YAML format
///////////////////
terminal BEGIN: 'synthetic:BEGIN';
terminal END: 'synthetic:END';

@Override 
terminal SL_COMMENT: '#' !('\n'|'\r')*;


Double0 returns type::Double:
	DOUBLE;

Integer0 returns type::Int:
	DECINT;