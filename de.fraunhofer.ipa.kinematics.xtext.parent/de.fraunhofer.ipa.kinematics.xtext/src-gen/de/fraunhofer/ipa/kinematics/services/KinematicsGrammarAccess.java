/*
 * generated by Xtext 2.26.0
 */
package de.fraunhofer.ipa.kinematics.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KinematicsGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cXacroRobotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRobotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Robot returns XacroRobot:
		//    {XacroRobot}
		//    'Robot'
		//    '{'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{XacroRobot}
		//'Robot'
		//'{'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{XacroRobot}
		public Action getXacroRobotAction_0() { return cXacroRobotAction_0; }
		
		//'Robot'
		public Keyword getRobotKeyword_1() { return cRobotKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParameterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameEStringParserRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Parameter returns Parameter:
		//    {Parameter}
		//    'Parameter'
		//    name=EString
		//    '{'
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter}
		//'Parameter'
		//name=EString
		//'{'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//'Parameter'
		public Keyword getParameterKeyword_1() { return cParameterKeyword_1; }
		
		//name=EString
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_2_0() { return cNameEStringParserRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class JointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Joint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeJOINTTYPETerminalRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Keyword cParentKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cParentAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final CrossReference cParentLinkCrossReference_7_0 = (CrossReference)cParentAssignment_7.eContents().get(0);
		private final RuleCall cParentLinkIDTerminalRuleCall_7_0_1 = (RuleCall)cParentLinkCrossReference_7_0.eContents().get(1);
		private final Keyword cChildKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cChildAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final CrossReference cChildLinkCrossReference_9_0 = (CrossReference)cChildAssignment_9.eContents().get(0);
		private final RuleCall cChildLinkIDTerminalRuleCall_9_0_1 = (RuleCall)cChildLinkCrossReference_9_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cOriginKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cOriginAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cOriginPoseParserRuleCall_10_1_0 = (RuleCall)cOriginAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cAxisKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cAxisAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cAxisAxisParserRuleCall_11_1_0 = (RuleCall)cAxisAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cLimitKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cLimitAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cLimitLimitParserRuleCall_12_1_0 = (RuleCall)cLimitAssignment_12_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Joint returns urdf::Joint:
		//    'Joint'
		//    '{'
		//        'name' name=EString
		//        'type' type=JOINTTYPE
		//        'parent' parent=[urdf::Link]
		//        'child' child=[urdf::Link]
		//        ('origin' origin=Pose)?
		//        ('axis' axis=Axis)?
		//        ('limit' limit=Limit)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Joint'
		//'{'
		//    'name' name=EString
		//    'type' type=JOINTTYPE
		//    'parent' parent=[urdf::Link]
		//    'child' child=[urdf::Link]
		//    ('origin' origin=Pose)?
		//    ('axis' axis=Axis)?
		//    ('limit' limit=Limit)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Joint'
		public Keyword getJointKeyword_0() { return cJointKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//'type'
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//type=JOINTTYPE
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//JOINTTYPE
		public RuleCall getTypeJOINTTYPETerminalRuleCall_5_0() { return cTypeJOINTTYPETerminalRuleCall_5_0; }
		
		//'parent'
		public Keyword getParentKeyword_6() { return cParentKeyword_6; }
		
		//parent=[urdf::Link]
		public Assignment getParentAssignment_7() { return cParentAssignment_7; }
		
		//[urdf::Link]
		public CrossReference getParentLinkCrossReference_7_0() { return cParentLinkCrossReference_7_0; }
		
		//ID
		public RuleCall getParentLinkIDTerminalRuleCall_7_0_1() { return cParentLinkIDTerminalRuleCall_7_0_1; }
		
		//'child'
		public Keyword getChildKeyword_8() { return cChildKeyword_8; }
		
		//child=[urdf::Link]
		public Assignment getChildAssignment_9() { return cChildAssignment_9; }
		
		//[urdf::Link]
		public CrossReference getChildLinkCrossReference_9_0() { return cChildLinkCrossReference_9_0; }
		
		//ID
		public RuleCall getChildLinkIDTerminalRuleCall_9_0_1() { return cChildLinkIDTerminalRuleCall_9_0_1; }
		
		//('origin' origin=Pose)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'origin'
		public Keyword getOriginKeyword_10_0() { return cOriginKeyword_10_0; }
		
		//origin=Pose
		public Assignment getOriginAssignment_10_1() { return cOriginAssignment_10_1; }
		
		//Pose
		public RuleCall getOriginPoseParserRuleCall_10_1_0() { return cOriginPoseParserRuleCall_10_1_0; }
		
		//('axis' axis=Axis)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'axis'
		public Keyword getAxisKeyword_11_0() { return cAxisKeyword_11_0; }
		
		//axis=Axis
		public Assignment getAxisAssignment_11_1() { return cAxisAssignment_11_1; }
		
		//Axis
		public RuleCall getAxisAxisParserRuleCall_11_1_0() { return cAxisAxisParserRuleCall_11_1_0; }
		
		//('limit' limit=Limit)?
		public Group getGroup_12() { return cGroup_12; }
		
		//'limit'
		public Keyword getLimitKeyword_12_0() { return cLimitKeyword_12_0; }
		
		//limit=Limit
		public Assignment getLimitAssignment_12_1() { return cLimitAssignment_12_1; }
		
		//Limit
		public RuleCall getLimitLimitParserRuleCall_12_1_0() { return cLimitLimitParserRuleCall_12_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameEStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInertialKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInertialAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInertialInertialParserRuleCall_4_1_0 = (RuleCall)cInertialAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVisualKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVisualAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVisualVisualParserRuleCall_5_1_0 = (RuleCall)cVisualAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCollisionKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCollisionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCollisionCollisionParserRuleCall_6_1_0 = (RuleCall)cCollisionAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Link returns urdf::Link:
		//    'Link'
		//    '{'
		//        'name' name=EString
		//        ('inertial' inertial=Inertial)?
		//        ('visual' visual=Visual)?
		//        ('collision' collision=Collision)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Link'
		//'{'
		//    'name' name=EString
		//    ('inertial' inertial=Inertial)?
		//    ('visual' visual=Visual)?
		//    ('collision' collision=Collision)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Link'
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=EString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//EString
		public RuleCall getNameEStringParserRuleCall_3_0() { return cNameEStringParserRuleCall_3_0; }
		
		//('inertial' inertial=Inertial)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'inertial'
		public Keyword getInertialKeyword_4_0() { return cInertialKeyword_4_0; }
		
		//inertial=Inertial
		public Assignment getInertialAssignment_4_1() { return cInertialAssignment_4_1; }
		
		//Inertial
		public RuleCall getInertialInertialParserRuleCall_4_1_0() { return cInertialInertialParserRuleCall_4_1_0; }
		
		//('visual' visual=Visual)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'visual'
		public Keyword getVisualKeyword_5_0() { return cVisualKeyword_5_0; }
		
		//visual=Visual
		public Assignment getVisualAssignment_5_1() { return cVisualAssignment_5_1; }
		
		//Visual
		public RuleCall getVisualVisualParserRuleCall_5_1_0() { return cVisualVisualParserRuleCall_5_1_0; }
		
		//('collision' collision=Collision)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'collision'
		public Keyword getCollisionKeyword_6_0() { return cCollisionKeyword_6_0; }
		
		//collision=Collision
		public Assignment getCollisionAssignment_6_1() { return cCollisionAssignment_6_1; }
		
		//Collision
		public RuleCall getCollisionCollisionParserRuleCall_6_1_0() { return cCollisionCollisionParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class AxisElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Axis");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAxisAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAxisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cXyzKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cXyzAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cXyzEStringParserRuleCall_3_1_0 = (RuleCall)cXyzAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Axis returns urdf::Axis:
		//    {urdf::Axis}
		//    'Axis'
		//    '{'
		//        ('xyz' xyz=EString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{urdf::Axis}
		//'Axis'
		//'{'
		//    ('xyz' xyz=EString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{urdf::Axis}
		public Action getAxisAction_0() { return cAxisAction_0; }
		
		//'Axis'
		public Keyword getAxisKeyword_1() { return cAxisKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('xyz' xyz=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'xyz'
		public Keyword getXyzKeyword_3_0() { return cXyzKeyword_3_0; }
		
		//xyz=EString
		public Assignment getXyzAssignment_3_1() { return cXyzAssignment_3_1; }
		
		//EString
		public RuleCall getXyzEStringParserRuleCall_3_1_0() { return cXyzEStringParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PoseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Pose");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPoseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPoseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRpyKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRpyAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRpyEStringParserRuleCall_3_1_0 = (RuleCall)cRpyAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cXyzKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cXyzAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cXyzEStringParserRuleCall_4_1_0 = (RuleCall)cXyzAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Pose returns urdf::Pose:
		//    {urdf::Pose}
		//    'Pose'
		//    '{'
		//        ('rpy' rpy=EString)?
		//        ('xyz' xyz=EString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{urdf::Pose}
		//'Pose'
		//'{'
		//    ('rpy' rpy=EString)?
		//    ('xyz' xyz=EString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{urdf::Pose}
		public Action getPoseAction_0() { return cPoseAction_0; }
		
		//'Pose'
		public Keyword getPoseKeyword_1() { return cPoseKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('rpy' rpy=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'rpy'
		public Keyword getRpyKeyword_3_0() { return cRpyKeyword_3_0; }
		
		//rpy=EString
		public Assignment getRpyAssignment_3_1() { return cRpyAssignment_3_1; }
		
		//EString
		public RuleCall getRpyEStringParserRuleCall_3_1_0() { return cRpyEStringParserRuleCall_3_1_0; }
		
		//('xyz' xyz=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'xyz'
		public Keyword getXyzKeyword_4_0() { return cXyzKeyword_4_0; }
		
		//xyz=EString
		public Assignment getXyzAssignment_4_1() { return cXyzAssignment_4_1; }
		
		//EString
		public RuleCall getXyzEStringParserRuleCall_4_1_0() { return cXyzEStringParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class LimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Limit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLimitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLimitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEffortKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEffortAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEffortDouble0ParserRuleCall_3_1_0 = (RuleCall)cEffortAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLowerKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLowerAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLowerDouble0ParserRuleCall_4_1_0 = (RuleCall)cLowerAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUpperKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUpperAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUpperDouble0ParserRuleCall_5_1_0 = (RuleCall)cUpperAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cVelocityKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cVelocityAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cVelocityDouble0ParserRuleCall_6_1_0 = (RuleCall)cVelocityAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Limit returns urdf::Limit:
		//    {urdf::Limit}
		//    'Limit'
		//    '{'
		//        ('effort' effort=Double0)?
		//        ('lower' lower=Double0)?
		//        ('upper' upper=Double0)?
		//        ('velocity' velocity=Double0)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{urdf::Limit}
		//'Limit'
		//'{'
		//    ('effort' effort=Double0)?
		//    ('lower' lower=Double0)?
		//    ('upper' upper=Double0)?
		//    ('velocity' velocity=Double0)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{urdf::Limit}
		public Action getLimitAction_0() { return cLimitAction_0; }
		
		//'Limit'
		public Keyword getLimitKeyword_1() { return cLimitKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('effort' effort=Double0)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'effort'
		public Keyword getEffortKeyword_3_0() { return cEffortKeyword_3_0; }
		
		//effort=Double0
		public Assignment getEffortAssignment_3_1() { return cEffortAssignment_3_1; }
		
		//Double0
		public RuleCall getEffortDouble0ParserRuleCall_3_1_0() { return cEffortDouble0ParserRuleCall_3_1_0; }
		
		//('lower' lower=Double0)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'lower'
		public Keyword getLowerKeyword_4_0() { return cLowerKeyword_4_0; }
		
		//lower=Double0
		public Assignment getLowerAssignment_4_1() { return cLowerAssignment_4_1; }
		
		//Double0
		public RuleCall getLowerDouble0ParserRuleCall_4_1_0() { return cLowerDouble0ParserRuleCall_4_1_0; }
		
		//('upper' upper=Double0)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'upper'
		public Keyword getUpperKeyword_5_0() { return cUpperKeyword_5_0; }
		
		//upper=Double0
		public Assignment getUpperAssignment_5_1() { return cUpperAssignment_5_1; }
		
		//Double0
		public RuleCall getUpperDouble0ParserRuleCall_5_1_0() { return cUpperDouble0ParserRuleCall_5_1_0; }
		
		//('velocity' velocity=Double0)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'velocity'
		public Keyword getVelocityKeyword_6_0() { return cVelocityKeyword_6_0; }
		
		//velocity=Double0
		public Assignment getVelocityAssignment_6_1() { return cVelocityAssignment_6_1; }
		
		//Double0
		public RuleCall getVelocityDouble0ParserRuleCall_6_1_0() { return cVelocityDouble0ParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class InertialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Inertial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInertialAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInertialKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOriginKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOriginAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOriginPoseParserRuleCall_3_1_0 = (RuleCall)cOriginAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMassKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMassAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMassMassParserRuleCall_4_1_0 = (RuleCall)cMassAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInertiaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInertiaAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInertiaInertiaParserRuleCall_5_1_0 = (RuleCall)cInertiaAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Inertial returns urdf::Inertial:
		//    {urdf::Inertial}
		//    'Inertial'
		//    '{'
		//        ('origin' origin=Pose)?
		//        ('mass' mass=Mass)?
		//        ('inertia' inertia=Inertia)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{urdf::Inertial}
		//'Inertial'
		//'{'
		//    ('origin' origin=Pose)?
		//    ('mass' mass=Mass)?
		//    ('inertia' inertia=Inertia)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{urdf::Inertial}
		public Action getInertialAction_0() { return cInertialAction_0; }
		
		//'Inertial'
		public Keyword getInertialKeyword_1() { return cInertialKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('origin' origin=Pose)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'origin'
		public Keyword getOriginKeyword_3_0() { return cOriginKeyword_3_0; }
		
		//origin=Pose
		public Assignment getOriginAssignment_3_1() { return cOriginAssignment_3_1; }
		
		//Pose
		public RuleCall getOriginPoseParserRuleCall_3_1_0() { return cOriginPoseParserRuleCall_3_1_0; }
		
		//('mass' mass=Mass)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'mass'
		public Keyword getMassKeyword_4_0() { return cMassKeyword_4_0; }
		
		//mass=Mass
		public Assignment getMassAssignment_4_1() { return cMassAssignment_4_1; }
		
		//Mass
		public RuleCall getMassMassParserRuleCall_4_1_0() { return cMassMassParserRuleCall_4_1_0; }
		
		//('inertia' inertia=Inertia)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'inertia'
		public Keyword getInertiaKeyword_5_0() { return cInertiaKeyword_5_0; }
		
		//inertia=Inertia
		public Assignment getInertiaAssignment_5_1() { return cInertiaAssignment_5_1; }
		
		//Inertia
		public RuleCall getInertiaInertiaParserRuleCall_5_1_0() { return cInertiaInertiaParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class VisualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Visual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVisualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOriginKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOriginAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOriginPoseParserRuleCall_2_1_0 = (RuleCall)cOriginAssignment_2_1.eContents().get(0);
		private final Keyword cGeometryKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGeometryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGeometryGeometryParserRuleCall_4_0 = (RuleCall)cGeometryAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Visual returns urdf::Visual:
		//    'Visual'
		//    '{'
		//        ('origin' origin=Pose)?
		//        'geometry' geometry=Geometry
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Visual'
		//'{'
		//    ('origin' origin=Pose)?
		//    'geometry' geometry=Geometry
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Visual'
		public Keyword getVisualKeyword_0() { return cVisualKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('origin' origin=Pose)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'origin'
		public Keyword getOriginKeyword_2_0() { return cOriginKeyword_2_0; }
		
		//origin=Pose
		public Assignment getOriginAssignment_2_1() { return cOriginAssignment_2_1; }
		
		//Pose
		public RuleCall getOriginPoseParserRuleCall_2_1_0() { return cOriginPoseParserRuleCall_2_1_0; }
		
		//'geometry'
		public Keyword getGeometryKeyword_3() { return cGeometryKeyword_3; }
		
		//geometry=Geometry
		public Assignment getGeometryAssignment_4() { return cGeometryAssignment_4; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_4_0() { return cGeometryGeometryParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class CollisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Collision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCollisionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOriginKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOriginAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOriginPoseParserRuleCall_2_1_0 = (RuleCall)cOriginAssignment_2_1.eContents().get(0);
		private final Keyword cGeometryKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGeometryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGeometryGeometryParserRuleCall_4_0 = (RuleCall)cGeometryAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Collision returns urdf::Collision:
		//    'Collision'
		//    '{'
		//        ('origin' origin=Pose)?
		//        'geometry' geometry=Geometry
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Collision'
		//'{'
		//    ('origin' origin=Pose)?
		//    'geometry' geometry=Geometry
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Collision'
		public Keyword getCollisionKeyword_0() { return cCollisionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('origin' origin=Pose)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'origin'
		public Keyword getOriginKeyword_2_0() { return cOriginKeyword_2_0; }
		
		//origin=Pose
		public Assignment getOriginAssignment_2_1() { return cOriginAssignment_2_1; }
		
		//Pose
		public RuleCall getOriginPoseParserRuleCall_2_1_0() { return cOriginPoseParserRuleCall_2_1_0; }
		
		//'geometry'
		public Keyword getGeometryKeyword_3() { return cGeometryKeyword_3; }
		
		//geometry=Geometry
		public Assignment getGeometryAssignment_4() { return cGeometryAssignment_4; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_4_0() { return cGeometryGeometryParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Mass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueDouble0ParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Mass returns urdf::Mass:
		//    {urdf::Mass}
		//    'Mass'
		//    '{'
		//        ('value' value=Double0)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{urdf::Mass}
		//'Mass'
		//'{'
		//    ('value' value=Double0)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{urdf::Mass}
		public Action getMassAction_0() { return cMassAction_0; }
		
		//'Mass'
		public Keyword getMassKeyword_1() { return cMassKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('value' value=Double0)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'value'
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }
		
		//value=Double0
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//Double0
		public RuleCall getValueDouble0ParserRuleCall_3_1_0() { return cValueDouble0ParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class InertiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Inertia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInertiaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInertiaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIxxKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIxxAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIxxDouble0ParserRuleCall_3_1_0 = (RuleCall)cIxxAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIxyKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIxyAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIxyDouble0ParserRuleCall_4_1_0 = (RuleCall)cIxyAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cIxzKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cIxzAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cIxzDouble0ParserRuleCall_5_1_0 = (RuleCall)cIxzAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cIyyKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cIyyAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cIyyDouble0ParserRuleCall_6_1_0 = (RuleCall)cIyyAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cIyzKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cIyzAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cIyzDouble0ParserRuleCall_7_1_0 = (RuleCall)cIyzAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cIzzKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cIzzAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cIzzDouble0ParserRuleCall_8_1_0 = (RuleCall)cIzzAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Inertia returns urdf::Inertia:
		//    {urdf::Inertia}
		//    'Inertia'
		//    '{'
		//        ('ixx' ixx=Double0)?
		//        ('ixy' ixy=Double0)?
		//        ('ixz' ixz=Double0)?
		//        ('iyy' iyy=Double0)?
		//        ('iyz' iyz=Double0)?
		//        ('izz' izz=Double0)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{urdf::Inertia}
		//'Inertia'
		//'{'
		//    ('ixx' ixx=Double0)?
		//    ('ixy' ixy=Double0)?
		//    ('ixz' ixz=Double0)?
		//    ('iyy' iyy=Double0)?
		//    ('iyz' iyz=Double0)?
		//    ('izz' izz=Double0)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{urdf::Inertia}
		public Action getInertiaAction_0() { return cInertiaAction_0; }
		
		//'Inertia'
		public Keyword getInertiaKeyword_1() { return cInertiaKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('ixx' ixx=Double0)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'ixx'
		public Keyword getIxxKeyword_3_0() { return cIxxKeyword_3_0; }
		
		//ixx=Double0
		public Assignment getIxxAssignment_3_1() { return cIxxAssignment_3_1; }
		
		//Double0
		public RuleCall getIxxDouble0ParserRuleCall_3_1_0() { return cIxxDouble0ParserRuleCall_3_1_0; }
		
		//('ixy' ixy=Double0)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'ixy'
		public Keyword getIxyKeyword_4_0() { return cIxyKeyword_4_0; }
		
		//ixy=Double0
		public Assignment getIxyAssignment_4_1() { return cIxyAssignment_4_1; }
		
		//Double0
		public RuleCall getIxyDouble0ParserRuleCall_4_1_0() { return cIxyDouble0ParserRuleCall_4_1_0; }
		
		//('ixz' ixz=Double0)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'ixz'
		public Keyword getIxzKeyword_5_0() { return cIxzKeyword_5_0; }
		
		//ixz=Double0
		public Assignment getIxzAssignment_5_1() { return cIxzAssignment_5_1; }
		
		//Double0
		public RuleCall getIxzDouble0ParserRuleCall_5_1_0() { return cIxzDouble0ParserRuleCall_5_1_0; }
		
		//('iyy' iyy=Double0)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'iyy'
		public Keyword getIyyKeyword_6_0() { return cIyyKeyword_6_0; }
		
		//iyy=Double0
		public Assignment getIyyAssignment_6_1() { return cIyyAssignment_6_1; }
		
		//Double0
		public RuleCall getIyyDouble0ParserRuleCall_6_1_0() { return cIyyDouble0ParserRuleCall_6_1_0; }
		
		//('iyz' iyz=Double0)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'iyz'
		public Keyword getIyzKeyword_7_0() { return cIyzKeyword_7_0; }
		
		//iyz=Double0
		public Assignment getIyzAssignment_7_1() { return cIyzAssignment_7_1; }
		
		//Double0
		public RuleCall getIyzDouble0ParserRuleCall_7_1_0() { return cIyzDouble0ParserRuleCall_7_1_0; }
		
		//('izz' izz=Double0)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'izz'
		public Keyword getIzzKeyword_8_0() { return cIzzKeyword_8_0; }
		
		//izz=Double0
		public Assignment getIzzAssignment_8_1() { return cIzzAssignment_8_1; }
		
		//Double0
		public RuleCall getIzzDouble0ParserRuleCall_8_1_0() { return cIzzDouble0ParserRuleCall_8_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class GeometryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Geometry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGeometryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGeometryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cBoxKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBoxAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBoxBoxParserRuleCall_3_1_0 = (RuleCall)cBoxAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCylinderKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCylinderAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCylinderCylinderParserRuleCall_4_1_0 = (RuleCall)cCylinderAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSphereKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSphereAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSphereSphereParserRuleCall_5_1_0 = (RuleCall)cSphereAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cMeshKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cMeshAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMeshMeshParserRuleCall_6_1_0 = (RuleCall)cMeshAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Geometry returns urdf::Geometry:
		//    {urdf::Geometry}
		//    'Geometry'
		//    '{'
		//        ('box' box=Box)?
		//        ('cylinder' cylinder=Cylinder)?
		//        ('sphere' sphere=Sphere)?
		//        ('mesh' mesh=Mesh)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{urdf::Geometry}
		//'Geometry'
		//'{'
		//    ('box' box=Box)?
		//    ('cylinder' cylinder=Cylinder)?
		//    ('sphere' sphere=Sphere)?
		//    ('mesh' mesh=Mesh)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{urdf::Geometry}
		public Action getGeometryAction_0() { return cGeometryAction_0; }
		
		//'Geometry'
		public Keyword getGeometryKeyword_1() { return cGeometryKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('box' box=Box)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'box'
		public Keyword getBoxKeyword_3_0() { return cBoxKeyword_3_0; }
		
		//box=Box
		public Assignment getBoxAssignment_3_1() { return cBoxAssignment_3_1; }
		
		//Box
		public RuleCall getBoxBoxParserRuleCall_3_1_0() { return cBoxBoxParserRuleCall_3_1_0; }
		
		//('cylinder' cylinder=Cylinder)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'cylinder'
		public Keyword getCylinderKeyword_4_0() { return cCylinderKeyword_4_0; }
		
		//cylinder=Cylinder
		public Assignment getCylinderAssignment_4_1() { return cCylinderAssignment_4_1; }
		
		//Cylinder
		public RuleCall getCylinderCylinderParserRuleCall_4_1_0() { return cCylinderCylinderParserRuleCall_4_1_0; }
		
		//('sphere' sphere=Sphere)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'sphere'
		public Keyword getSphereKeyword_5_0() { return cSphereKeyword_5_0; }
		
		//sphere=Sphere
		public Assignment getSphereAssignment_5_1() { return cSphereAssignment_5_1; }
		
		//Sphere
		public RuleCall getSphereSphereParserRuleCall_5_1_0() { return cSphereSphereParserRuleCall_5_1_0; }
		
		//('mesh' mesh=Mesh)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'mesh'
		public Keyword getMeshKeyword_6_0() { return cMeshKeyword_6_0; }
		
		//mesh=Mesh
		public Assignment getMeshAssignment_6_1() { return cMeshAssignment_6_1; }
		
		//Mesh
		public RuleCall getMeshMeshParserRuleCall_6_1_0() { return cMeshMeshParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class BoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Box");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoxAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSizeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSizeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSizeEStringParserRuleCall_3_1_0 = (RuleCall)cSizeAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Box returns urdf::Box:
		//    {urdf::Box}
		//    'Box'
		//    '{'
		//        ('size' size=EString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{urdf::Box}
		//'Box'
		//'{'
		//    ('size' size=EString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{urdf::Box}
		public Action getBoxAction_0() { return cBoxAction_0; }
		
		//'Box'
		public Keyword getBoxKeyword_1() { return cBoxKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('size' size=EString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'size'
		public Keyword getSizeKeyword_3_0() { return cSizeKeyword_3_0; }
		
		//size=EString
		public Assignment getSizeAssignment_3_1() { return cSizeAssignment_3_1; }
		
		//EString
		public RuleCall getSizeEStringParserRuleCall_3_1_0() { return cSizeEStringParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CylinderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Cylinder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCylinderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLengthKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLengthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLengthDouble0ParserRuleCall_3_0 = (RuleCall)cLengthAssignment_3.eContents().get(0);
		private final Keyword cRadiusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRadiusAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRadiusDouble0ParserRuleCall_5_0 = (RuleCall)cRadiusAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Cylinder returns urdf::Cylinder:
		//    'Cylinder'
		//    '{'
		//        'length' length=Double0
		//        'radius' radius=Double0
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Cylinder'
		//'{'
		//    'length' length=Double0
		//    'radius' radius=Double0
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Cylinder'
		public Keyword getCylinderKeyword_0() { return cCylinderKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'length'
		public Keyword getLengthKeyword_2() { return cLengthKeyword_2; }
		
		//length=Double0
		public Assignment getLengthAssignment_3() { return cLengthAssignment_3; }
		
		//Double0
		public RuleCall getLengthDouble0ParserRuleCall_3_0() { return cLengthDouble0ParserRuleCall_3_0; }
		
		//'radius'
		public Keyword getRadiusKeyword_4() { return cRadiusKeyword_4; }
		
		//radius=Double0
		public Assignment getRadiusAssignment_5() { return cRadiusAssignment_5; }
		
		//Double0
		public RuleCall getRadiusDouble0ParserRuleCall_5_0() { return cRadiusDouble0ParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SphereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Sphere");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSphereKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRadiusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRadiusAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRadiusDouble0ParserRuleCall_3_0 = (RuleCall)cRadiusAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Sphere returns urdf::Sphere:
		//    'Sphere'
		//    '{'
		//        'radius' radius=Double0
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Sphere'
		//'{'
		//    'radius' radius=Double0
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Sphere'
		public Keyword getSphereKeyword_0() { return cSphereKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'radius'
		public Keyword getRadiusKeyword_2() { return cRadiusKeyword_2; }
		
		//radius=Double0
		public Assignment getRadiusAssignment_3() { return cRadiusAssignment_3; }
		
		//Double0
		public RuleCall getRadiusDouble0ParserRuleCall_3_0() { return cRadiusDouble0ParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MeshElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Mesh");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeshKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFilenameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFilenameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_3_0 = (RuleCall)cFilenameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cScaleKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cScaleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cScaleEStringParserRuleCall_4_1_0 = (RuleCall)cScaleAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Mesh returns urdf::Mesh:
		//    'Mesh'
		//    '{'
		//        'filename' filename=STRING
		//        ('scale' scale=EString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Mesh'
		//'{'
		//    'filename' filename=STRING
		//    ('scale' scale=EString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Mesh'
		public Keyword getMeshKeyword_0() { return cMeshKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'filename'
		public Keyword getFilenameKeyword_2() { return cFilenameKeyword_2; }
		
		//filename=STRING
		public Assignment getFilenameAssignment_3() { return cFilenameAssignment_3; }
		
		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_3_0() { return cFilenameSTRINGTerminalRuleCall_3_0; }
		
		//('scale' scale=EString)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'scale'
		public Keyword getScaleKeyword_4_0() { return cScaleKeyword_4_0; }
		
		//scale=EString
		public Assignment getScaleAssignment_4_1() { return cScaleAssignment_4_1; }
		
		//EString
		public RuleCall getScaleEStringParserRuleCall_4_1_0() { return cScaleEStringParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AnyURIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.AnyURI");
		private final Keyword cAnyURIKeyword = (Keyword)rule.eContents().get(1);
		
		//AnyURI returns type::AnyURI:
		//    'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;
		@Override public ParserRule getRule() { return rule; }
		
		//'AnyURI'
		public Keyword getAnyURIKeyword() { return cAnyURIKeyword; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.EString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class Double0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Double0");
		private final RuleCall cDOUBLETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Double0 returns type::Double:
		//    DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall() { return cDOUBLETerminalRuleCall; }
	}
	public class Integer0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Integer0");
		private final RuleCall cDECINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Integer0 returns type::Int:
		//    DECINT;
		@Override public ParserRule getRule() { return rule; }
		
		//DECINT
		public RuleCall getDECINTTerminalRuleCall() { return cDECINTTerminalRuleCall; }
	}
	
	
	private final RobotElements pRobot;
	private final ParameterElements pParameter;
	private final JointElements pJoint;
	private final LinkElements pLink;
	private final AxisElements pAxis;
	private final PoseElements pPose;
	private final LimitElements pLimit;
	private final InertialElements pInertial;
	private final VisualElements pVisual;
	private final CollisionElements pCollision;
	private final MassElements pMass;
	private final InertiaElements pInertia;
	private final GeometryElements pGeometry;
	private final BoxElements pBox;
	private final CylinderElements pCylinder;
	private final SphereElements pSphere;
	private final MeshElements pMesh;
	private final AnyURIElements pAnyURI;
	private final EStringElements pEString;
	private final TerminalRule tDIGIT;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tDECINT;
	private final TerminalRule tJOINTTYPE;
	private final Double0Elements pDouble0;
	private final Integer0Elements pInteger0;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KinematicsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobot = new RobotElements();
		this.pParameter = new ParameterElements();
		this.pJoint = new JointElements();
		this.pLink = new LinkElements();
		this.pAxis = new AxisElements();
		this.pPose = new PoseElements();
		this.pLimit = new LimitElements();
		this.pInertial = new InertialElements();
		this.pVisual = new VisualElements();
		this.pCollision = new CollisionElements();
		this.pMass = new MassElements();
		this.pInertia = new InertiaElements();
		this.pGeometry = new GeometryElements();
		this.pBox = new BoxElements();
		this.pCylinder = new CylinderElements();
		this.pSphere = new SphereElements();
		this.pMesh = new MeshElements();
		this.pAnyURI = new AnyURIElements();
		this.pEString = new EStringElements();
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.DIGIT");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.BOOLEAN");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.DOUBLE");
		this.tDECINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.DECINT");
		this.tJOINTTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.JOINTTYPE");
		this.pDouble0 = new Double0Elements();
		this.pInteger0 = new Integer0Elements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.fraunhofer.ipa.kinematics.Kinematics".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Robot returns XacroRobot:
	//    {XacroRobot}
	//    'Robot'
	//    '{'
	//    '}';
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//Parameter returns Parameter:
	//    {Parameter}
	//    'Parameter'
	//    name=EString
	//    '{'
	//    '}';
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//Joint returns urdf::Joint:
	//    'Joint'
	//    '{'
	//        'name' name=EString
	//        'type' type=JOINTTYPE
	//        'parent' parent=[urdf::Link]
	//        'child' child=[urdf::Link]
	//        ('origin' origin=Pose)?
	//        ('axis' axis=Axis)?
	//        ('limit' limit=Limit)?
	//    '}';
	public JointElements getJointAccess() {
		return pJoint;
	}
	
	public ParserRule getJointRule() {
		return getJointAccess().getRule();
	}
	
	//Link returns urdf::Link:
	//    'Link'
	//    '{'
	//        'name' name=EString
	//        ('inertial' inertial=Inertial)?
	//        ('visual' visual=Visual)?
	//        ('collision' collision=Collision)?
	//    '}';
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//Axis returns urdf::Axis:
	//    {urdf::Axis}
	//    'Axis'
	//    '{'
	//        ('xyz' xyz=EString)?
	//    '}';
	public AxisElements getAxisAccess() {
		return pAxis;
	}
	
	public ParserRule getAxisRule() {
		return getAxisAccess().getRule();
	}
	
	//Pose returns urdf::Pose:
	//    {urdf::Pose}
	//    'Pose'
	//    '{'
	//        ('rpy' rpy=EString)?
	//        ('xyz' xyz=EString)?
	//    '}';
	public PoseElements getPoseAccess() {
		return pPose;
	}
	
	public ParserRule getPoseRule() {
		return getPoseAccess().getRule();
	}
	
	//Limit returns urdf::Limit:
	//    {urdf::Limit}
	//    'Limit'
	//    '{'
	//        ('effort' effort=Double0)?
	//        ('lower' lower=Double0)?
	//        ('upper' upper=Double0)?
	//        ('velocity' velocity=Double0)?
	//    '}';
	public LimitElements getLimitAccess() {
		return pLimit;
	}
	
	public ParserRule getLimitRule() {
		return getLimitAccess().getRule();
	}
	
	//Inertial returns urdf::Inertial:
	//    {urdf::Inertial}
	//    'Inertial'
	//    '{'
	//        ('origin' origin=Pose)?
	//        ('mass' mass=Mass)?
	//        ('inertia' inertia=Inertia)?
	//    '}';
	public InertialElements getInertialAccess() {
		return pInertial;
	}
	
	public ParserRule getInertialRule() {
		return getInertialAccess().getRule();
	}
	
	//Visual returns urdf::Visual:
	//    'Visual'
	//    '{'
	//        ('origin' origin=Pose)?
	//        'geometry' geometry=Geometry
	//    '}';
	public VisualElements getVisualAccess() {
		return pVisual;
	}
	
	public ParserRule getVisualRule() {
		return getVisualAccess().getRule();
	}
	
	//Collision returns urdf::Collision:
	//    'Collision'
	//    '{'
	//        ('origin' origin=Pose)?
	//        'geometry' geometry=Geometry
	//    '}';
	public CollisionElements getCollisionAccess() {
		return pCollision;
	}
	
	public ParserRule getCollisionRule() {
		return getCollisionAccess().getRule();
	}
	
	//Mass returns urdf::Mass:
	//    {urdf::Mass}
	//    'Mass'
	//    '{'
	//        ('value' value=Double0)?
	//    '}';
	public MassElements getMassAccess() {
		return pMass;
	}
	
	public ParserRule getMassRule() {
		return getMassAccess().getRule();
	}
	
	//Inertia returns urdf::Inertia:
	//    {urdf::Inertia}
	//    'Inertia'
	//    '{'
	//        ('ixx' ixx=Double0)?
	//        ('ixy' ixy=Double0)?
	//        ('ixz' ixz=Double0)?
	//        ('iyy' iyy=Double0)?
	//        ('iyz' iyz=Double0)?
	//        ('izz' izz=Double0)?
	//    '}';
	public InertiaElements getInertiaAccess() {
		return pInertia;
	}
	
	public ParserRule getInertiaRule() {
		return getInertiaAccess().getRule();
	}
	
	//Geometry returns urdf::Geometry:
	//    {urdf::Geometry}
	//    'Geometry'
	//    '{'
	//        ('box' box=Box)?
	//        ('cylinder' cylinder=Cylinder)?
	//        ('sphere' sphere=Sphere)?
	//        ('mesh' mesh=Mesh)?
	//    '}';
	public GeometryElements getGeometryAccess() {
		return pGeometry;
	}
	
	public ParserRule getGeometryRule() {
		return getGeometryAccess().getRule();
	}
	
	//Box returns urdf::Box:
	//    {urdf::Box}
	//    'Box'
	//    '{'
	//        ('size' size=EString)?
	//    '}';
	public BoxElements getBoxAccess() {
		return pBox;
	}
	
	public ParserRule getBoxRule() {
		return getBoxAccess().getRule();
	}
	
	//Cylinder returns urdf::Cylinder:
	//    'Cylinder'
	//    '{'
	//        'length' length=Double0
	//        'radius' radius=Double0
	//    '}';
	public CylinderElements getCylinderAccess() {
		return pCylinder;
	}
	
	public ParserRule getCylinderRule() {
		return getCylinderAccess().getRule();
	}
	
	//Sphere returns urdf::Sphere:
	//    'Sphere'
	//    '{'
	//        'radius' radius=Double0
	//    '}';
	public SphereElements getSphereAccess() {
		return pSphere;
	}
	
	public ParserRule getSphereRule() {
		return getSphereAccess().getRule();
	}
	
	//Mesh returns urdf::Mesh:
	//    'Mesh'
	//    '{'
	//        'filename' filename=STRING
	//        ('scale' scale=EString)?
	//    '}';
	public MeshElements getMeshAccess() {
		return pMesh;
	}
	
	public ParserRule getMeshRule() {
		return getMeshAccess().getRule();
	}
	
	//AnyURI returns type::AnyURI:
	//    'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;
	public AnyURIElements getAnyURIAccess() {
		return pAnyURI;
	}
	
	public ParserRule getAnyURIRule() {
		return getAnyURIAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING
	//;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//// from https://github.com/ipa320/ros-model/blob/e9279c9eab1c5d2554f239e80150f2df1bbb5ab3/plugins/de.fraunhofer.ipa.rossystem.xtext/src/de/fraunhofer/ipa/rossystem/RosSystem.xtext#L283-L307
	//terminal fragment DIGIT: '0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal BOOLEAN: 'true'|'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal DOUBLE returns ecore::EDouble: DECINT (('.' DIGIT*) | (('.' DIGIT*)? ('E'|'e') ('-'|'+')? DECINT));
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//  // Use terminal to avoid 'e' turning into a keyword
	//terminal DECINT: '0' | ('1'..'9' DIGIT*) | ('-''0'..'9' DIGIT*) ;
	public TerminalRule getDECINTRule() {
		return tDECINT;
	}
	
	//terminal JOINTTYPE: 'revolute' | 'continuous' | 'prismatic' | 'fixed' | 'floating' | 'planar';
	public TerminalRule getJOINTTYPERule() {
		return tJOINTTYPE;
	}
	
	//Double0 returns type::Double:
	//    DOUBLE;
	public Double0Elements getDouble0Access() {
		return pDouble0;
	}
	
	public ParserRule getDouble0Rule() {
		return getDouble0Access().getRule();
	}
	
	//Integer0 returns type::Int:
	//    DECINT;
	public Integer0Elements getInteger0Access() {
		return pInteger0;
	}
	
	public ParserRule getInteger0Rule() {
		return getInteger0Access().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
