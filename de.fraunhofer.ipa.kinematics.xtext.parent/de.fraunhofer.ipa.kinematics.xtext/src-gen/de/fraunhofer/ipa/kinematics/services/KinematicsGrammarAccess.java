/*
 * generated by Xtext 2.25.0
 */
package de.fraunhofer.ipa.kinematics.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KinematicsGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRobotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRobotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVersionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVersionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cVersionAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cMacroKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cMacroAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cMacroMacroParserRuleCall_6_2_0 = (RuleCall)cMacroAssignment_6_2.eContents().get(0);
		private final Group cGroup_6_3 = (Group)cGroup_6.eContents().get(3);
		private final Keyword cCommaKeyword_6_3_0 = (Keyword)cGroup_6_3.eContents().get(0);
		private final Assignment cMacroAssignment_6_3_1 = (Assignment)cGroup_6_3.eContents().get(1);
		private final RuleCall cMacroMacroParserRuleCall_6_3_1_0 = (RuleCall)cMacroAssignment_6_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_4 = (Keyword)cGroup_6.eContents().get(4);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cMacroCallKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cMacroCallAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cMacroCallMacroCallParserRuleCall_7_2_0 = (RuleCall)cMacroCallAssignment_7_2.eContents().get(0);
		private final Group cGroup_7_3 = (Group)cGroup_7.eContents().get(3);
		private final Keyword cCommaKeyword_7_3_0 = (Keyword)cGroup_7_3.eContents().get(0);
		private final Assignment cMacroCallAssignment_7_3_1 = (Assignment)cGroup_7_3.eContents().get(1);
		private final RuleCall cMacroCallMacroCallParserRuleCall_7_3_1_0 = (RuleCall)cMacroCallAssignment_7_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_4 = (Keyword)cGroup_7.eContents().get(4);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cBodyKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cBodyAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cBodyBodyParserRuleCall_8_1_0 = (RuleCall)cBodyAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Robot returns Robot:
		//    {Robot}
		//    'Robot'
		//    '{'
		//        'name' name=ID
		//        ('version' version=STRING)?
		//        ('macro' '{' macro+=Macro ( "," macro+=Macro)* '}' )?
		//        ('macroCall' '{' macroCall+=MacroCall ( "," macroCall+=MacroCall)* '}' )?
		//        ('body' body=Body)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Robot}
		//'Robot'
		//'{'
		//    'name' name=ID
		//    ('version' version=STRING)?
		//    ('macro' '{' macro+=Macro ( "," macro+=Macro)* '}' )?
		//    ('macroCall' '{' macroCall+=MacroCall ( "," macroCall+=MacroCall)* '}' )?
		//    ('body' body=Body)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Robot}
		public Action getRobotAction_0() { return cRobotAction_0; }
		
		//'Robot'
		public Keyword getRobotKeyword_1() { return cRobotKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'name'
		public Keyword getNameKeyword_3() { return cNameKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//('version' version=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'version'
		public Keyword getVersionKeyword_5_0() { return cVersionKeyword_5_0; }
		
		//version=STRING
		public Assignment getVersionAssignment_5_1() { return cVersionAssignment_5_1; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_5_1_0() { return cVersionSTRINGTerminalRuleCall_5_1_0; }
		
		//('macro' '{' macro+=Macro ( "," macro+=Macro)* '}' )?
		public Group getGroup_6() { return cGroup_6; }
		
		//'macro'
		public Keyword getMacroKeyword_6_0() { return cMacroKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//macro+=Macro
		public Assignment getMacroAssignment_6_2() { return cMacroAssignment_6_2; }
		
		//Macro
		public RuleCall getMacroMacroParserRuleCall_6_2_0() { return cMacroMacroParserRuleCall_6_2_0; }
		
		//( "," macro+=Macro)*
		public Group getGroup_6_3() { return cGroup_6_3; }
		
		//","
		public Keyword getCommaKeyword_6_3_0() { return cCommaKeyword_6_3_0; }
		
		//macro+=Macro
		public Assignment getMacroAssignment_6_3_1() { return cMacroAssignment_6_3_1; }
		
		//Macro
		public RuleCall getMacroMacroParserRuleCall_6_3_1_0() { return cMacroMacroParserRuleCall_6_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_4() { return cRightCurlyBracketKeyword_6_4; }
		
		//('macroCall' '{' macroCall+=MacroCall ( "," macroCall+=MacroCall)* '}' )?
		public Group getGroup_7() { return cGroup_7; }
		
		//'macroCall'
		public Keyword getMacroCallKeyword_7_0() { return cMacroCallKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//macroCall+=MacroCall
		public Assignment getMacroCallAssignment_7_2() { return cMacroCallAssignment_7_2; }
		
		//MacroCall
		public RuleCall getMacroCallMacroCallParserRuleCall_7_2_0() { return cMacroCallMacroCallParserRuleCall_7_2_0; }
		
		//( "," macroCall+=MacroCall)*
		public Group getGroup_7_3() { return cGroup_7_3; }
		
		//","
		public Keyword getCommaKeyword_7_3_0() { return cCommaKeyword_7_3_0; }
		
		//macroCall+=MacroCall
		public Assignment getMacroCallAssignment_7_3_1() { return cMacroCallAssignment_7_3_1; }
		
		//MacroCall
		public RuleCall getMacroCallMacroCallParserRuleCall_7_3_1_0() { return cMacroCallMacroCallParserRuleCall_7_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_4() { return cRightCurlyBracketKeyword_7_4; }
		
		//('body' body=Body)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'body'
		public Keyword getBodyKeyword_8_0() { return cBodyKeyword_8_0; }
		
		//body=Body
		public Assignment getBodyAssignment_8_1() { return cBodyAssignment_8_1; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_8_1_0() { return cBodyBodyParserRuleCall_8_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class MacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Macro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMacroKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParameterKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cParameterAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cParameterParameterParserRuleCall_4_2_0 = (RuleCall)cParameterAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cParameterAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_4_3_1_0 = (RuleCall)cParameterAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cBodyKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cBodyAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cBodyBodyParserRuleCall_5_1_0 = (RuleCall)cBodyAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Macro returns Macro:
		//    'Macro'
		//    '{'
		//        'name' name=ID
		//        ('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
		//        ('body' body=Body)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Macro'
		//'{'
		//    'name' name=ID
		//    ('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
		//    ('body' body=Body)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Macro'
		public Keyword getMacroKeyword_0() { return cMacroKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'parameter'
		public Keyword getParameterKeyword_4_0() { return cParameterKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_4_2() { return cParameterAssignment_4_2; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_4_2_0() { return cParameterParameterParserRuleCall_4_2_0; }
		
		//( "," parameter+=Parameter)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//parameter+=Parameter
		public Assignment getParameterAssignment_4_3_1() { return cParameterAssignment_4_3_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_4_3_1_0() { return cParameterParameterParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//('body' body=Body)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'body'
		public Keyword getBodyKeyword_5_0() { return cBodyKeyword_5_0; }
		
		//body=Body
		public Assignment getBodyAssignment_5_1() { return cBodyAssignment_5_1; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_5_1_0() { return cBodyBodyParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParameterKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeParameterTypeParserRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cValueKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cValueAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cValueParameterValueParserRuleCall_6_1_0 = (RuleCall)cValueAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Parameter returns Parameter:
		//    {Parameter}
		//    'Parameter'
		//    name=ID
		//    '{'
		//        'type' type=ParameterType
		//        ('value' value=ParameterValue)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter}
		//'Parameter'
		//name=ID
		//'{'
		//    'type' type=ParameterType
		//    ('value' value=ParameterValue)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//'Parameter'
		public Keyword getParameterKeyword_1() { return cParameterKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3() { return cLeftCurlyBracketKeyword_3; }
		
		//'type'
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//type=ParameterType
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//ParameterType
		public RuleCall getTypeParameterTypeParserRuleCall_5_0() { return cTypeParameterTypeParserRuleCall_5_0; }
		
		//('value' value=ParameterValue)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'value'
		public Keyword getValueKeyword_6_0() { return cValueKeyword_6_0; }
		
		//value=ParameterValue
		public Assignment getValueAssignment_6_1() { return cValueAssignment_6_1; }
		
		//ParameterValue
		public RuleCall getValueParameterValueParserRuleCall_6_1_0() { return cValueParameterValueParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.ParameterValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueIDTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final RuleCall cPoseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLinkRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ParameterValue returns ParameterValue:
		//    value=ID | Pose | LinkRef
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ID | Pose | LinkRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=ID
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0_0() { return cValueIDTerminalRuleCall_0_0; }
		
		//Pose
		public RuleCall getPoseParserRuleCall_1() { return cPoseParserRuleCall_1; }
		
		//LinkRef
		public RuleCall getLinkRefParserRuleCall_2() { return cLinkRefParserRuleCall_2; }
	}
	public class LinkRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.LinkRef");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefLinkCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefLinkSTRINGTerminalRuleCall_0_1 = (RuleCall)cRefLinkCrossReference_0.eContents().get(1);
		
		//LinkRef returns LinkRef:
		//    ref=[Link|STRING]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Link|STRING]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[Link|STRING]
		public CrossReference getRefLinkCrossReference_0() { return cRefLinkCrossReference_0; }
		
		//STRING
		public RuleCall getRefLinkSTRINGTerminalRuleCall_0_1() { return cRefLinkSTRINGTerminalRuleCall_0_1; }
	}
	public class ParameterStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.ParameterString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefParameterCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefParameterSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cRefParameterCrossReference_1_0.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueIDTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ParameterString returns ParameterString:
		//    {ParameterString} ref=([Parameter|STRING])? (value=ID)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterString} ref=([Parameter|STRING])? (value=ID)?
		public Group getGroup() { return cGroup; }
		
		//{ParameterString}
		public Action getParameterStringAction_0() { return cParameterStringAction_0; }
		
		//ref=([Parameter|STRING])?
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//([Parameter|STRING])
		public CrossReference getRefParameterCrossReference_1_0() { return cRefParameterCrossReference_1_0; }
		
		//STRING
		public RuleCall getRefParameterSTRINGTerminalRuleCall_1_0_1() { return cRefParameterSTRINGTerminalRuleCall_1_0_1; }
		
		//(value=ID)?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_2_0() { return cValueIDTerminalRuleCall_2_0; }
	}
	public class ParameterPoseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.ParameterPose");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cRefParameterCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefParameterSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cRefParameterCrossReference_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValuePoseParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ParameterPose returns ParameterPose:
		//    ref=[Parameter|STRING] | value=Pose
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Parameter|STRING] | value=Pose
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ref=[Parameter|STRING]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[Parameter|STRING]
		public CrossReference getRefParameterCrossReference_0_0() { return cRefParameterCrossReference_0_0; }
		
		//STRING
		public RuleCall getRefParameterSTRINGTerminalRuleCall_0_0_1() { return cRefParameterSTRINGTerminalRuleCall_0_0_1; }
		
		//value=Pose
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Pose
		public RuleCall getValuePoseParserRuleCall_1_0() { return cValuePoseParserRuleCall_1_0; }
	}
	public class ParameterLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.ParameterLink");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParamAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cParamParameterCrossReference_0_0 = (CrossReference)cParamAssignment_0.eContents().get(0);
		private final RuleCall cParamParameterIDTerminalRuleCall_0_0_1 = (RuleCall)cParamParameterCrossReference_0_0.eContents().get(1);
		private final Assignment cLinkAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cLinkLinkCrossReference_1_0 = (CrossReference)cLinkAssignment_1.eContents().get(0);
		private final RuleCall cLinkLinkSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cLinkLinkCrossReference_1_0.eContents().get(1);
		
		//ParameterLink returns ParameterLink:
		//    param=[Parameter] | link=[Link|STRING]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//param=[Parameter] | link=[Link|STRING]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//param=[Parameter]
		public Assignment getParamAssignment_0() { return cParamAssignment_0; }
		
		//[Parameter]
		public CrossReference getParamParameterCrossReference_0_0() { return cParamParameterCrossReference_0_0; }
		
		//ID
		public RuleCall getParamParameterIDTerminalRuleCall_0_0_1() { return cParamParameterIDTerminalRuleCall_0_0_1; }
		
		//link=[Link|STRING]
		public Assignment getLinkAssignment_1() { return cLinkAssignment_1; }
		
		//[Link|STRING]
		public CrossReference getLinkLinkCrossReference_1_0() { return cLinkLinkCrossReference_1_0; }
		
		//STRING
		public RuleCall getLinkLinkSTRINGTerminalRuleCall_1_0_1() { return cLinkLinkSTRINGTerminalRuleCall_1_0_1; }
	}
	public class ParameterTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.ParameterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterStringTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterLinkRefTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParameterPoseTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ParameterType returns ParameterType:
		//    ParameterStringType | ParameterLinkRefType | ParameterPoseType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ParameterStringType | ParameterLinkRefType | ParameterPoseType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParameterStringType
		public RuleCall getParameterStringTypeParserRuleCall_0() { return cParameterStringTypeParserRuleCall_0; }
		
		//ParameterLinkRefType
		public RuleCall getParameterLinkRefTypeParserRuleCall_1() { return cParameterLinkRefTypeParserRuleCall_1; }
		
		//ParameterPoseType
		public RuleCall getParameterPoseTypeParserRuleCall_2() { return cParameterPoseTypeParserRuleCall_2; }
	}
	public class ParameterStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.ParameterStringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ParameterStringType returns ParameterStringType:
		//    {ParameterStringType}
		//    'String'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterStringType}
		//'String'
		public Group getGroup() { return cGroup; }
		
		//{ParameterStringType}
		public Action getParameterStringTypeAction_0() { return cParameterStringTypeAction_0; }
		
		//'String'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}
	public class ParameterLinkRefTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.ParameterLinkRefType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterLinkRefTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLinkRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ParameterLinkRefType returns ParameterLinkRefType:
		//    {ParameterLinkRefType}
		//    'LinkRef'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterLinkRefType}
		//'LinkRef'
		public Group getGroup() { return cGroup; }
		
		//{ParameterLinkRefType}
		public Action getParameterLinkRefTypeAction_0() { return cParameterLinkRefTypeAction_0; }
		
		//'LinkRef'
		public Keyword getLinkRefKeyword_1() { return cLinkRefKeyword_1; }
	}
	public class ParameterPoseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.ParameterPoseType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterPoseTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPoseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ParameterPoseType returns ParameterPoseType:
		//    {ParameterPoseType}
		//    'Pose'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterPoseType}
		//'Pose'
		public Group getGroup() { return cGroup; }
		
		//{ParameterPoseType}
		public Action getParameterPoseTypeAction_0() { return cParameterPoseTypeAction_0; }
		
		//'Pose'
		public Keyword getPoseKeyword_1() { return cPoseKeyword_1; }
	}
	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBodyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLinkKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cLinkAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final RuleCall cLinkLinkParserRuleCall_3_2_0 = (RuleCall)cLinkAssignment_3_2.eContents().get(0);
		private final Group cGroup_3_3 = (Group)cGroup_3.eContents().get(3);
		private final Keyword cCommaKeyword_3_3_0 = (Keyword)cGroup_3_3.eContents().get(0);
		private final Assignment cLinkAssignment_3_3_1 = (Assignment)cGroup_3_3.eContents().get(1);
		private final RuleCall cLinkLinkParserRuleCall_3_3_1_0 = (RuleCall)cLinkAssignment_3_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cJointKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cJointAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cJointJointParserRuleCall_4_2_0 = (RuleCall)cJointAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cJointAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cJointJointParserRuleCall_4_3_1_0 = (RuleCall)cJointAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Body returns Body:
		//    {Body}
		//    'Body'
		//    '{'
		//        ('link' '{' link+=Link ( "," link+=Link)* '}' )?
		//        ('joint' '{' joint+=Joint ( "," joint+=Joint)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Body}
		//'Body'
		//'{'
		//    ('link' '{' link+=Link ( "," link+=Link)* '}' )?
		//    ('joint' '{' joint+=Joint ( "," joint+=Joint)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Body}
		public Action getBodyAction_0() { return cBodyAction_0; }
		
		//'Body'
		public Keyword getBodyKeyword_1() { return cBodyKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('link' '{' link+=Link ( "," link+=Link)* '}' )?
		public Group getGroup_3() { return cGroup_3; }
		
		//'link'
		public Keyword getLinkKeyword_3_0() { return cLinkKeyword_3_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_3_1() { return cLeftCurlyBracketKeyword_3_1; }
		
		//link+=Link
		public Assignment getLinkAssignment_3_2() { return cLinkAssignment_3_2; }
		
		//Link
		public RuleCall getLinkLinkParserRuleCall_3_2_0() { return cLinkLinkParserRuleCall_3_2_0; }
		
		//( "," link+=Link)*
		public Group getGroup_3_3() { return cGroup_3_3; }
		
		//","
		public Keyword getCommaKeyword_3_3_0() { return cCommaKeyword_3_3_0; }
		
		//link+=Link
		public Assignment getLinkAssignment_3_3_1() { return cLinkAssignment_3_3_1; }
		
		//Link
		public RuleCall getLinkLinkParserRuleCall_3_3_1_0() { return cLinkLinkParserRuleCall_3_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3_4() { return cRightCurlyBracketKeyword_3_4; }
		
		//('joint' '{' joint+=Joint ( "," joint+=Joint)* '}' )?
		public Group getGroup_4() { return cGroup_4; }
		
		//'joint'
		public Keyword getJointKeyword_4_0() { return cJointKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//joint+=Joint
		public Assignment getJointAssignment_4_2() { return cJointAssignment_4_2; }
		
		//Joint
		public RuleCall getJointJointParserRuleCall_4_2_0() { return cJointJointParserRuleCall_4_2_0; }
		
		//( "," joint+=Joint)*
		public Group getGroup_4_3() { return cGroup_4_3; }
		
		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }
		
		//joint+=Joint
		public Assignment getJointAssignment_4_3_1() { return cJointAssignment_4_3_1; }
		
		//Joint
		public RuleCall getJointJointParserRuleCall_4_3_1_0() { return cJointJointParserRuleCall_4_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_4() { return cRightCurlyBracketKeyword_4_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MacroCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.MacroCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMacroCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMacroCallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cMacroKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cMacroAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cMacroMacroCrossReference_4_0 = (CrossReference)cMacroAssignment_4.eContents().get(0);
		private final RuleCall cMacroMacroSTRINGTerminalRuleCall_4_0_1 = (RuleCall)cMacroMacroCrossReference_4_0.eContents().get(1);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cParameterKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cParameterCallAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cParameterCallParameterCallParserRuleCall_5_2_0 = (RuleCall)cParameterCallAssignment_5_2.eContents().get(0);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cParameterCallAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final RuleCall cParameterCallParameterCallParserRuleCall_5_3_1_0 = (RuleCall)cParameterCallAssignment_5_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_4 = (Keyword)cGroup_5.eContents().get(4);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//MacroCall returns MacroCall:
		//    {MacroCall}
		//    'MacroCall'
		//    '{'
		//        'macro' macro=[Macro|STRING]
		//        ('parameter' '{' parameterCall+=ParameterCall ( "," parameterCall+=ParameterCall)* '}' )?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{MacroCall}
		//'MacroCall'
		//'{'
		//    'macro' macro=[Macro|STRING]
		//    ('parameter' '{' parameterCall+=ParameterCall ( "," parameterCall+=ParameterCall)* '}' )?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{MacroCall}
		public Action getMacroCallAction_0() { return cMacroCallAction_0; }
		
		//'MacroCall'
		public Keyword getMacroCallKeyword_1() { return cMacroCallKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'macro'
		public Keyword getMacroKeyword_3() { return cMacroKeyword_3; }
		
		//macro=[Macro|STRING]
		public Assignment getMacroAssignment_4() { return cMacroAssignment_4; }
		
		//[Macro|STRING]
		public CrossReference getMacroMacroCrossReference_4_0() { return cMacroMacroCrossReference_4_0; }
		
		//STRING
		public RuleCall getMacroMacroSTRINGTerminalRuleCall_4_0_1() { return cMacroMacroSTRINGTerminalRuleCall_4_0_1; }
		
		//('parameter' '{' parameterCall+=ParameterCall ( "," parameterCall+=ParameterCall)* '}' )?
		public Group getGroup_5() { return cGroup_5; }
		
		//'parameter'
		public Keyword getParameterKeyword_5_0() { return cParameterKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//parameterCall+=ParameterCall
		public Assignment getParameterCallAssignment_5_2() { return cParameterCallAssignment_5_2; }
		
		//ParameterCall
		public RuleCall getParameterCallParameterCallParserRuleCall_5_2_0() { return cParameterCallParameterCallParserRuleCall_5_2_0; }
		
		//( "," parameterCall+=ParameterCall)*
		public Group getGroup_5_3() { return cGroup_5_3; }
		
		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }
		
		//parameterCall+=ParameterCall
		public Assignment getParameterCallAssignment_5_3_1() { return cParameterCallAssignment_5_3_1; }
		
		//ParameterCall
		public RuleCall getParameterCallParameterCallParserRuleCall_5_3_1_0() { return cParameterCallParameterCallParserRuleCall_5_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_4() { return cRightCurlyBracketKeyword_5_4; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class ParameterCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.ParameterCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cParameterCallKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cParameterKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cParameterAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cParameterParameterCrossReference_4_0 = (CrossReference)cParameterAssignment_4.eContents().get(0);
		private final RuleCall cParameterParameterSTRINGTerminalRuleCall_4_0_1 = (RuleCall)cParameterParameterCrossReference_4_0.eContents().get(1);
		private final Keyword cValueKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValueParameterValueParserRuleCall_6_0 = (RuleCall)cValueAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ParameterCall returns ParameterCall:
		//    {ParameterCall}
		//    'ParameterCall'
		//    '{'
		//        'parameter' parameter=[Parameter|STRING]
		//        'value' value=ParameterValue
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterCall}
		//'ParameterCall'
		//'{'
		//    'parameter' parameter=[Parameter|STRING]
		//    'value' value=ParameterValue
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{ParameterCall}
		public Action getParameterCallAction_0() { return cParameterCallAction_0; }
		
		//'ParameterCall'
		public Keyword getParameterCallKeyword_1() { return cParameterCallKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'parameter'
		public Keyword getParameterKeyword_3() { return cParameterKeyword_3; }
		
		//parameter=[Parameter|STRING]
		public Assignment getParameterAssignment_4() { return cParameterAssignment_4; }
		
		//[Parameter|STRING]
		public CrossReference getParameterParameterCrossReference_4_0() { return cParameterParameterCrossReference_4_0; }
		
		//STRING
		public RuleCall getParameterParameterSTRINGTerminalRuleCall_4_0_1() { return cParameterParameterSTRINGTerminalRuleCall_4_0_1; }
		
		//'value'
		public Keyword getValueKeyword_5() { return cValueKeyword_5; }
		
		//value=ParameterValue
		public Assignment getValueAssignment_6() { return cValueAssignment_6; }
		
		//ParameterValue
		public RuleCall getValueParameterValueParserRuleCall_6_0() { return cValueParameterValueParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class JointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Joint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cJointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameParameterStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeJOINTTYPETerminalRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Keyword cParentKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cParentAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cParentParameterLinkParserRuleCall_7_0 = (RuleCall)cParentAssignment_7.eContents().get(0);
		private final Keyword cChildKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cChildAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cChildParameterLinkParserRuleCall_9_0 = (RuleCall)cChildAssignment_9.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cOriginKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cOriginAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cOriginParameterPoseParserRuleCall_10_1_0 = (RuleCall)cOriginAssignment_10_1.eContents().get(0);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cAxisKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cAxisAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final RuleCall cAxisVector3ParserRuleCall_11_1_0 = (RuleCall)cAxisAssignment_11_1.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cLimitKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cLimitAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cLimitLimitParserRuleCall_12_1_0 = (RuleCall)cLimitAssignment_12_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Joint returns Joint:
		//    'Joint'
		//    '{'
		//        'name' name=ParameterString
		//        'type' type=JOINTTYPE
		//        'parent' parent=ParameterLink
		//        'child' child=ParameterLink
		//        ('origin' origin=ParameterPose)?
		//        ('axis' axis=Vector3)?
		//        ('limit' limit=Limit)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Joint'
		//'{'
		//    'name' name=ParameterString
		//    'type' type=JOINTTYPE
		//    'parent' parent=ParameterLink
		//    'child' child=ParameterLink
		//    ('origin' origin=ParameterPose)?
		//    ('axis' axis=Vector3)?
		//    ('limit' limit=Limit)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Joint'
		public Keyword getJointKeyword_0() { return cJointKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=ParameterString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ParameterString
		public RuleCall getNameParameterStringParserRuleCall_3_0() { return cNameParameterStringParserRuleCall_3_0; }
		
		//'type'
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//type=JOINTTYPE
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//JOINTTYPE
		public RuleCall getTypeJOINTTYPETerminalRuleCall_5_0() { return cTypeJOINTTYPETerminalRuleCall_5_0; }
		
		//'parent'
		public Keyword getParentKeyword_6() { return cParentKeyword_6; }
		
		//parent=ParameterLink
		public Assignment getParentAssignment_7() { return cParentAssignment_7; }
		
		//ParameterLink
		public RuleCall getParentParameterLinkParserRuleCall_7_0() { return cParentParameterLinkParserRuleCall_7_0; }
		
		//'child'
		public Keyword getChildKeyword_8() { return cChildKeyword_8; }
		
		//child=ParameterLink
		public Assignment getChildAssignment_9() { return cChildAssignment_9; }
		
		//ParameterLink
		public RuleCall getChildParameterLinkParserRuleCall_9_0() { return cChildParameterLinkParserRuleCall_9_0; }
		
		//('origin' origin=ParameterPose)?
		public Group getGroup_10() { return cGroup_10; }
		
		//'origin'
		public Keyword getOriginKeyword_10_0() { return cOriginKeyword_10_0; }
		
		//origin=ParameterPose
		public Assignment getOriginAssignment_10_1() { return cOriginAssignment_10_1; }
		
		//ParameterPose
		public RuleCall getOriginParameterPoseParserRuleCall_10_1_0() { return cOriginParameterPoseParserRuleCall_10_1_0; }
		
		//('axis' axis=Vector3)?
		public Group getGroup_11() { return cGroup_11; }
		
		//'axis'
		public Keyword getAxisKeyword_11_0() { return cAxisKeyword_11_0; }
		
		//axis=Vector3
		public Assignment getAxisAssignment_11_1() { return cAxisAssignment_11_1; }
		
		//Vector3
		public RuleCall getAxisVector3ParserRuleCall_11_1_0() { return cAxisVector3ParserRuleCall_11_1_0; }
		
		//('limit' limit=Limit)?
		public Group getGroup_12() { return cGroup_12; }
		
		//'limit'
		public Keyword getLimitKeyword_12_0() { return cLimitKeyword_12_0; }
		
		//limit=Limit
		public Assignment getLimitAssignment_12_1() { return cLimitAssignment_12_1; }
		
		//Limit
		public RuleCall getLimitLimitParserRuleCall_12_1_0() { return cLimitLimitParserRuleCall_12_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_13() { return cRightCurlyBracketKeyword_13; }
	}
	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cNameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameParameterStringParserRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInertialKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInertialAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInertialInertialParserRuleCall_4_1_0 = (RuleCall)cInertialAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVisualKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVisualAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVisualVisualParserRuleCall_5_1_0 = (RuleCall)cVisualAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cCollisionKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cCollisionAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cCollisionCollisionParserRuleCall_6_1_0 = (RuleCall)cCollisionAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Link returns Link:
		//    'Link'
		//    '{'
		//        'name' name=ParameterString
		//        ('inertial' inertial=Inertial)?
		//        ('visual' visual=Visual)?
		//        ('collision' collision=Collision)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Link'
		//'{'
		//    'name' name=ParameterString
		//    ('inertial' inertial=Inertial)?
		//    ('visual' visual=Visual)?
		//    ('collision' collision=Collision)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Link'
		public Keyword getLinkKeyword_0() { return cLinkKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'name'
		public Keyword getNameKeyword_2() { return cNameKeyword_2; }
		
		//name=ParameterString
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ParameterString
		public RuleCall getNameParameterStringParserRuleCall_3_0() { return cNameParameterStringParserRuleCall_3_0; }
		
		//('inertial' inertial=Inertial)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'inertial'
		public Keyword getInertialKeyword_4_0() { return cInertialKeyword_4_0; }
		
		//inertial=Inertial
		public Assignment getInertialAssignment_4_1() { return cInertialAssignment_4_1; }
		
		//Inertial
		public RuleCall getInertialInertialParserRuleCall_4_1_0() { return cInertialInertialParserRuleCall_4_1_0; }
		
		//('visual' visual=Visual)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'visual'
		public Keyword getVisualKeyword_5_0() { return cVisualKeyword_5_0; }
		
		//visual=Visual
		public Assignment getVisualAssignment_5_1() { return cVisualAssignment_5_1; }
		
		//Visual
		public RuleCall getVisualVisualParserRuleCall_5_1_0() { return cVisualVisualParserRuleCall_5_1_0; }
		
		//('collision' collision=Collision)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'collision'
		public Keyword getCollisionKeyword_6_0() { return cCollisionKeyword_6_0; }
		
		//collision=Collision
		public Assignment getCollisionAssignment_6_1() { return cCollisionAssignment_6_1; }
		
		//Collision
		public RuleCall getCollisionCollisionParserRuleCall_6_1_0() { return cCollisionCollisionParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class PoseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Pose");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPoseAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPoseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cRpyKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cRpyAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cRpySTRINGTerminalRuleCall_3_1_0 = (RuleCall)cRpyAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cXyzKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cXyzAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cXyzSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cXyzAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Pose returns Pose:
		//    {Pose}
		//    'Pose'
		//    '{'
		//        ('rpy' rpy=STRING)?
		//        ('xyz' xyz=STRING)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Pose}
		//'Pose'
		//'{'
		//    ('rpy' rpy=STRING)?
		//    ('xyz' xyz=STRING)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Pose}
		public Action getPoseAction_0() { return cPoseAction_0; }
		
		//'Pose'
		public Keyword getPoseKeyword_1() { return cPoseKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('rpy' rpy=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'rpy'
		public Keyword getRpyKeyword_3_0() { return cRpyKeyword_3_0; }
		
		//rpy=STRING
		public Assignment getRpyAssignment_3_1() { return cRpyAssignment_3_1; }
		
		//STRING
		public RuleCall getRpySTRINGTerminalRuleCall_3_1_0() { return cRpySTRINGTerminalRuleCall_3_1_0; }
		
		//('xyz' xyz=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'xyz'
		public Keyword getXyzKeyword_4_0() { return cXyzKeyword_4_0; }
		
		//xyz=STRING
		public Assignment getXyzAssignment_4_1() { return cXyzAssignment_4_1; }
		
		//STRING
		public RuleCall getXyzSTRINGTerminalRuleCall_4_1_0() { return cXyzSTRINGTerminalRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class Vector3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Vector3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVector3Action_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cVector3Keyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cXyzKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cXyzAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cXyzSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cXyzAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Vector3 returns Vector3:
		//    {Vector3}
		//    'Vector3'
		//    '{'
		//        ('xyz' xyz=STRING)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Vector3}
		//'Vector3'
		//'{'
		//    ('xyz' xyz=STRING)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Vector3}
		public Action getVector3Action_0() { return cVector3Action_0; }
		
		//'Vector3'
		public Keyword getVector3Keyword_1() { return cVector3Keyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('xyz' xyz=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'xyz'
		public Keyword getXyzKeyword_3_0() { return cXyzKeyword_3_0; }
		
		//xyz=STRING
		public Assignment getXyzAssignment_3_1() { return cXyzAssignment_3_1; }
		
		//STRING
		public RuleCall getXyzSTRINGTerminalRuleCall_3_1_0() { return cXyzSTRINGTerminalRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class LimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Limit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLimitAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLimitKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cEffortKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cEffortAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cEffortSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cEffortAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLowerKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cLowerAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cLowerSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cLowerAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cUpperKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cUpperAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cUpperSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cUpperAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cVelocityKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cVelocityAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cVelocitySTRINGTerminalRuleCall_6_1_0 = (RuleCall)cVelocityAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Limit returns Limit:
		//    {Limit}
		//    'Limit'
		//    '{'
		//        ('effort' effort=STRING)?
		//        ('lower' lower=STRING)?
		//        ('upper' upper=STRING)?
		//        ('velocity' velocity=STRING)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Limit}
		//'Limit'
		//'{'
		//    ('effort' effort=STRING)?
		//    ('lower' lower=STRING)?
		//    ('upper' upper=STRING)?
		//    ('velocity' velocity=STRING)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Limit}
		public Action getLimitAction_0() { return cLimitAction_0; }
		
		//'Limit'
		public Keyword getLimitKeyword_1() { return cLimitKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('effort' effort=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'effort'
		public Keyword getEffortKeyword_3_0() { return cEffortKeyword_3_0; }
		
		//effort=STRING
		public Assignment getEffortAssignment_3_1() { return cEffortAssignment_3_1; }
		
		//STRING
		public RuleCall getEffortSTRINGTerminalRuleCall_3_1_0() { return cEffortSTRINGTerminalRuleCall_3_1_0; }
		
		//('lower' lower=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'lower'
		public Keyword getLowerKeyword_4_0() { return cLowerKeyword_4_0; }
		
		//lower=STRING
		public Assignment getLowerAssignment_4_1() { return cLowerAssignment_4_1; }
		
		//STRING
		public RuleCall getLowerSTRINGTerminalRuleCall_4_1_0() { return cLowerSTRINGTerminalRuleCall_4_1_0; }
		
		//('upper' upper=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'upper'
		public Keyword getUpperKeyword_5_0() { return cUpperKeyword_5_0; }
		
		//upper=STRING
		public Assignment getUpperAssignment_5_1() { return cUpperAssignment_5_1; }
		
		//STRING
		public RuleCall getUpperSTRINGTerminalRuleCall_5_1_0() { return cUpperSTRINGTerminalRuleCall_5_1_0; }
		
		//('velocity' velocity=STRING)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'velocity'
		public Keyword getVelocityKeyword_6_0() { return cVelocityKeyword_6_0; }
		
		//velocity=STRING
		public Assignment getVelocityAssignment_6_1() { return cVelocityAssignment_6_1; }
		
		//STRING
		public RuleCall getVelocitySTRINGTerminalRuleCall_6_1_0() { return cVelocitySTRINGTerminalRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class InertialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Inertial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInertialAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInertialKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cOriginKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cOriginAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cOriginPoseParserRuleCall_3_1_0 = (RuleCall)cOriginAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cMassKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cMassAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cMassMassParserRuleCall_4_1_0 = (RuleCall)cMassAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInertiaKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cInertiaAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cInertiaInertiaParserRuleCall_5_1_0 = (RuleCall)cInertiaAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Inertial returns Inertial:
		//    {Inertial}
		//    'Inertial'
		//    '{'
		//        ('origin' origin=Pose)?
		//        ('mass' mass=Mass)?
		//        ('inertia' inertia=Inertia)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Inertial}
		//'Inertial'
		//'{'
		//    ('origin' origin=Pose)?
		//    ('mass' mass=Mass)?
		//    ('inertia' inertia=Inertia)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Inertial}
		public Action getInertialAction_0() { return cInertialAction_0; }
		
		//'Inertial'
		public Keyword getInertialKeyword_1() { return cInertialKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('origin' origin=Pose)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'origin'
		public Keyword getOriginKeyword_3_0() { return cOriginKeyword_3_0; }
		
		//origin=Pose
		public Assignment getOriginAssignment_3_1() { return cOriginAssignment_3_1; }
		
		//Pose
		public RuleCall getOriginPoseParserRuleCall_3_1_0() { return cOriginPoseParserRuleCall_3_1_0; }
		
		//('mass' mass=Mass)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'mass'
		public Keyword getMassKeyword_4_0() { return cMassKeyword_4_0; }
		
		//mass=Mass
		public Assignment getMassAssignment_4_1() { return cMassAssignment_4_1; }
		
		//Mass
		public RuleCall getMassMassParserRuleCall_4_1_0() { return cMassMassParserRuleCall_4_1_0; }
		
		//('inertia' inertia=Inertia)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'inertia'
		public Keyword getInertiaKeyword_5_0() { return cInertiaKeyword_5_0; }
		
		//inertia=Inertia
		public Assignment getInertiaAssignment_5_1() { return cInertiaAssignment_5_1; }
		
		//Inertia
		public RuleCall getInertiaInertiaParserRuleCall_5_1_0() { return cInertiaInertiaParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class VisualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Visual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVisualKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOriginKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOriginAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOriginPoseParserRuleCall_2_1_0 = (RuleCall)cOriginAssignment_2_1.eContents().get(0);
		private final Keyword cGeometryKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGeometryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGeometryGeometryParserRuleCall_4_0 = (RuleCall)cGeometryAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Visual returns Visual:
		//    'Visual'
		//    '{'
		//        ('origin' origin=Pose)?
		//        'geometry' geometry=Geometry
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Visual'
		//'{'
		//    ('origin' origin=Pose)?
		//    'geometry' geometry=Geometry
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Visual'
		public Keyword getVisualKeyword_0() { return cVisualKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('origin' origin=Pose)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'origin'
		public Keyword getOriginKeyword_2_0() { return cOriginKeyword_2_0; }
		
		//origin=Pose
		public Assignment getOriginAssignment_2_1() { return cOriginAssignment_2_1; }
		
		//Pose
		public RuleCall getOriginPoseParserRuleCall_2_1_0() { return cOriginPoseParserRuleCall_2_1_0; }
		
		//'geometry'
		public Keyword getGeometryKeyword_3() { return cGeometryKeyword_3; }
		
		//geometry=Geometry
		public Assignment getGeometryAssignment_4() { return cGeometryAssignment_4; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_4_0() { return cGeometryGeometryParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class CollisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Collision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCollisionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOriginKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOriginAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOriginPoseParserRuleCall_2_1_0 = (RuleCall)cOriginAssignment_2_1.eContents().get(0);
		private final Keyword cGeometryKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cGeometryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cGeometryGeometryParserRuleCall_4_0 = (RuleCall)cGeometryAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Collision returns Collision:
		//    'Collision'
		//    '{'
		//        ('origin' origin=Pose)?
		//        'geometry' geometry=Geometry
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Collision'
		//'{'
		//    ('origin' origin=Pose)?
		//    'geometry' geometry=Geometry
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Collision'
		public Keyword getCollisionKeyword_0() { return cCollisionKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//('origin' origin=Pose)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'origin'
		public Keyword getOriginKeyword_2_0() { return cOriginKeyword_2_0; }
		
		//origin=Pose
		public Assignment getOriginAssignment_2_1() { return cOriginAssignment_2_1; }
		
		//Pose
		public RuleCall getOriginPoseParserRuleCall_2_1_0() { return cOriginPoseParserRuleCall_2_1_0; }
		
		//'geometry'
		public Keyword getGeometryKeyword_3() { return cGeometryKeyword_3; }
		
		//geometry=Geometry
		public Assignment getGeometryAssignment_4() { return cGeometryAssignment_4; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_4_0() { return cGeometryGeometryParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class MassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Mass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMassAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cMassKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cValueKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cValueAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cValueDouble0ParserRuleCall_3_1_0 = (RuleCall)cValueAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Mass returns Mass:
		//    {Mass}
		//    'Mass'
		//    '{'
		//        ('value' value=Double0)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Mass}
		//'Mass'
		//'{'
		//    ('value' value=Double0)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Mass}
		public Action getMassAction_0() { return cMassAction_0; }
		
		//'Mass'
		public Keyword getMassKeyword_1() { return cMassKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('value' value=Double0)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'value'
		public Keyword getValueKeyword_3_0() { return cValueKeyword_3_0; }
		
		//value=Double0
		public Assignment getValueAssignment_3_1() { return cValueAssignment_3_1; }
		
		//Double0
		public RuleCall getValueDouble0ParserRuleCall_3_1_0() { return cValueDouble0ParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class InertiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Inertia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInertiaAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cInertiaKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIxxKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIxxAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIxxDouble0ParserRuleCall_3_1_0 = (RuleCall)cIxxAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIxyKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIxyAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIxyDouble0ParserRuleCall_4_1_0 = (RuleCall)cIxyAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cIxzKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cIxzAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cIxzDouble0ParserRuleCall_5_1_0 = (RuleCall)cIxzAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cIyyKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cIyyAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cIyyDouble0ParserRuleCall_6_1_0 = (RuleCall)cIyyAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cIyzKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cIyzAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cIyzDouble0ParserRuleCall_7_1_0 = (RuleCall)cIyzAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cIzzKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cIzzAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cIzzDouble0ParserRuleCall_8_1_0 = (RuleCall)cIzzAssignment_8_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Inertia returns Inertia:
		//    {Inertia}
		//    'Inertia'
		//    '{'
		//        ('ixx' ixx=Double0)?
		//        ('ixy' ixy=Double0)?
		//        ('ixz' ixz=Double0)?
		//        ('iyy' iyy=Double0)?
		//        ('iyz' iyz=Double0)?
		//        ('izz' izz=Double0)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Inertia}
		//'Inertia'
		//'{'
		//    ('ixx' ixx=Double0)?
		//    ('ixy' ixy=Double0)?
		//    ('ixz' ixz=Double0)?
		//    ('iyy' iyy=Double0)?
		//    ('iyz' iyz=Double0)?
		//    ('izz' izz=Double0)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Inertia}
		public Action getInertiaAction_0() { return cInertiaAction_0; }
		
		//'Inertia'
		public Keyword getInertiaKeyword_1() { return cInertiaKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('ixx' ixx=Double0)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'ixx'
		public Keyword getIxxKeyword_3_0() { return cIxxKeyword_3_0; }
		
		//ixx=Double0
		public Assignment getIxxAssignment_3_1() { return cIxxAssignment_3_1; }
		
		//Double0
		public RuleCall getIxxDouble0ParserRuleCall_3_1_0() { return cIxxDouble0ParserRuleCall_3_1_0; }
		
		//('ixy' ixy=Double0)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'ixy'
		public Keyword getIxyKeyword_4_0() { return cIxyKeyword_4_0; }
		
		//ixy=Double0
		public Assignment getIxyAssignment_4_1() { return cIxyAssignment_4_1; }
		
		//Double0
		public RuleCall getIxyDouble0ParserRuleCall_4_1_0() { return cIxyDouble0ParserRuleCall_4_1_0; }
		
		//('ixz' ixz=Double0)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'ixz'
		public Keyword getIxzKeyword_5_0() { return cIxzKeyword_5_0; }
		
		//ixz=Double0
		public Assignment getIxzAssignment_5_1() { return cIxzAssignment_5_1; }
		
		//Double0
		public RuleCall getIxzDouble0ParserRuleCall_5_1_0() { return cIxzDouble0ParserRuleCall_5_1_0; }
		
		//('iyy' iyy=Double0)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'iyy'
		public Keyword getIyyKeyword_6_0() { return cIyyKeyword_6_0; }
		
		//iyy=Double0
		public Assignment getIyyAssignment_6_1() { return cIyyAssignment_6_1; }
		
		//Double0
		public RuleCall getIyyDouble0ParserRuleCall_6_1_0() { return cIyyDouble0ParserRuleCall_6_1_0; }
		
		//('iyz' iyz=Double0)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'iyz'
		public Keyword getIyzKeyword_7_0() { return cIyzKeyword_7_0; }
		
		//iyz=Double0
		public Assignment getIyzAssignment_7_1() { return cIyzAssignment_7_1; }
		
		//Double0
		public RuleCall getIyzDouble0ParserRuleCall_7_1_0() { return cIyzDouble0ParserRuleCall_7_1_0; }
		
		//('izz' izz=Double0)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'izz'
		public Keyword getIzzKeyword_8_0() { return cIzzKeyword_8_0; }
		
		//izz=Double0
		public Assignment getIzzAssignment_8_1() { return cIzzAssignment_8_1; }
		
		//Double0
		public RuleCall getIzzDouble0ParserRuleCall_8_1_0() { return cIzzDouble0ParserRuleCall_8_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class GeometryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Geometry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGeometryAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cGeometryKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cBoxKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cBoxAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cBoxBoxParserRuleCall_3_1_0 = (RuleCall)cBoxAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cCylinderKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cCylinderAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cCylinderCylinderParserRuleCall_4_1_0 = (RuleCall)cCylinderAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cSphereKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cSphereAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cSphereSphereParserRuleCall_5_1_0 = (RuleCall)cSphereAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cMeshKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cMeshAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMeshMeshParserRuleCall_6_1_0 = (RuleCall)cMeshAssignment_6_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Geometry returns Geometry:
		//    {Geometry}
		//    'Geometry'
		//    '{'
		//        ('box' box=Box)?
		//        ('cylinder' cylinder=Cylinder)?
		//        ('sphere' sphere=Sphere)?
		//        ('mesh' mesh=Mesh)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Geometry}
		//'Geometry'
		//'{'
		//    ('box' box=Box)?
		//    ('cylinder' cylinder=Cylinder)?
		//    ('sphere' sphere=Sphere)?
		//    ('mesh' mesh=Mesh)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Geometry}
		public Action getGeometryAction_0() { return cGeometryAction_0; }
		
		//'Geometry'
		public Keyword getGeometryKeyword_1() { return cGeometryKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('box' box=Box)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'box'
		public Keyword getBoxKeyword_3_0() { return cBoxKeyword_3_0; }
		
		//box=Box
		public Assignment getBoxAssignment_3_1() { return cBoxAssignment_3_1; }
		
		//Box
		public RuleCall getBoxBoxParserRuleCall_3_1_0() { return cBoxBoxParserRuleCall_3_1_0; }
		
		//('cylinder' cylinder=Cylinder)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'cylinder'
		public Keyword getCylinderKeyword_4_0() { return cCylinderKeyword_4_0; }
		
		//cylinder=Cylinder
		public Assignment getCylinderAssignment_4_1() { return cCylinderAssignment_4_1; }
		
		//Cylinder
		public RuleCall getCylinderCylinderParserRuleCall_4_1_0() { return cCylinderCylinderParserRuleCall_4_1_0; }
		
		//('sphere' sphere=Sphere)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'sphere'
		public Keyword getSphereKeyword_5_0() { return cSphereKeyword_5_0; }
		
		//sphere=Sphere
		public Assignment getSphereAssignment_5_1() { return cSphereAssignment_5_1; }
		
		//Sphere
		public RuleCall getSphereSphereParserRuleCall_5_1_0() { return cSphereSphereParserRuleCall_5_1_0; }
		
		//('mesh' mesh=Mesh)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'mesh'
		public Keyword getMeshKeyword_6_0() { return cMeshKeyword_6_0; }
		
		//mesh=Mesh
		public Assignment getMeshAssignment_6_1() { return cMeshAssignment_6_1; }
		
		//Mesh
		public RuleCall getMeshMeshParserRuleCall_6_1_0() { return cMeshMeshParserRuleCall_6_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class BoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Box");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoxAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cBoxKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cSizeKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cSizeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cSizeParameterStringParserRuleCall_3_1_0 = (RuleCall)cSizeAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Box returns Box:
		//    {Box}
		//    'Box'
		//    '{'
		//        ('size' size=ParameterString)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{Box}
		//'Box'
		//'{'
		//    ('size' size=ParameterString)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//{Box}
		public Action getBoxAction_0() { return cBoxAction_0; }
		
		//'Box'
		public Keyword getBoxKeyword_1() { return cBoxKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//('size' size=ParameterString)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'size'
		public Keyword getSizeKeyword_3_0() { return cSizeKeyword_3_0; }
		
		//size=ParameterString
		public Assignment getSizeAssignment_3_1() { return cSizeAssignment_3_1; }
		
		//ParameterString
		public RuleCall getSizeParameterStringParserRuleCall_3_1_0() { return cSizeParameterStringParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class CylinderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Cylinder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCylinderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLengthKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLengthAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLengthDouble0ParserRuleCall_3_0 = (RuleCall)cLengthAssignment_3.eContents().get(0);
		private final Keyword cRadiusKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cRadiusAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cRadiusDouble0ParserRuleCall_5_0 = (RuleCall)cRadiusAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Cylinder returns Cylinder:
		//    'Cylinder'
		//    '{'
		//        'length' length=Double0
		//        'radius' radius=Double0
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Cylinder'
		//'{'
		//    'length' length=Double0
		//    'radius' radius=Double0
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Cylinder'
		public Keyword getCylinderKeyword_0() { return cCylinderKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'length'
		public Keyword getLengthKeyword_2() { return cLengthKeyword_2; }
		
		//length=Double0
		public Assignment getLengthAssignment_3() { return cLengthAssignment_3; }
		
		//Double0
		public RuleCall getLengthDouble0ParserRuleCall_3_0() { return cLengthDouble0ParserRuleCall_3_0; }
		
		//'radius'
		public Keyword getRadiusKeyword_4() { return cRadiusKeyword_4; }
		
		//radius=Double0
		public Assignment getRadiusAssignment_5() { return cRadiusAssignment_5; }
		
		//Double0
		public RuleCall getRadiusDouble0ParserRuleCall_5_0() { return cRadiusDouble0ParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class SphereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Sphere");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSphereKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cRadiusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRadiusAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cRadiusDouble0ParserRuleCall_3_0 = (RuleCall)cRadiusAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Sphere returns Sphere:
		//    'Sphere'
		//    '{'
		//        'radius' radius=Double0
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Sphere'
		//'{'
		//    'radius' radius=Double0
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Sphere'
		public Keyword getSphereKeyword_0() { return cSphereKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'radius'
		public Keyword getRadiusKeyword_2() { return cRadiusKeyword_2; }
		
		//radius=Double0
		public Assignment getRadiusAssignment_3() { return cRadiusAssignment_3; }
		
		//Double0
		public RuleCall getRadiusDouble0ParserRuleCall_3_0() { return cRadiusDouble0ParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class MeshElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Mesh");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMeshKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cFilenameKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cFilenameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_3_0 = (RuleCall)cFilenameAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cScaleKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cScaleAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cScaleDouble0ParserRuleCall_4_1_0 = (RuleCall)cScaleAssignment_4_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Mesh returns Mesh:
		//    'Mesh'
		//    '{'
		//        'filename' filename=STRING
		//        ('scale' scale=Double0)?
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Mesh'
		//'{'
		//    'filename' filename=STRING
		//    ('scale' scale=Double0)?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Mesh'
		public Keyword getMeshKeyword_0() { return cMeshKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'filename'
		public Keyword getFilenameKeyword_2() { return cFilenameKeyword_2; }
		
		//filename=STRING
		public Assignment getFilenameAssignment_3() { return cFilenameAssignment_3; }
		
		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_3_0() { return cFilenameSTRINGTerminalRuleCall_3_0; }
		
		//('scale' scale=Double0)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'scale'
		public Keyword getScaleKeyword_4_0() { return cScaleKeyword_4_0; }
		
		//scale=Double0
		public Assignment getScaleAssignment_4_1() { return cScaleAssignment_4_1; }
		
		//Double0
		public RuleCall getScaleDouble0ParserRuleCall_4_1_0() { return cScaleDouble0ParserRuleCall_4_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class AnyURIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.AnyURI");
		private final Keyword cAnyURIKeyword = (Keyword)rule.eContents().get(1);
		
		//AnyURI returns type::AnyURI:
		//    'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;
		@Override public ParserRule getRule() { return rule; }
		
		//'AnyURI'
		public Keyword getAnyURIKeyword() { return cAnyURIKeyword; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.EString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class Double0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Double0");
		private final RuleCall cDOUBLETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Double0 returns type::Double:
		//    DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall() { return cDOUBLETerminalRuleCall; }
	}
	public class Integer0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Integer0");
		private final RuleCall cDECINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Integer0 returns type::Int:
		//    DECINT;
		@Override public ParserRule getRule() { return rule; }
		
		//DECINT
		public RuleCall getDECINTTerminalRuleCall() { return cDECINTTerminalRuleCall; }
	}
	
	
	private final RobotElements pRobot;
	private final MacroElements pMacro;
	private final ParameterElements pParameter;
	private final ParameterValueElements pParameterValue;
	private final LinkRefElements pLinkRef;
	private final ParameterStringElements pParameterString;
	private final ParameterPoseElements pParameterPose;
	private final ParameterLinkElements pParameterLink;
	private final ParameterTypeElements pParameterType;
	private final ParameterStringTypeElements pParameterStringType;
	private final ParameterLinkRefTypeElements pParameterLinkRefType;
	private final ParameterPoseTypeElements pParameterPoseType;
	private final BodyElements pBody;
	private final MacroCallElements pMacroCall;
	private final ParameterCallElements pParameterCall;
	private final JointElements pJoint;
	private final LinkElements pLink;
	private final PoseElements pPose;
	private final Vector3Elements pVector3;
	private final LimitElements pLimit;
	private final InertialElements pInertial;
	private final VisualElements pVisual;
	private final CollisionElements pCollision;
	private final MassElements pMass;
	private final InertiaElements pInertia;
	private final GeometryElements pGeometry;
	private final BoxElements pBox;
	private final CylinderElements pCylinder;
	private final SphereElements pSphere;
	private final MeshElements pMesh;
	private final AnyURIElements pAnyURI;
	private final EStringElements pEString;
	private final TerminalRule tDIGIT;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tDECINT;
	private final TerminalRule tJOINTTYPE;
	private final Double0Elements pDouble0;
	private final Integer0Elements pInteger0;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KinematicsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobot = new RobotElements();
		this.pMacro = new MacroElements();
		this.pParameter = new ParameterElements();
		this.pParameterValue = new ParameterValueElements();
		this.pLinkRef = new LinkRefElements();
		this.pParameterString = new ParameterStringElements();
		this.pParameterPose = new ParameterPoseElements();
		this.pParameterLink = new ParameterLinkElements();
		this.pParameterType = new ParameterTypeElements();
		this.pParameterStringType = new ParameterStringTypeElements();
		this.pParameterLinkRefType = new ParameterLinkRefTypeElements();
		this.pParameterPoseType = new ParameterPoseTypeElements();
		this.pBody = new BodyElements();
		this.pMacroCall = new MacroCallElements();
		this.pParameterCall = new ParameterCallElements();
		this.pJoint = new JointElements();
		this.pLink = new LinkElements();
		this.pPose = new PoseElements();
		this.pVector3 = new Vector3Elements();
		this.pLimit = new LimitElements();
		this.pInertial = new InertialElements();
		this.pVisual = new VisualElements();
		this.pCollision = new CollisionElements();
		this.pMass = new MassElements();
		this.pInertia = new InertiaElements();
		this.pGeometry = new GeometryElements();
		this.pBox = new BoxElements();
		this.pCylinder = new CylinderElements();
		this.pSphere = new SphereElements();
		this.pMesh = new MeshElements();
		this.pAnyURI = new AnyURIElements();
		this.pEString = new EStringElements();
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.DIGIT");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.BOOLEAN");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.DOUBLE");
		this.tDECINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.DECINT");
		this.tJOINTTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.JOINTTYPE");
		this.pDouble0 = new Double0Elements();
		this.pInteger0 = new Integer0Elements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.fraunhofer.ipa.kinematics.Kinematics".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Robot returns Robot:
	//    {Robot}
	//    'Robot'
	//    '{'
	//        'name' name=ID
	//        ('version' version=STRING)?
	//        ('macro' '{' macro+=Macro ( "," macro+=Macro)* '}' )?
	//        ('macroCall' '{' macroCall+=MacroCall ( "," macroCall+=MacroCall)* '}' )?
	//        ('body' body=Body)?
	//    '}';
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//Macro returns Macro:
	//    'Macro'
	//    '{'
	//        'name' name=ID
	//        ('parameter' '{' parameter+=Parameter ( "," parameter+=Parameter)* '}' )?
	//        ('body' body=Body)?
	//    '}';
	public MacroElements getMacroAccess() {
		return pMacro;
	}
	
	public ParserRule getMacroRule() {
		return getMacroAccess().getRule();
	}
	
	//Parameter returns Parameter:
	//    {Parameter}
	//    'Parameter'
	//    name=ID
	//    '{'
	//        'type' type=ParameterType
	//        ('value' value=ParameterValue)?
	//    '}';
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//ParameterValue returns ParameterValue:
	//    value=ID | Pose | LinkRef
	//;
	public ParameterValueElements getParameterValueAccess() {
		return pParameterValue;
	}
	
	public ParserRule getParameterValueRule() {
		return getParameterValueAccess().getRule();
	}
	
	//LinkRef returns LinkRef:
	//    ref=[Link|STRING]
	//;
	public LinkRefElements getLinkRefAccess() {
		return pLinkRef;
	}
	
	public ParserRule getLinkRefRule() {
		return getLinkRefAccess().getRule();
	}
	
	//ParameterString returns ParameterString:
	//    {ParameterString} ref=([Parameter|STRING])? (value=ID)?
	//;
	public ParameterStringElements getParameterStringAccess() {
		return pParameterString;
	}
	
	public ParserRule getParameterStringRule() {
		return getParameterStringAccess().getRule();
	}
	
	//ParameterPose returns ParameterPose:
	//    ref=[Parameter|STRING] | value=Pose
	//;
	public ParameterPoseElements getParameterPoseAccess() {
		return pParameterPose;
	}
	
	public ParserRule getParameterPoseRule() {
		return getParameterPoseAccess().getRule();
	}
	
	//ParameterLink returns ParameterLink:
	//    param=[Parameter] | link=[Link|STRING]
	//;
	public ParameterLinkElements getParameterLinkAccess() {
		return pParameterLink;
	}
	
	public ParserRule getParameterLinkRule() {
		return getParameterLinkAccess().getRule();
	}
	
	//ParameterType returns ParameterType:
	//    ParameterStringType | ParameterLinkRefType | ParameterPoseType
	//;
	public ParameterTypeElements getParameterTypeAccess() {
		return pParameterType;
	}
	
	public ParserRule getParameterTypeRule() {
		return getParameterTypeAccess().getRule();
	}
	
	//ParameterStringType returns ParameterStringType:
	//    {ParameterStringType}
	//    'String'
	//;
	public ParameterStringTypeElements getParameterStringTypeAccess() {
		return pParameterStringType;
	}
	
	public ParserRule getParameterStringTypeRule() {
		return getParameterStringTypeAccess().getRule();
	}
	
	//ParameterLinkRefType returns ParameterLinkRefType:
	//    {ParameterLinkRefType}
	//    'LinkRef'
	//;
	public ParameterLinkRefTypeElements getParameterLinkRefTypeAccess() {
		return pParameterLinkRefType;
	}
	
	public ParserRule getParameterLinkRefTypeRule() {
		return getParameterLinkRefTypeAccess().getRule();
	}
	
	//ParameterPoseType returns ParameterPoseType:
	//    {ParameterPoseType}
	//    'Pose'
	//;
	public ParameterPoseTypeElements getParameterPoseTypeAccess() {
		return pParameterPoseType;
	}
	
	public ParserRule getParameterPoseTypeRule() {
		return getParameterPoseTypeAccess().getRule();
	}
	
	//Body returns Body:
	//    {Body}
	//    'Body'
	//    '{'
	//        ('link' '{' link+=Link ( "," link+=Link)* '}' )?
	//        ('joint' '{' joint+=Joint ( "," joint+=Joint)* '}' )?
	//    '}';
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}
	
	//MacroCall returns MacroCall:
	//    {MacroCall}
	//    'MacroCall'
	//    '{'
	//        'macro' macro=[Macro|STRING]
	//        ('parameter' '{' parameterCall+=ParameterCall ( "," parameterCall+=ParameterCall)* '}' )?
	//    '}';
	public MacroCallElements getMacroCallAccess() {
		return pMacroCall;
	}
	
	public ParserRule getMacroCallRule() {
		return getMacroCallAccess().getRule();
	}
	
	//ParameterCall returns ParameterCall:
	//    {ParameterCall}
	//    'ParameterCall'
	//    '{'
	//        'parameter' parameter=[Parameter|STRING]
	//        'value' value=ParameterValue
	//    '}';
	public ParameterCallElements getParameterCallAccess() {
		return pParameterCall;
	}
	
	public ParserRule getParameterCallRule() {
		return getParameterCallAccess().getRule();
	}
	
	//Joint returns Joint:
	//    'Joint'
	//    '{'
	//        'name' name=ParameterString
	//        'type' type=JOINTTYPE
	//        'parent' parent=ParameterLink
	//        'child' child=ParameterLink
	//        ('origin' origin=ParameterPose)?
	//        ('axis' axis=Vector3)?
	//        ('limit' limit=Limit)?
	//    '}';
	public JointElements getJointAccess() {
		return pJoint;
	}
	
	public ParserRule getJointRule() {
		return getJointAccess().getRule();
	}
	
	//Link returns Link:
	//    'Link'
	//    '{'
	//        'name' name=ParameterString
	//        ('inertial' inertial=Inertial)?
	//        ('visual' visual=Visual)?
	//        ('collision' collision=Collision)?
	//    '}';
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//Pose returns Pose:
	//    {Pose}
	//    'Pose'
	//    '{'
	//        ('rpy' rpy=STRING)?
	//        ('xyz' xyz=STRING)?
	//    '}';
	public PoseElements getPoseAccess() {
		return pPose;
	}
	
	public ParserRule getPoseRule() {
		return getPoseAccess().getRule();
	}
	
	//Vector3 returns Vector3:
	//    {Vector3}
	//    'Vector3'
	//    '{'
	//        ('xyz' xyz=STRING)?
	//    '}';
	public Vector3Elements getVector3Access() {
		return pVector3;
	}
	
	public ParserRule getVector3Rule() {
		return getVector3Access().getRule();
	}
	
	//Limit returns Limit:
	//    {Limit}
	//    'Limit'
	//    '{'
	//        ('effort' effort=STRING)?
	//        ('lower' lower=STRING)?
	//        ('upper' upper=STRING)?
	//        ('velocity' velocity=STRING)?
	//    '}';
	public LimitElements getLimitAccess() {
		return pLimit;
	}
	
	public ParserRule getLimitRule() {
		return getLimitAccess().getRule();
	}
	
	//Inertial returns Inertial:
	//    {Inertial}
	//    'Inertial'
	//    '{'
	//        ('origin' origin=Pose)?
	//        ('mass' mass=Mass)?
	//        ('inertia' inertia=Inertia)?
	//    '}';
	public InertialElements getInertialAccess() {
		return pInertial;
	}
	
	public ParserRule getInertialRule() {
		return getInertialAccess().getRule();
	}
	
	//Visual returns Visual:
	//    'Visual'
	//    '{'
	//        ('origin' origin=Pose)?
	//        'geometry' geometry=Geometry
	//    '}';
	public VisualElements getVisualAccess() {
		return pVisual;
	}
	
	public ParserRule getVisualRule() {
		return getVisualAccess().getRule();
	}
	
	//Collision returns Collision:
	//    'Collision'
	//    '{'
	//        ('origin' origin=Pose)?
	//        'geometry' geometry=Geometry
	//    '}';
	public CollisionElements getCollisionAccess() {
		return pCollision;
	}
	
	public ParserRule getCollisionRule() {
		return getCollisionAccess().getRule();
	}
	
	//Mass returns Mass:
	//    {Mass}
	//    'Mass'
	//    '{'
	//        ('value' value=Double0)?
	//    '}';
	public MassElements getMassAccess() {
		return pMass;
	}
	
	public ParserRule getMassRule() {
		return getMassAccess().getRule();
	}
	
	//Inertia returns Inertia:
	//    {Inertia}
	//    'Inertia'
	//    '{'
	//        ('ixx' ixx=Double0)?
	//        ('ixy' ixy=Double0)?
	//        ('ixz' ixz=Double0)?
	//        ('iyy' iyy=Double0)?
	//        ('iyz' iyz=Double0)?
	//        ('izz' izz=Double0)?
	//    '}';
	public InertiaElements getInertiaAccess() {
		return pInertia;
	}
	
	public ParserRule getInertiaRule() {
		return getInertiaAccess().getRule();
	}
	
	//Geometry returns Geometry:
	//    {Geometry}
	//    'Geometry'
	//    '{'
	//        ('box' box=Box)?
	//        ('cylinder' cylinder=Cylinder)?
	//        ('sphere' sphere=Sphere)?
	//        ('mesh' mesh=Mesh)?
	//    '}';
	public GeometryElements getGeometryAccess() {
		return pGeometry;
	}
	
	public ParserRule getGeometryRule() {
		return getGeometryAccess().getRule();
	}
	
	//Box returns Box:
	//    {Box}
	//    'Box'
	//    '{'
	//        ('size' size=ParameterString)?
	//    '}';
	public BoxElements getBoxAccess() {
		return pBox;
	}
	
	public ParserRule getBoxRule() {
		return getBoxAccess().getRule();
	}
	
	//Cylinder returns Cylinder:
	//    'Cylinder'
	//    '{'
	//        'length' length=Double0
	//        'radius' radius=Double0
	//    '}';
	public CylinderElements getCylinderAccess() {
		return pCylinder;
	}
	
	public ParserRule getCylinderRule() {
		return getCylinderAccess().getRule();
	}
	
	//Sphere returns Sphere:
	//    'Sphere'
	//    '{'
	//        'radius' radius=Double0
	//    '}';
	public SphereElements getSphereAccess() {
		return pSphere;
	}
	
	public ParserRule getSphereRule() {
		return getSphereAccess().getRule();
	}
	
	//Mesh returns Mesh:
	//    'Mesh'
	//    '{'
	//        'filename' filename=STRING
	//        ('scale' scale=Double0)?
	//    '}';
	public MeshElements getMeshAccess() {
		return pMesh;
	}
	
	public ParserRule getMeshRule() {
		return getMeshAccess().getRule();
	}
	
	//AnyURI returns type::AnyURI:
	//    'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;
	public AnyURIElements getAnyURIAccess() {
		return pAnyURI;
	}
	
	public ParserRule getAnyURIRule() {
		return getAnyURIAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING
	//;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//// from https://github.com/ipa320/ros-model/blob/e9279c9eab1c5d2554f239e80150f2df1bbb5ab3/plugins/de.fraunhofer.ipa.rossystem.xtext/src/de/fraunhofer/ipa/rossystem/RosSystem.xtext#L283-L307
	//terminal fragment DIGIT: '0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal BOOLEAN: 'true'|'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal DOUBLE returns ecore::EDouble: DECINT (('.' DIGIT*) | (('.' DIGIT*)? ('E'|'e') ('-'|'+')? DECINT));
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//  // Use terminal to avoid 'e' turning into a keyword
	//terminal DECINT: '0' | ('1'..'9' DIGIT*) | ('-''0'..'9' DIGIT*) ;
	public TerminalRule getDECINTRule() {
		return tDECINT;
	}
	
	//terminal JOINTTYPE: 'revolute' | 'continuous' | 'prismatic' | 'fixed' | 'floating' | 'planar';
	public TerminalRule getJOINTTYPERule() {
		return tJOINTTYPE;
	}
	
	//Double0 returns type::Double:
	//    DOUBLE;
	public Double0Elements getDouble0Access() {
		return pDouble0;
	}
	
	public ParserRule getDouble0Rule() {
		return getDouble0Access().getRule();
	}
	
	//Integer0 returns type::Int:
	//    DECINT;
	public Integer0Elements getInteger0Access() {
		return pInteger0;
	}
	
	public ParserRule getInteger0Rule() {
		return getInteger0Access().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
