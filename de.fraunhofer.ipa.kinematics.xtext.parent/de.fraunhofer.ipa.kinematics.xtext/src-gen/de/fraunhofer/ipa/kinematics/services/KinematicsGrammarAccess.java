/*
 * generated by Xtext 2.26.0
 */
package de.fraunhofer.ipa.kinematics.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class KinematicsGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class RobotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Robot");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRobotAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRobotKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cNameKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cNameIDTerminalRuleCall_4_0 = (RuleCall)cNameAssignment_4.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVersionKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVersionAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVersionSTRINGTerminalRuleCall_5_1_0 = (RuleCall)cVersionAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cMacrosKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cMacroAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cMacroMacroParserRuleCall_6_1_0 = (RuleCall)cMacroAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cMacroCallsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cMacroCallAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cMacroCallMacroCallParserRuleCall_7_1_0 = (RuleCall)cMacroCallAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cBodyKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_8_1 = (RuleCall)cGroup_8.eContents().get(1);
		private final Assignment cBodyAssignment_8_2 = (Assignment)cGroup_8.eContents().get(2);
		private final RuleCall cBodyBodyParserRuleCall_8_2_0 = (RuleCall)cBodyAssignment_8_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_8_3 = (RuleCall)cGroup_8.eContents().get(3);
		private final RuleCall cENDTerminalRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		
		//Robot returns Robot:
		//    {Robot}
		//    'robot:'
		//    BEGIN
		//        'name:' name=ID
		//        ('version:' version=STRING)?
		//        ('macros:'
		//            macro+=Macro*
		//        )?
		//        ('macroCalls:'
		//            macroCall+=MacroCall*
		//        )?
		//        ('body:'
		//            BEGIN
		//            body=Body
		//            END
		//        )?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Robot}
		//'robot:'
		//BEGIN
		//    'name:' name=ID
		//    ('version:' version=STRING)?
		//    ('macros:'
		//        macro+=Macro*
		//    )?
		//    ('macroCalls:'
		//        macroCall+=MacroCall*
		//    )?
		//    ('body:'
		//        BEGIN
		//        body=Body
		//        END
		//    )?
		//END
		public Group getGroup() { return cGroup; }
		
		//{Robot}
		public Action getRobotAction_0() { return cRobotAction_0; }
		
		//'robot:'
		public Keyword getRobotKeyword_1() { return cRobotKeyword_1; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2() { return cBEGINTerminalRuleCall_2; }
		
		//'name:'
		public Keyword getNameKeyword_3() { return cNameKeyword_3; }
		
		//name=ID
		public Assignment getNameAssignment_4() { return cNameAssignment_4; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_4_0() { return cNameIDTerminalRuleCall_4_0; }
		
		//('version:' version=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'version:'
		public Keyword getVersionKeyword_5_0() { return cVersionKeyword_5_0; }
		
		//version=STRING
		public Assignment getVersionAssignment_5_1() { return cVersionAssignment_5_1; }
		
		//STRING
		public RuleCall getVersionSTRINGTerminalRuleCall_5_1_0() { return cVersionSTRINGTerminalRuleCall_5_1_0; }
		
		//('macros:'
		//    macro+=Macro*
		//)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'macros:'
		public Keyword getMacrosKeyword_6_0() { return cMacrosKeyword_6_0; }
		
		//macro+=Macro*
		public Assignment getMacroAssignment_6_1() { return cMacroAssignment_6_1; }
		
		//Macro
		public RuleCall getMacroMacroParserRuleCall_6_1_0() { return cMacroMacroParserRuleCall_6_1_0; }
		
		//('macroCalls:'
		//    macroCall+=MacroCall*
		//)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'macroCalls:'
		public Keyword getMacroCallsKeyword_7_0() { return cMacroCallsKeyword_7_0; }
		
		//macroCall+=MacroCall*
		public Assignment getMacroCallAssignment_7_1() { return cMacroCallAssignment_7_1; }
		
		//MacroCall
		public RuleCall getMacroCallMacroCallParserRuleCall_7_1_0() { return cMacroCallMacroCallParserRuleCall_7_1_0; }
		
		//('body:'
		//    BEGIN
		//    body=Body
		//    END
		//)?
		public Group getGroup_8() { return cGroup_8; }
		
		//'body:'
		public Keyword getBodyKeyword_8_0() { return cBodyKeyword_8_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_8_1() { return cBEGINTerminalRuleCall_8_1; }
		
		//body=Body
		public Assignment getBodyAssignment_8_2() { return cBodyAssignment_8_2; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_8_2_0() { return cBodyBodyParserRuleCall_8_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_8_3() { return cENDTerminalRuleCall_8_3; }
		
		//END
		public RuleCall getENDTerminalRuleCall_9() { return cENDTerminalRuleCall_9; }
	}
	public class MacroElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Macro");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cParametersKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cParameterAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cParameterParameterParserRuleCall_4_1_0 = (RuleCall)cParameterAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cBodyKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Assignment cBodyAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cBodyBodyParserRuleCall_5_2_0 = (RuleCall)cBodyAssignment_5_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5_3 = (RuleCall)cGroup_5.eContents().get(3);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Macro returns Macro:
		//    '-' name=ID ':'
		//    BEGIN
		//        ('parameters:'
		//            parameter+=Parameter*
		//        )?
		//        ('body:'
		//            BEGIN
		//            body=Body
		//            END
		//        )?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' name=ID ':'
		//BEGIN
		//    ('parameters:'
		//        parameter+=Parameter*
		//    )?
		//    ('body:'
		//        BEGIN
		//        body=Body
		//        END
		//    )?
		//END
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//('parameters:'
		//    parameter+=Parameter*
		//)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'parameters:'
		public Keyword getParametersKeyword_4_0() { return cParametersKeyword_4_0; }
		
		//parameter+=Parameter*
		public Assignment getParameterAssignment_4_1() { return cParameterAssignment_4_1; }
		
		//Parameter
		public RuleCall getParameterParameterParserRuleCall_4_1_0() { return cParameterParameterParserRuleCall_4_1_0; }
		
		//('body:'
		//    BEGIN
		//    body=Body
		//    END
		//)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'body:'
		public Keyword getBodyKeyword_5_0() { return cBodyKeyword_5_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_5_1() { return cBEGINTerminalRuleCall_5_1; }
		
		//body=Body
		public Assignment getBodyAssignment_5_2() { return cBodyAssignment_5_2; }
		
		//Body
		public RuleCall getBodyBodyParserRuleCall_5_2_0() { return cBodyBodyParserRuleCall_5_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5_3() { return cENDTerminalRuleCall_5_3; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class ParameterElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Parameter");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cBEGINTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cTypeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeParameterTypeParserRuleCall_6_0 = (RuleCall)cTypeAssignment_6.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cDefaultKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cValueAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cValueParameterValueParserRuleCall_7_1_0 = (RuleCall)cValueAssignment_7_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//Parameter returns Parameter:
		//    {Parameter}
		//    '-' name=ID ':'
		//    BEGIN
		//        'type:' type=ParameterType
		//        ('default' value=ParameterValue)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Parameter}
		//'-' name=ID ':'
		//BEGIN
		//    'type:' type=ParameterType
		//    ('default' value=ParameterValue)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{Parameter}
		public Action getParameterAction_0() { return cParameterAction_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4() { return cBEGINTerminalRuleCall_4; }
		
		//'type:'
		public Keyword getTypeKeyword_5() { return cTypeKeyword_5; }
		
		//type=ParameterType
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//ParameterType
		public RuleCall getTypeParameterTypeParserRuleCall_6_0() { return cTypeParameterTypeParserRuleCall_6_0; }
		
		//('default' value=ParameterValue)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'default'
		public Keyword getDefaultKeyword_7_0() { return cDefaultKeyword_7_0; }
		
		//value=ParameterValue
		public Assignment getValueAssignment_7_1() { return cValueAssignment_7_1; }
		
		//ParameterValue
		public RuleCall getValueParameterValueParserRuleCall_7_1_0() { return cValueParameterValueParserRuleCall_7_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_8() { return cENDTerminalRuleCall_8; }
	}
	public class ParameterValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.ParameterValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cValueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cValueIDTerminalRuleCall_0_0 = (RuleCall)cValueAssignment_0.eContents().get(0);
		private final RuleCall cPoseParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLinkRefParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ParameterValue returns ParameterValue:
		//    value=ID | Pose | LinkRef
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//value=ID | Pose | LinkRef
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//value=ID
		public Assignment getValueAssignment_0() { return cValueAssignment_0; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_0_0() { return cValueIDTerminalRuleCall_0_0; }
		
		//Pose
		public RuleCall getPoseParserRuleCall_1() { return cPoseParserRuleCall_1; }
		
		//LinkRef
		public RuleCall getLinkRefParserRuleCall_2() { return cLinkRefParserRuleCall_2; }
	}
	public class LinkRefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.LinkRef");
		private final Assignment cRefAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cRefLinkCrossReference_0 = (CrossReference)cRefAssignment.eContents().get(0);
		private final RuleCall cRefLinkSTRINGTerminalRuleCall_0_1 = (RuleCall)cRefLinkCrossReference_0.eContents().get(1);
		
		//LinkRef returns LinkRef:
		//    ref=[Link|STRING]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Link|STRING]
		public Assignment getRefAssignment() { return cRefAssignment; }
		
		//[Link|STRING]
		public CrossReference getRefLinkCrossReference_0() { return cRefLinkCrossReference_0; }
		
		//STRING
		public RuleCall getRefLinkSTRINGTerminalRuleCall_0_1() { return cRefLinkSTRINGTerminalRuleCall_0_1; }
	}
	public class ParameterStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.ParameterString");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterStringAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cRefAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cRefParameterCrossReference_1_0 = (CrossReference)cRefAssignment_1.eContents().get(0);
		private final RuleCall cRefParameterSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cRefParameterCrossReference_1_0.eContents().get(1);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueIDTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//ParameterString returns ParameterString:
		//    {ParameterString} ref=([Parameter|STRING])? (value=ID)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterString} ref=([Parameter|STRING])? (value=ID)?
		public Group getGroup() { return cGroup; }
		
		//{ParameterString}
		public Action getParameterStringAction_0() { return cParameterStringAction_0; }
		
		//ref=([Parameter|STRING])?
		public Assignment getRefAssignment_1() { return cRefAssignment_1; }
		
		//([Parameter|STRING])
		public CrossReference getRefParameterCrossReference_1_0() { return cRefParameterCrossReference_1_0; }
		
		//STRING
		public RuleCall getRefParameterSTRINGTerminalRuleCall_1_0_1() { return cRefParameterSTRINGTerminalRuleCall_1_0_1; }
		
		//(value=ID)?
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//ID
		public RuleCall getValueIDTerminalRuleCall_2_0() { return cValueIDTerminalRuleCall_2_0; }
	}
	public class ParameterPoseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.ParameterPose");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cRefAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cRefParameterCrossReference_0_0 = (CrossReference)cRefAssignment_0.eContents().get(0);
		private final RuleCall cRefParameterSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cRefParameterCrossReference_0_0.eContents().get(1);
		private final Assignment cValueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final RuleCall cValuePoseParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//ParameterPose returns ParameterPose:
		//    ref=[Parameter|STRING] | value=Pose
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ref=[Parameter|STRING] | value=Pose
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ref=[Parameter|STRING]
		public Assignment getRefAssignment_0() { return cRefAssignment_0; }
		
		//[Parameter|STRING]
		public CrossReference getRefParameterCrossReference_0_0() { return cRefParameterCrossReference_0_0; }
		
		//STRING
		public RuleCall getRefParameterSTRINGTerminalRuleCall_0_0_1() { return cRefParameterSTRINGTerminalRuleCall_0_0_1; }
		
		//value=Pose
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Pose
		public RuleCall getValuePoseParserRuleCall_1_0() { return cValuePoseParserRuleCall_1_0; }
	}
	public class ParameterLinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.ParameterLink");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cParamAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final CrossReference cParamParameterCrossReference_0_0 = (CrossReference)cParamAssignment_0.eContents().get(0);
		private final RuleCall cParamParameterIDTerminalRuleCall_0_0_1 = (RuleCall)cParamParameterCrossReference_0_0.eContents().get(1);
		private final Assignment cLinkAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final CrossReference cLinkLinkCrossReference_1_0 = (CrossReference)cLinkAssignment_1.eContents().get(0);
		private final RuleCall cLinkLinkSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cLinkLinkCrossReference_1_0.eContents().get(1);
		
		//ParameterLink returns ParameterLink:
		//    param=[Parameter] | link=[Link|STRING]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//param=[Parameter] | link=[Link|STRING]
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//param=[Parameter]
		public Assignment getParamAssignment_0() { return cParamAssignment_0; }
		
		//[Parameter]
		public CrossReference getParamParameterCrossReference_0_0() { return cParamParameterCrossReference_0_0; }
		
		//ID
		public RuleCall getParamParameterIDTerminalRuleCall_0_0_1() { return cParamParameterIDTerminalRuleCall_0_0_1; }
		
		//link=[Link|STRING]
		public Assignment getLinkAssignment_1() { return cLinkAssignment_1; }
		
		//[Link|STRING]
		public CrossReference getLinkLinkCrossReference_1_0() { return cLinkLinkCrossReference_1_0; }
		
		//STRING
		public RuleCall getLinkLinkSTRINGTerminalRuleCall_1_0_1() { return cLinkLinkSTRINGTerminalRuleCall_1_0_1; }
	}
	public class ParameterTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.ParameterType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParameterStringTypeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cParameterLinkRefTypeParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cParameterPoseTypeParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ParameterType returns ParameterType:
		//    ParameterStringType | ParameterLinkRefType | ParameterPoseType
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ParameterStringType | ParameterLinkRefType | ParameterPoseType
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ParameterStringType
		public RuleCall getParameterStringTypeParserRuleCall_0() { return cParameterStringTypeParserRuleCall_0; }
		
		//ParameterLinkRefType
		public RuleCall getParameterLinkRefTypeParserRuleCall_1() { return cParameterLinkRefTypeParserRuleCall_1; }
		
		//ParameterPoseType
		public RuleCall getParameterPoseTypeParserRuleCall_2() { return cParameterPoseTypeParserRuleCall_2; }
	}
	public class ParameterStringTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.ParameterStringType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterStringTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cStringKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ParameterStringType returns ParameterStringType:
		//    {ParameterStringType}
		//    'String'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterStringType}
		//'String'
		public Group getGroup() { return cGroup; }
		
		//{ParameterStringType}
		public Action getParameterStringTypeAction_0() { return cParameterStringTypeAction_0; }
		
		//'String'
		public Keyword getStringKeyword_1() { return cStringKeyword_1; }
	}
	public class ParameterLinkRefTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.ParameterLinkRefType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterLinkRefTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cLinkRefKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ParameterLinkRefType returns ParameterLinkRefType:
		//    {ParameterLinkRefType}
		//    'LinkRef'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterLinkRefType}
		//'LinkRef'
		public Group getGroup() { return cGroup; }
		
		//{ParameterLinkRefType}
		public Action getParameterLinkRefTypeAction_0() { return cParameterLinkRefTypeAction_0; }
		
		//'LinkRef'
		public Keyword getLinkRefKeyword_1() { return cLinkRefKeyword_1; }
	}
	public class ParameterPoseTypeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.ParameterPoseType");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterPoseTypeAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cPoseKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//ParameterPoseType returns ParameterPoseType:
		//    {ParameterPoseType}
		//    'Pose'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterPoseType}
		//'Pose'
		public Group getGroup() { return cGroup; }
		
		//{ParameterPoseType}
		public Action getParameterPoseTypeAction_0() { return cParameterPoseTypeAction_0; }
		
		//'Pose'
		public Keyword getPoseKeyword_1() { return cPoseKeyword_1; }
	}
	public class BodyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Body");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBodyAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLinksKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLinkAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cLinkLinkParserRuleCall_1_1_0 = (RuleCall)cLinkAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cJointsKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cJointAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cJointJointParserRuleCall_2_1_0 = (RuleCall)cJointAssignment_2_1.eContents().get(0);
		
		//Body returns Body:
		//    {Body}
		//    ('links:' link+=Link*)?
		//    ('joints:' joint+=Joint* )?;
		@Override public ParserRule getRule() { return rule; }
		
		//{Body}
		//('links:' link+=Link*)?
		//('joints:' joint+=Joint* )?
		public Group getGroup() { return cGroup; }
		
		//{Body}
		public Action getBodyAction_0() { return cBodyAction_0; }
		
		//('links:' link+=Link*)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'links:'
		public Keyword getLinksKeyword_1_0() { return cLinksKeyword_1_0; }
		
		//link+=Link*
		public Assignment getLinkAssignment_1_1() { return cLinkAssignment_1_1; }
		
		//Link
		public RuleCall getLinkLinkParserRuleCall_1_1_0() { return cLinkLinkParserRuleCall_1_1_0; }
		
		//('joints:' joint+=Joint* )?
		public Group getGroup_2() { return cGroup_2; }
		
		//'joints:'
		public Keyword getJointsKeyword_2_0() { return cJointsKeyword_2_0; }
		
		//joint+=Joint*
		public Assignment getJointAssignment_2_1() { return cJointAssignment_2_1; }
		
		//Joint
		public RuleCall getJointJointParserRuleCall_2_1_0() { return cJointJointParserRuleCall_2_1_0; }
	}
	public class MacroCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.MacroCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMacroCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cMacroAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cMacroMacroCrossReference_2_0 = (CrossReference)cMacroAssignment_2.eContents().get(0);
		private final RuleCall cMacroMacroSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cMacroMacroCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cBEGINTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Assignment cParameterCallAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cParameterCallParameterCallParserRuleCall_5_0 = (RuleCall)cParameterCallAssignment_5.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//MacroCall returns MacroCall:
		//    {MacroCall}
		//    '-' macro=[Macro|STRING] ':'
		//    BEGIN
		//        parameterCall+=ParameterCall*
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{MacroCall}
		//'-' macro=[Macro|STRING] ':'
		//BEGIN
		//    parameterCall+=ParameterCall*
		//END
		public Group getGroup() { return cGroup; }
		
		//{MacroCall}
		public Action getMacroCallAction_0() { return cMacroCallAction_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//macro=[Macro|STRING]
		public Assignment getMacroAssignment_2() { return cMacroAssignment_2; }
		
		//[Macro|STRING]
		public CrossReference getMacroMacroCrossReference_2_0() { return cMacroMacroCrossReference_2_0; }
		
		//STRING
		public RuleCall getMacroMacroSTRINGTerminalRuleCall_2_0_1() { return cMacroMacroSTRINGTerminalRuleCall_2_0_1; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4() { return cBEGINTerminalRuleCall_4; }
		
		//parameterCall+=ParameterCall*
		public Assignment getParameterCallAssignment_5() { return cParameterCallAssignment_5; }
		
		//ParameterCall
		public RuleCall getParameterCallParameterCallParserRuleCall_5_0() { return cParameterCallParameterCallParserRuleCall_5_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class ParameterCallElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.ParameterCall");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cParameterCallAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cParameterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cParameterParameterCrossReference_2_0 = (CrossReference)cParameterAssignment_2.eContents().get(0);
		private final RuleCall cParameterParameterSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cParameterParameterCrossReference_2_0.eContents().get(1);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cBEGINTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final Keyword cValueKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValueAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValueParameterValueParserRuleCall_6_0 = (RuleCall)cValueAssignment_6.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		
		//ParameterCall returns ParameterCall:
		//    {ParameterCall}
		//    '-' parameter=[Parameter|STRING] ':'
		//    BEGIN
		//        'value' value=ParameterValue
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{ParameterCall}
		//'-' parameter=[Parameter|STRING] ':'
		//BEGIN
		//    'value' value=ParameterValue
		//END
		public Group getGroup() { return cGroup; }
		
		//{ParameterCall}
		public Action getParameterCallAction_0() { return cParameterCallAction_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1() { return cHyphenMinusKeyword_1; }
		
		//parameter=[Parameter|STRING]
		public Assignment getParameterAssignment_2() { return cParameterAssignment_2; }
		
		//[Parameter|STRING]
		public CrossReference getParameterParameterCrossReference_2_0() { return cParameterParameterCrossReference_2_0; }
		
		//STRING
		public RuleCall getParameterParameterSTRINGTerminalRuleCall_2_0_1() { return cParameterParameterSTRINGTerminalRuleCall_2_0_1; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_4() { return cBEGINTerminalRuleCall_4; }
		
		//'value'
		public Keyword getValueKeyword_5() { return cValueKeyword_5; }
		
		//value=ParameterValue
		public Assignment getValueAssignment_6() { return cValueAssignment_6; }
		
		//ParameterValue
		public RuleCall getValueParameterValueParserRuleCall_6_0() { return cValueParameterValueParserRuleCall_6_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_7() { return cENDTerminalRuleCall_7; }
	}
	public class JointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Joint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameParameterStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final RuleCall cBEGINTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cTypeKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTypeAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTypeJOINTTYPETerminalRuleCall_5_0 = (RuleCall)cTypeAssignment_5.eContents().get(0);
		private final Keyword cParentKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cParentAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cParentParameterLinkParserRuleCall_7_0 = (RuleCall)cParentAssignment_7.eContents().get(0);
		private final Keyword cChildKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cChildAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cChildParameterLinkParserRuleCall_9_0 = (RuleCall)cChildAssignment_9.eContents().get(0);
		private final Keyword cOriginKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cOriginAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cOriginParameterPoseParserRuleCall_11_0 = (RuleCall)cOriginAssignment_11.eContents().get(0);
		private final Group cGroup_12 = (Group)cGroup.eContents().get(12);
		private final Keyword cAxisKeyword_12_0 = (Keyword)cGroup_12.eContents().get(0);
		private final Assignment cAxisAssignment_12_1 = (Assignment)cGroup_12.eContents().get(1);
		private final RuleCall cAxisVector3ParserRuleCall_12_1_0 = (RuleCall)cAxisAssignment_12_1.eContents().get(0);
		private final Group cGroup_13 = (Group)cGroup.eContents().get(13);
		private final Keyword cLimitKeyword_13_0 = (Keyword)cGroup_13.eContents().get(0);
		private final Assignment cLimitAssignment_13_1 = (Assignment)cGroup_13.eContents().get(1);
		private final RuleCall cLimitLimitParserRuleCall_13_1_0 = (RuleCall)cLimitAssignment_13_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_14 = (RuleCall)cGroup.eContents().get(14);
		
		//Joint returns Joint:
		//    '-' name=ParameterString ':'
		//    BEGIN
		//        'type:' type=JOINTTYPE
		//        'parent:' parent=ParameterLink
		//        'child:' child=ParameterLink
		//        'origin:' origin=ParameterPose
		//        ('axis:' axis=Vector3)?
		//        ('limit:' limit=Limit)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' name=ParameterString ':'
		//BEGIN
		//    'type:' type=JOINTTYPE
		//    'parent:' parent=ParameterLink
		//    'child:' child=ParameterLink
		//    'origin:' origin=ParameterPose
		//    ('axis:' axis=Vector3)?
		//    ('limit:' limit=Limit)?
		//END
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//name=ParameterString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ParameterString
		public RuleCall getNameParameterStringParserRuleCall_1_0() { return cNameParameterStringParserRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_3() { return cBEGINTerminalRuleCall_3; }
		
		//'type:'
		public Keyword getTypeKeyword_4() { return cTypeKeyword_4; }
		
		//type=JOINTTYPE
		public Assignment getTypeAssignment_5() { return cTypeAssignment_5; }
		
		//JOINTTYPE
		public RuleCall getTypeJOINTTYPETerminalRuleCall_5_0() { return cTypeJOINTTYPETerminalRuleCall_5_0; }
		
		//'parent:'
		public Keyword getParentKeyword_6() { return cParentKeyword_6; }
		
		//parent=ParameterLink
		public Assignment getParentAssignment_7() { return cParentAssignment_7; }
		
		//ParameterLink
		public RuleCall getParentParameterLinkParserRuleCall_7_0() { return cParentParameterLinkParserRuleCall_7_0; }
		
		//'child:'
		public Keyword getChildKeyword_8() { return cChildKeyword_8; }
		
		//child=ParameterLink
		public Assignment getChildAssignment_9() { return cChildAssignment_9; }
		
		//ParameterLink
		public RuleCall getChildParameterLinkParserRuleCall_9_0() { return cChildParameterLinkParserRuleCall_9_0; }
		
		//'origin:'
		public Keyword getOriginKeyword_10() { return cOriginKeyword_10; }
		
		//origin=ParameterPose
		public Assignment getOriginAssignment_11() { return cOriginAssignment_11; }
		
		//ParameterPose
		public RuleCall getOriginParameterPoseParserRuleCall_11_0() { return cOriginParameterPoseParserRuleCall_11_0; }
		
		//('axis:' axis=Vector3)?
		public Group getGroup_12() { return cGroup_12; }
		
		//'axis:'
		public Keyword getAxisKeyword_12_0() { return cAxisKeyword_12_0; }
		
		//axis=Vector3
		public Assignment getAxisAssignment_12_1() { return cAxisAssignment_12_1; }
		
		//Vector3
		public RuleCall getAxisVector3ParserRuleCall_12_1_0() { return cAxisVector3ParserRuleCall_12_1_0; }
		
		//('limit:' limit=Limit)?
		public Group getGroup_13() { return cGroup_13; }
		
		//'limit:'
		public Keyword getLimitKeyword_13_0() { return cLimitKeyword_13_0; }
		
		//limit=Limit
		public Assignment getLimitAssignment_13_1() { return cLimitAssignment_13_1; }
		
		//Limit
		public RuleCall getLimitLimitParserRuleCall_13_1_0() { return cLimitLimitParserRuleCall_13_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_14() { return cENDTerminalRuleCall_14; }
	}
	public class LinkElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Link");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameParameterStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Group cGroup_2_2 = (Group)cGroup_2.eContents().get(2);
		private final Keyword cInertialKeyword_2_2_0 = (Keyword)cGroup_2_2.eContents().get(0);
		private final Assignment cInertialAssignment_2_2_1 = (Assignment)cGroup_2_2.eContents().get(1);
		private final RuleCall cInertialInertialParserRuleCall_2_2_1_0 = (RuleCall)cInertialAssignment_2_2_1.eContents().get(0);
		private final Group cGroup_2_3 = (Group)cGroup_2.eContents().get(3);
		private final Keyword cVisualKeyword_2_3_0 = (Keyword)cGroup_2_3.eContents().get(0);
		private final Assignment cVisualAssignment_2_3_1 = (Assignment)cGroup_2_3.eContents().get(1);
		private final RuleCall cVisualVisualParserRuleCall_2_3_1_0 = (RuleCall)cVisualAssignment_2_3_1.eContents().get(0);
		private final Group cGroup_2_4 = (Group)cGroup_2.eContents().get(4);
		private final Keyword cCollisionKeyword_2_4_0 = (Keyword)cGroup_2_4.eContents().get(0);
		private final Assignment cCollisionAssignment_2_4_1 = (Assignment)cGroup_2_4.eContents().get(1);
		private final RuleCall cCollisionCollisionParserRuleCall_2_4_1_0 = (RuleCall)cCollisionAssignment_2_4_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_2_5 = (RuleCall)cGroup_2.eContents().get(5);
		
		//Link returns Link:
		//    '-' name=ParameterString
		//    (':' BEGIN
		//        ('inertial:' inertial=Inertial)?
		//        ('visual:' visual=Visual)?
		//        ('collision:' collision=Collision)?
		//    END)?;
		@Override public ParserRule getRule() { return rule; }
		
		//'-' name=ParameterString
		//(':' BEGIN
		//    ('inertial:' inertial=Inertial)?
		//    ('visual:' visual=Visual)?
		//    ('collision:' collision=Collision)?
		//END)?
		public Group getGroup() { return cGroup; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//name=ParameterString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ParameterString
		public RuleCall getNameParameterStringParserRuleCall_1_0() { return cNameParameterStringParserRuleCall_1_0; }
		
		//(':' BEGIN
		//    ('inertial:' inertial=Inertial)?
		//    ('visual:' visual=Visual)?
		//    ('collision:' collision=Collision)?
		//END)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_2_1() { return cBEGINTerminalRuleCall_2_1; }
		
		//('inertial:' inertial=Inertial)?
		public Group getGroup_2_2() { return cGroup_2_2; }
		
		//'inertial:'
		public Keyword getInertialKeyword_2_2_0() { return cInertialKeyword_2_2_0; }
		
		//inertial=Inertial
		public Assignment getInertialAssignment_2_2_1() { return cInertialAssignment_2_2_1; }
		
		//Inertial
		public RuleCall getInertialInertialParserRuleCall_2_2_1_0() { return cInertialInertialParserRuleCall_2_2_1_0; }
		
		//('visual:' visual=Visual)?
		public Group getGroup_2_3() { return cGroup_2_3; }
		
		//'visual:'
		public Keyword getVisualKeyword_2_3_0() { return cVisualKeyword_2_3_0; }
		
		//visual=Visual
		public Assignment getVisualAssignment_2_3_1() { return cVisualAssignment_2_3_1; }
		
		//Visual
		public RuleCall getVisualVisualParserRuleCall_2_3_1_0() { return cVisualVisualParserRuleCall_2_3_1_0; }
		
		//('collision:' collision=Collision)?
		public Group getGroup_2_4() { return cGroup_2_4; }
		
		//'collision:'
		public Keyword getCollisionKeyword_2_4_0() { return cCollisionKeyword_2_4_0; }
		
		//collision=Collision
		public Assignment getCollisionAssignment_2_4_1() { return cCollisionAssignment_2_4_1; }
		
		//Collision
		public RuleCall getCollisionCollisionParserRuleCall_2_4_1_0() { return cCollisionCollisionParserRuleCall_2_4_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_2_5() { return cENDTerminalRuleCall_2_5; }
	}
	public class PoseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Pose");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cPoseAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cRpyKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cRpyAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cRpySTRINGTerminalRuleCall_2_1_0 = (RuleCall)cRpyAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cXyzKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cXyzAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cXyzSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cXyzAssignment_3_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Pose returns Pose:
		//    {Pose}
		//    BEGIN
		//        ('rpy:' rpy=STRING)?
		//        ('xyz:' xyz=STRING)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Pose}
		//BEGIN
		//    ('rpy:' rpy=STRING)?
		//    ('xyz:' xyz=STRING)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{Pose}
		public Action getPoseAction_0() { return cPoseAction_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//('rpy:' rpy=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'rpy:'
		public Keyword getRpyKeyword_2_0() { return cRpyKeyword_2_0; }
		
		//rpy=STRING
		public Assignment getRpyAssignment_2_1() { return cRpyAssignment_2_1; }
		
		//STRING
		public RuleCall getRpySTRINGTerminalRuleCall_2_1_0() { return cRpySTRINGTerminalRuleCall_2_1_0; }
		
		//('xyz:' xyz=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'xyz:'
		public Keyword getXyzKeyword_3_0() { return cXyzKeyword_3_0; }
		
		//xyz=STRING
		public Assignment getXyzAssignment_3_1() { return cXyzAssignment_3_1; }
		
		//STRING
		public RuleCall getXyzSTRINGTerminalRuleCall_3_1_0() { return cXyzSTRINGTerminalRuleCall_3_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class Vector3Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Vector3");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cVector3Action_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cXyzKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cXyzAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cXyzSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cXyzAssignment_2_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Vector3 returns Vector3:
		//    {Vector3}
		//    BEGIN
		//        ('xyz:' xyz=STRING)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Vector3}
		//BEGIN
		//    ('xyz:' xyz=STRING)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{Vector3}
		public Action getVector3Action_0() { return cVector3Action_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//('xyz:' xyz=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'xyz:'
		public Keyword getXyzKeyword_2_0() { return cXyzKeyword_2_0; }
		
		//xyz=STRING
		public Assignment getXyzAssignment_2_1() { return cXyzAssignment_2_1; }
		
		//STRING
		public RuleCall getXyzSTRINGTerminalRuleCall_2_1_0() { return cXyzSTRINGTerminalRuleCall_2_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}
	public class LimitElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Limit");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cLimitAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cEffortKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cEffortAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cEffortSTRINGTerminalRuleCall_2_1_0 = (RuleCall)cEffortAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cLowerKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cLowerAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cLowerSTRINGTerminalRuleCall_3_1_0 = (RuleCall)cLowerAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cUpperKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cUpperAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cUpperSTRINGTerminalRuleCall_4_1_0 = (RuleCall)cUpperAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cVelocityKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cVelocityAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cVelocitySTRINGTerminalRuleCall_5_1_0 = (RuleCall)cVelocityAssignment_5_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Limit returns Limit:
		//    {Limit}
		//    BEGIN
		//        ('effort:' effort=STRING)?
		//        ('lower:' lower=STRING)?
		//        ('upper:' upper=STRING)?
		//        ('velocity:' velocity=STRING)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Limit}
		//BEGIN
		//    ('effort:' effort=STRING)?
		//    ('lower:' lower=STRING)?
		//    ('upper:' upper=STRING)?
		//    ('velocity:' velocity=STRING)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{Limit}
		public Action getLimitAction_0() { return cLimitAction_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//('effort:' effort=STRING)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'effort:'
		public Keyword getEffortKeyword_2_0() { return cEffortKeyword_2_0; }
		
		//effort=STRING
		public Assignment getEffortAssignment_2_1() { return cEffortAssignment_2_1; }
		
		//STRING
		public RuleCall getEffortSTRINGTerminalRuleCall_2_1_0() { return cEffortSTRINGTerminalRuleCall_2_1_0; }
		
		//('lower:' lower=STRING)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'lower:'
		public Keyword getLowerKeyword_3_0() { return cLowerKeyword_3_0; }
		
		//lower=STRING
		public Assignment getLowerAssignment_3_1() { return cLowerAssignment_3_1; }
		
		//STRING
		public RuleCall getLowerSTRINGTerminalRuleCall_3_1_0() { return cLowerSTRINGTerminalRuleCall_3_1_0; }
		
		//('upper:' upper=STRING)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'upper:'
		public Keyword getUpperKeyword_4_0() { return cUpperKeyword_4_0; }
		
		//upper=STRING
		public Assignment getUpperAssignment_4_1() { return cUpperAssignment_4_1; }
		
		//STRING
		public RuleCall getUpperSTRINGTerminalRuleCall_4_1_0() { return cUpperSTRINGTerminalRuleCall_4_1_0; }
		
		//('velocity:' velocity=STRING)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'velocity:'
		public Keyword getVelocityKeyword_5_0() { return cVelocityKeyword_5_0; }
		
		//velocity=STRING
		public Assignment getVelocityAssignment_5_1() { return cVelocityAssignment_5_1; }
		
		//STRING
		public RuleCall getVelocitySTRINGTerminalRuleCall_5_1_0() { return cVelocitySTRINGTerminalRuleCall_5_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class InertialElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Inertial");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInertialAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cOriginKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cOriginAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cOriginPoseParserRuleCall_2_1_0 = (RuleCall)cOriginAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cMassKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cMassAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cMassMassParserRuleCall_3_1_0 = (RuleCall)cMassAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cInertiaKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cInertiaAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cInertiaInertiaParserRuleCall_4_1_0 = (RuleCall)cInertiaAssignment_4_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Inertial returns Inertial:
		//    {Inertial}
		//    BEGIN
		//        ('origin:' origin=Pose)?
		//        ('mass:' mass=Mass)?
		//        ('inertia:' inertia=Inertia)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Inertial}
		//BEGIN
		//    ('origin:' origin=Pose)?
		//    ('mass:' mass=Mass)?
		//    ('inertia:' inertia=Inertia)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{Inertial}
		public Action getInertialAction_0() { return cInertialAction_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//('origin:' origin=Pose)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'origin:'
		public Keyword getOriginKeyword_2_0() { return cOriginKeyword_2_0; }
		
		//origin=Pose
		public Assignment getOriginAssignment_2_1() { return cOriginAssignment_2_1; }
		
		//Pose
		public RuleCall getOriginPoseParserRuleCall_2_1_0() { return cOriginPoseParserRuleCall_2_1_0; }
		
		//('mass:' mass=Mass)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'mass:'
		public Keyword getMassKeyword_3_0() { return cMassKeyword_3_0; }
		
		//mass=Mass
		public Assignment getMassAssignment_3_1() { return cMassAssignment_3_1; }
		
		//Mass
		public RuleCall getMassMassParserRuleCall_3_1_0() { return cMassMassParserRuleCall_3_1_0; }
		
		//('inertia:' inertia=Inertia)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'inertia:'
		public Keyword getInertiaKeyword_4_0() { return cInertiaKeyword_4_0; }
		
		//inertia=Inertia
		public Assignment getInertiaAssignment_4_1() { return cInertiaAssignment_4_1; }
		
		//Inertia
		public RuleCall getInertiaInertiaParserRuleCall_4_1_0() { return cInertiaInertiaParserRuleCall_4_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class VisualElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Visual");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOriginKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOriginAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOriginPoseParserRuleCall_1_1_0 = (RuleCall)cOriginAssignment_1_1.eContents().get(0);
		private final Keyword cGeometryKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGeometryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGeometryGeometryParserRuleCall_3_0 = (RuleCall)cGeometryAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Visual returns Visual:
		//    BEGIN
		//        ('origin:' origin=Pose)?
		//        'geometry:' geometry=Geometry
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//BEGIN
		//    ('origin:' origin=Pose)?
		//    'geometry:' geometry=Geometry
		//END
		public Group getGroup() { return cGroup; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_0() { return cBEGINTerminalRuleCall_0; }
		
		//('origin:' origin=Pose)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'origin:'
		public Keyword getOriginKeyword_1_0() { return cOriginKeyword_1_0; }
		
		//origin=Pose
		public Assignment getOriginAssignment_1_1() { return cOriginAssignment_1_1; }
		
		//Pose
		public RuleCall getOriginPoseParserRuleCall_1_1_0() { return cOriginPoseParserRuleCall_1_1_0; }
		
		//'geometry:'
		public Keyword getGeometryKeyword_2() { return cGeometryKeyword_2; }
		
		//geometry=Geometry
		public Assignment getGeometryAssignment_3() { return cGeometryAssignment_3; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_3_0() { return cGeometryGeometryParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class CollisionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Collision");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOriginKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cOriginAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cOriginPoseParserRuleCall_1_1_0 = (RuleCall)cOriginAssignment_1_1.eContents().get(0);
		private final Keyword cGeometryKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cGeometryAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cGeometryGeometryParserRuleCall_3_0 = (RuleCall)cGeometryAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Collision returns Collision:
		//    BEGIN
		//        ('origin:' origin=Pose)?
		//        'geometry:' geometry=Geometry
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//BEGIN
		//    ('origin:' origin=Pose)?
		//    'geometry:' geometry=Geometry
		//END
		public Group getGroup() { return cGroup; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_0() { return cBEGINTerminalRuleCall_0; }
		
		//('origin:' origin=Pose)?
		public Group getGroup_1() { return cGroup_1; }
		
		//'origin:'
		public Keyword getOriginKeyword_1_0() { return cOriginKeyword_1_0; }
		
		//origin=Pose
		public Assignment getOriginAssignment_1_1() { return cOriginAssignment_1_1; }
		
		//Pose
		public RuleCall getOriginPoseParserRuleCall_1_1_0() { return cOriginPoseParserRuleCall_1_1_0; }
		
		//'geometry:'
		public Keyword getGeometryKeyword_2() { return cGeometryKeyword_2; }
		
		//geometry=Geometry
		public Assignment getGeometryAssignment_3() { return cGeometryAssignment_3; }
		
		//Geometry
		public RuleCall getGeometryGeometryParserRuleCall_3_0() { return cGeometryGeometryParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class MassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Mass");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMassAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueDouble0ParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//Mass returns Mass:
		//    {Mass}
		//    value=Double0;
		@Override public ParserRule getRule() { return rule; }
		
		//{Mass}
		//value=Double0
		public Group getGroup() { return cGroup; }
		
		//{Mass}
		public Action getMassAction_0() { return cMassAction_0; }
		
		//value=Double0
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }
		
		//Double0
		public RuleCall getValueDouble0ParserRuleCall_1_0() { return cValueDouble0ParserRuleCall_1_0; }
	}
	public class InertiaElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Inertia");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cInertiaAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cIxxKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cIxxAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cIxxDouble0ParserRuleCall_2_1_0 = (RuleCall)cIxxAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cIxyKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cIxyAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cIxyDouble0ParserRuleCall_3_1_0 = (RuleCall)cIxyAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cIxzKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cIxzAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cIxzDouble0ParserRuleCall_4_1_0 = (RuleCall)cIxzAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cIyyKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cIyyAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cIyyDouble0ParserRuleCall_5_1_0 = (RuleCall)cIyyAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cIyzKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cIyzAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cIyzDouble0ParserRuleCall_6_1_0 = (RuleCall)cIyzAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cIzzKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cIzzAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cIzzDouble0ParserRuleCall_7_1_0 = (RuleCall)cIzzAssignment_7_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_8 = (RuleCall)cGroup.eContents().get(8);
		
		//Inertia returns Inertia:
		//    {Inertia}
		//    BEGIN
		//        ('ixx:' ixx=Double0)?
		//        ('ixy:' ixy=Double0)?
		//        ('ixz:' ixz=Double0)?
		//        ('iyy:' iyy=Double0)?
		//        ('iyz:' iyz=Double0)?
		//        ('izz:' izz=Double0)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Inertia}
		//BEGIN
		//    ('ixx:' ixx=Double0)?
		//    ('ixy:' ixy=Double0)?
		//    ('ixz:' ixz=Double0)?
		//    ('iyy:' iyy=Double0)?
		//    ('iyz:' iyz=Double0)?
		//    ('izz:' izz=Double0)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{Inertia}
		public Action getInertiaAction_0() { return cInertiaAction_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//('ixx:' ixx=Double0)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'ixx:'
		public Keyword getIxxKeyword_2_0() { return cIxxKeyword_2_0; }
		
		//ixx=Double0
		public Assignment getIxxAssignment_2_1() { return cIxxAssignment_2_1; }
		
		//Double0
		public RuleCall getIxxDouble0ParserRuleCall_2_1_0() { return cIxxDouble0ParserRuleCall_2_1_0; }
		
		//('ixy:' ixy=Double0)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'ixy:'
		public Keyword getIxyKeyword_3_0() { return cIxyKeyword_3_0; }
		
		//ixy=Double0
		public Assignment getIxyAssignment_3_1() { return cIxyAssignment_3_1; }
		
		//Double0
		public RuleCall getIxyDouble0ParserRuleCall_3_1_0() { return cIxyDouble0ParserRuleCall_3_1_0; }
		
		//('ixz:' ixz=Double0)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'ixz:'
		public Keyword getIxzKeyword_4_0() { return cIxzKeyword_4_0; }
		
		//ixz=Double0
		public Assignment getIxzAssignment_4_1() { return cIxzAssignment_4_1; }
		
		//Double0
		public RuleCall getIxzDouble0ParserRuleCall_4_1_0() { return cIxzDouble0ParserRuleCall_4_1_0; }
		
		//('iyy:' iyy=Double0)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'iyy:'
		public Keyword getIyyKeyword_5_0() { return cIyyKeyword_5_0; }
		
		//iyy=Double0
		public Assignment getIyyAssignment_5_1() { return cIyyAssignment_5_1; }
		
		//Double0
		public RuleCall getIyyDouble0ParserRuleCall_5_1_0() { return cIyyDouble0ParserRuleCall_5_1_0; }
		
		//('iyz:' iyz=Double0)?
		public Group getGroup_6() { return cGroup_6; }
		
		//'iyz:'
		public Keyword getIyzKeyword_6_0() { return cIyzKeyword_6_0; }
		
		//iyz=Double0
		public Assignment getIyzAssignment_6_1() { return cIyzAssignment_6_1; }
		
		//Double0
		public RuleCall getIyzDouble0ParserRuleCall_6_1_0() { return cIyzDouble0ParserRuleCall_6_1_0; }
		
		//('izz:' izz=Double0)?
		public Group getGroup_7() { return cGroup_7; }
		
		//'izz:'
		public Keyword getIzzKeyword_7_0() { return cIzzKeyword_7_0; }
		
		//izz=Double0
		public Assignment getIzzAssignment_7_1() { return cIzzAssignment_7_1; }
		
		//Double0
		public RuleCall getIzzDouble0ParserRuleCall_7_1_0() { return cIzzDouble0ParserRuleCall_7_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_8() { return cENDTerminalRuleCall_8; }
	}
	public class GeometryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Geometry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cGeometryAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cBoxKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cBoxAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cBoxBoxParserRuleCall_2_1_0 = (RuleCall)cBoxAssignment_2_1.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cCylinderKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cCylinderAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cCylinderCylinderParserRuleCall_3_1_0 = (RuleCall)cCylinderAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSphereKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cSphereAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSphereSphereParserRuleCall_4_1_0 = (RuleCall)cSphereAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cMeshKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cMeshAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cMeshMeshParserRuleCall_5_1_0 = (RuleCall)cMeshAssignment_5_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//Geometry returns Geometry:
		//    {Geometry}
		//    BEGIN
		//        ('box:' box=Box)?
		//        ('cylinder:' cylinder=Cylinder)?
		//        ('sphere:' sphere=Sphere)?
		//        ('mesh:' mesh=Mesh)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Geometry}
		//BEGIN
		//    ('box:' box=Box)?
		//    ('cylinder:' cylinder=Cylinder)?
		//    ('sphere:' sphere=Sphere)?
		//    ('mesh:' mesh=Mesh)?
		//END
		public Group getGroup() { return cGroup; }
		
		//{Geometry}
		public Action getGeometryAction_0() { return cGeometryAction_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//('box:' box=Box)?
		public Group getGroup_2() { return cGroup_2; }
		
		//'box:'
		public Keyword getBoxKeyword_2_0() { return cBoxKeyword_2_0; }
		
		//box=Box
		public Assignment getBoxAssignment_2_1() { return cBoxAssignment_2_1; }
		
		//Box
		public RuleCall getBoxBoxParserRuleCall_2_1_0() { return cBoxBoxParserRuleCall_2_1_0; }
		
		//('cylinder:' cylinder=Cylinder)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'cylinder:'
		public Keyword getCylinderKeyword_3_0() { return cCylinderKeyword_3_0; }
		
		//cylinder=Cylinder
		public Assignment getCylinderAssignment_3_1() { return cCylinderAssignment_3_1; }
		
		//Cylinder
		public RuleCall getCylinderCylinderParserRuleCall_3_1_0() { return cCylinderCylinderParserRuleCall_3_1_0; }
		
		//('sphere:' sphere=Sphere)?
		public Group getGroup_4() { return cGroup_4; }
		
		//'sphere:'
		public Keyword getSphereKeyword_4_0() { return cSphereKeyword_4_0; }
		
		//sphere=Sphere
		public Assignment getSphereAssignment_4_1() { return cSphereAssignment_4_1; }
		
		//Sphere
		public RuleCall getSphereSphereParserRuleCall_4_1_0() { return cSphereSphereParserRuleCall_4_1_0; }
		
		//('mesh:' mesh=Mesh)?
		public Group getGroup_5() { return cGroup_5; }
		
		//'mesh:'
		public Keyword getMeshKeyword_5_0() { return cMeshKeyword_5_0; }
		
		//mesh=Mesh
		public Assignment getMeshAssignment_5_1() { return cMeshAssignment_5_1; }
		
		//Mesh
		public RuleCall getMeshMeshParserRuleCall_5_1_0() { return cMeshMeshParserRuleCall_5_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_6() { return cENDTerminalRuleCall_6; }
	}
	public class BoxElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Box");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBoxAction_0 = (Action)cGroup.eContents().get(0);
		private final RuleCall cBEGINTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cSizeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSizeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSizeParameterStringParserRuleCall_3_0 = (RuleCall)cSizeAssignment_3.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Box returns Box:
		//    {Box}
		//    BEGIN
		//        'size' size=ParameterString
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//{Box}
		//BEGIN
		//    'size' size=ParameterString
		//END
		public Group getGroup() { return cGroup; }
		
		//{Box}
		public Action getBoxAction_0() { return cBoxAction_0; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_1() { return cBEGINTerminalRuleCall_1; }
		
		//'size'
		public Keyword getSizeKeyword_2() { return cSizeKeyword_2; }
		
		//size=ParameterString
		public Assignment getSizeAssignment_3() { return cSizeAssignment_3; }
		
		//ParameterString
		public RuleCall getSizeParameterStringParserRuleCall_3_0() { return cSizeParameterStringParserRuleCall_3_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class CylinderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Cylinder");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLengthKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLengthAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLengthDouble0ParserRuleCall_2_0 = (RuleCall)cLengthAssignment_2.eContents().get(0);
		private final Keyword cRadiusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cRadiusAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cRadiusDouble0ParserRuleCall_4_0 = (RuleCall)cRadiusAssignment_4.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		
		//Cylinder returns Cylinder:
		//    BEGIN
		//        'length:' length=Double0
		//        'radius:' radius=Double0
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//BEGIN
		//    'length:' length=Double0
		//    'radius:' radius=Double0
		//END
		public Group getGroup() { return cGroup; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_0() { return cBEGINTerminalRuleCall_0; }
		
		//'length:'
		public Keyword getLengthKeyword_1() { return cLengthKeyword_1; }
		
		//length=Double0
		public Assignment getLengthAssignment_2() { return cLengthAssignment_2; }
		
		//Double0
		public RuleCall getLengthDouble0ParserRuleCall_2_0() { return cLengthDouble0ParserRuleCall_2_0; }
		
		//'radius:'
		public Keyword getRadiusKeyword_3() { return cRadiusKeyword_3; }
		
		//radius=Double0
		public Assignment getRadiusAssignment_4() { return cRadiusAssignment_4; }
		
		//Double0
		public RuleCall getRadiusDouble0ParserRuleCall_4_0() { return cRadiusDouble0ParserRuleCall_4_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_5() { return cENDTerminalRuleCall_5; }
	}
	public class SphereElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Sphere");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cRadiusKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cRadiusAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRadiusDouble0ParserRuleCall_2_0 = (RuleCall)cRadiusAssignment_2.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		
		//Sphere returns Sphere:
		//    BEGIN
		//        'radius:' radius=Double0
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//BEGIN
		//    'radius:' radius=Double0
		//END
		public Group getGroup() { return cGroup; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_0() { return cBEGINTerminalRuleCall_0; }
		
		//'radius:'
		public Keyword getRadiusKeyword_1() { return cRadiusKeyword_1; }
		
		//radius=Double0
		public Assignment getRadiusAssignment_2() { return cRadiusAssignment_2; }
		
		//Double0
		public RuleCall getRadiusDouble0ParserRuleCall_2_0() { return cRadiusDouble0ParserRuleCall_2_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_3() { return cENDTerminalRuleCall_3; }
	}
	public class MeshElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Mesh");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cBEGINTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFilenameKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cFilenameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_2_0 = (RuleCall)cFilenameAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cScaleKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cScaleAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cScaleDouble0ParserRuleCall_3_1_0 = (RuleCall)cScaleAssignment_3_1.eContents().get(0);
		private final RuleCall cENDTerminalRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		
		//Mesh returns Mesh:
		//    BEGIN
		//        'filename:' filename=STRING
		//        ('scale:' scale=Double0)?
		//    END;
		@Override public ParserRule getRule() { return rule; }
		
		//BEGIN
		//    'filename:' filename=STRING
		//    ('scale:' scale=Double0)?
		//END
		public Group getGroup() { return cGroup; }
		
		//BEGIN
		public RuleCall getBEGINTerminalRuleCall_0() { return cBEGINTerminalRuleCall_0; }
		
		//'filename:'
		public Keyword getFilenameKeyword_1() { return cFilenameKeyword_1; }
		
		//filename=STRING
		public Assignment getFilenameAssignment_2() { return cFilenameAssignment_2; }
		
		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_2_0() { return cFilenameSTRINGTerminalRuleCall_2_0; }
		
		//('scale:' scale=Double0)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'scale:'
		public Keyword getScaleKeyword_3_0() { return cScaleKeyword_3_0; }
		
		//scale=Double0
		public Assignment getScaleAssignment_3_1() { return cScaleAssignment_3_1; }
		
		//Double0
		public RuleCall getScaleDouble0ParserRuleCall_3_1_0() { return cScaleDouble0ParserRuleCall_3_1_0; }
		
		//END
		public RuleCall getENDTerminalRuleCall_4() { return cENDTerminalRuleCall_4; }
	}
	public class AnyURIElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.AnyURI");
		private final Keyword cAnyURIKeyword = (Keyword)rule.eContents().get(1);
		
		//AnyURI returns type::AnyURI:
		//    'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;
		@Override public ParserRule getRule() { return rule; }
		
		//'AnyURI'
		public Keyword getAnyURIKeyword() { return cAnyURIKeyword; }
	}
	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.EString");
		private final RuleCall cSTRINGTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//EString returns ecore::EString:
		//    STRING
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall() { return cSTRINGTerminalRuleCall; }
	}
	public class Double0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Double0");
		private final RuleCall cDOUBLETerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Double0 returns type::Double:
		//    DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall() { return cDOUBLETerminalRuleCall; }
	}
	public class Integer0Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.Integer0");
		private final RuleCall cDECINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Integer0 returns type::Int:
		//    DECINT;
		@Override public ParserRule getRule() { return rule; }
		
		//DECINT
		public RuleCall getDECINTTerminalRuleCall() { return cDECINTTerminalRuleCall; }
	}
	
	
	private final RobotElements pRobot;
	private final MacroElements pMacro;
	private final ParameterElements pParameter;
	private final ParameterValueElements pParameterValue;
	private final LinkRefElements pLinkRef;
	private final ParameterStringElements pParameterString;
	private final ParameterPoseElements pParameterPose;
	private final ParameterLinkElements pParameterLink;
	private final ParameterTypeElements pParameterType;
	private final ParameterStringTypeElements pParameterStringType;
	private final ParameterLinkRefTypeElements pParameterLinkRefType;
	private final ParameterPoseTypeElements pParameterPoseType;
	private final BodyElements pBody;
	private final MacroCallElements pMacroCall;
	private final ParameterCallElements pParameterCall;
	private final JointElements pJoint;
	private final LinkElements pLink;
	private final PoseElements pPose;
	private final Vector3Elements pVector3;
	private final LimitElements pLimit;
	private final InertialElements pInertial;
	private final VisualElements pVisual;
	private final CollisionElements pCollision;
	private final MassElements pMass;
	private final InertiaElements pInertia;
	private final GeometryElements pGeometry;
	private final BoxElements pBox;
	private final CylinderElements pCylinder;
	private final SphereElements pSphere;
	private final MeshElements pMesh;
	private final AnyURIElements pAnyURI;
	private final EStringElements pEString;
	private final TerminalRule tDIGIT;
	private final TerminalRule tBOOLEAN;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tDECINT;
	private final TerminalRule tJOINTTYPE;
	private final TerminalRule tBEGIN;
	private final TerminalRule tEND;
	private final TerminalRule tSL_COMMENT;
	private final Double0Elements pDouble0;
	private final Integer0Elements pInteger0;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public KinematicsGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRobot = new RobotElements();
		this.pMacro = new MacroElements();
		this.pParameter = new ParameterElements();
		this.pParameterValue = new ParameterValueElements();
		this.pLinkRef = new LinkRefElements();
		this.pParameterString = new ParameterStringElements();
		this.pParameterPose = new ParameterPoseElements();
		this.pParameterLink = new ParameterLinkElements();
		this.pParameterType = new ParameterTypeElements();
		this.pParameterStringType = new ParameterStringTypeElements();
		this.pParameterLinkRefType = new ParameterLinkRefTypeElements();
		this.pParameterPoseType = new ParameterPoseTypeElements();
		this.pBody = new BodyElements();
		this.pMacroCall = new MacroCallElements();
		this.pParameterCall = new ParameterCallElements();
		this.pJoint = new JointElements();
		this.pLink = new LinkElements();
		this.pPose = new PoseElements();
		this.pVector3 = new Vector3Elements();
		this.pLimit = new LimitElements();
		this.pInertial = new InertialElements();
		this.pVisual = new VisualElements();
		this.pCollision = new CollisionElements();
		this.pMass = new MassElements();
		this.pInertia = new InertiaElements();
		this.pGeometry = new GeometryElements();
		this.pBox = new BoxElements();
		this.pCylinder = new CylinderElements();
		this.pSphere = new SphereElements();
		this.pMesh = new MeshElements();
		this.pAnyURI = new AnyURIElements();
		this.pEString = new EStringElements();
		this.tDIGIT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.DIGIT");
		this.tBOOLEAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.BOOLEAN");
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.DOUBLE");
		this.tDECINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.DECINT");
		this.tJOINTTYPE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.JOINTTYPE");
		this.tBEGIN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.BEGIN");
		this.tEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.END");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "de.fraunhofer.ipa.kinematics.Kinematics.SL_COMMENT");
		this.pDouble0 = new Double0Elements();
		this.pInteger0 = new Integer0Elements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.fraunhofer.ipa.kinematics.Kinematics".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Robot returns Robot:
	//    {Robot}
	//    'robot:'
	//    BEGIN
	//        'name:' name=ID
	//        ('version:' version=STRING)?
	//        ('macros:'
	//            macro+=Macro*
	//        )?
	//        ('macroCalls:'
	//            macroCall+=MacroCall*
	//        )?
	//        ('body:'
	//            BEGIN
	//            body=Body
	//            END
	//        )?
	//    END;
	public RobotElements getRobotAccess() {
		return pRobot;
	}
	
	public ParserRule getRobotRule() {
		return getRobotAccess().getRule();
	}
	
	//Macro returns Macro:
	//    '-' name=ID ':'
	//    BEGIN
	//        ('parameters:'
	//            parameter+=Parameter*
	//        )?
	//        ('body:'
	//            BEGIN
	//            body=Body
	//            END
	//        )?
	//    END;
	public MacroElements getMacroAccess() {
		return pMacro;
	}
	
	public ParserRule getMacroRule() {
		return getMacroAccess().getRule();
	}
	
	//Parameter returns Parameter:
	//    {Parameter}
	//    '-' name=ID ':'
	//    BEGIN
	//        'type:' type=ParameterType
	//        ('default' value=ParameterValue)?
	//    END;
	public ParameterElements getParameterAccess() {
		return pParameter;
	}
	
	public ParserRule getParameterRule() {
		return getParameterAccess().getRule();
	}
	
	//ParameterValue returns ParameterValue:
	//    value=ID | Pose | LinkRef
	//;
	public ParameterValueElements getParameterValueAccess() {
		return pParameterValue;
	}
	
	public ParserRule getParameterValueRule() {
		return getParameterValueAccess().getRule();
	}
	
	//LinkRef returns LinkRef:
	//    ref=[Link|STRING]
	//;
	public LinkRefElements getLinkRefAccess() {
		return pLinkRef;
	}
	
	public ParserRule getLinkRefRule() {
		return getLinkRefAccess().getRule();
	}
	
	//ParameterString returns ParameterString:
	//    {ParameterString} ref=([Parameter|STRING])? (value=ID)?
	//;
	public ParameterStringElements getParameterStringAccess() {
		return pParameterString;
	}
	
	public ParserRule getParameterStringRule() {
		return getParameterStringAccess().getRule();
	}
	
	//ParameterPose returns ParameterPose:
	//    ref=[Parameter|STRING] | value=Pose
	//;
	public ParameterPoseElements getParameterPoseAccess() {
		return pParameterPose;
	}
	
	public ParserRule getParameterPoseRule() {
		return getParameterPoseAccess().getRule();
	}
	
	//ParameterLink returns ParameterLink:
	//    param=[Parameter] | link=[Link|STRING]
	//;
	public ParameterLinkElements getParameterLinkAccess() {
		return pParameterLink;
	}
	
	public ParserRule getParameterLinkRule() {
		return getParameterLinkAccess().getRule();
	}
	
	//ParameterType returns ParameterType:
	//    ParameterStringType | ParameterLinkRefType | ParameterPoseType
	//;
	public ParameterTypeElements getParameterTypeAccess() {
		return pParameterType;
	}
	
	public ParserRule getParameterTypeRule() {
		return getParameterTypeAccess().getRule();
	}
	
	//ParameterStringType returns ParameterStringType:
	//    {ParameterStringType}
	//    'String'
	//;
	public ParameterStringTypeElements getParameterStringTypeAccess() {
		return pParameterStringType;
	}
	
	public ParserRule getParameterStringTypeRule() {
		return getParameterStringTypeAccess().getRule();
	}
	
	//ParameterLinkRefType returns ParameterLinkRefType:
	//    {ParameterLinkRefType}
	//    'LinkRef'
	//;
	public ParameterLinkRefTypeElements getParameterLinkRefTypeAccess() {
		return pParameterLinkRefType;
	}
	
	public ParserRule getParameterLinkRefTypeRule() {
		return getParameterLinkRefTypeAccess().getRule();
	}
	
	//ParameterPoseType returns ParameterPoseType:
	//    {ParameterPoseType}
	//    'Pose'
	//;
	public ParameterPoseTypeElements getParameterPoseTypeAccess() {
		return pParameterPoseType;
	}
	
	public ParserRule getParameterPoseTypeRule() {
		return getParameterPoseTypeAccess().getRule();
	}
	
	//Body returns Body:
	//    {Body}
	//    ('links:' link+=Link*)?
	//    ('joints:' joint+=Joint* )?;
	public BodyElements getBodyAccess() {
		return pBody;
	}
	
	public ParserRule getBodyRule() {
		return getBodyAccess().getRule();
	}
	
	//MacroCall returns MacroCall:
	//    {MacroCall}
	//    '-' macro=[Macro|STRING] ':'
	//    BEGIN
	//        parameterCall+=ParameterCall*
	//    END;
	public MacroCallElements getMacroCallAccess() {
		return pMacroCall;
	}
	
	public ParserRule getMacroCallRule() {
		return getMacroCallAccess().getRule();
	}
	
	//ParameterCall returns ParameterCall:
	//    {ParameterCall}
	//    '-' parameter=[Parameter|STRING] ':'
	//    BEGIN
	//        'value' value=ParameterValue
	//    END;
	public ParameterCallElements getParameterCallAccess() {
		return pParameterCall;
	}
	
	public ParserRule getParameterCallRule() {
		return getParameterCallAccess().getRule();
	}
	
	//Joint returns Joint:
	//    '-' name=ParameterString ':'
	//    BEGIN
	//        'type:' type=JOINTTYPE
	//        'parent:' parent=ParameterLink
	//        'child:' child=ParameterLink
	//        'origin:' origin=ParameterPose
	//        ('axis:' axis=Vector3)?
	//        ('limit:' limit=Limit)?
	//    END;
	public JointElements getJointAccess() {
		return pJoint;
	}
	
	public ParserRule getJointRule() {
		return getJointAccess().getRule();
	}
	
	//Link returns Link:
	//    '-' name=ParameterString
	//    (':' BEGIN
	//        ('inertial:' inertial=Inertial)?
	//        ('visual:' visual=Visual)?
	//        ('collision:' collision=Collision)?
	//    END)?;
	public LinkElements getLinkAccess() {
		return pLink;
	}
	
	public ParserRule getLinkRule() {
		return getLinkAccess().getRule();
	}
	
	//Pose returns Pose:
	//    {Pose}
	//    BEGIN
	//        ('rpy:' rpy=STRING)?
	//        ('xyz:' xyz=STRING)?
	//    END;
	public PoseElements getPoseAccess() {
		return pPose;
	}
	
	public ParserRule getPoseRule() {
		return getPoseAccess().getRule();
	}
	
	//Vector3 returns Vector3:
	//    {Vector3}
	//    BEGIN
	//        ('xyz:' xyz=STRING)?
	//    END;
	public Vector3Elements getVector3Access() {
		return pVector3;
	}
	
	public ParserRule getVector3Rule() {
		return getVector3Access().getRule();
	}
	
	//Limit returns Limit:
	//    {Limit}
	//    BEGIN
	//        ('effort:' effort=STRING)?
	//        ('lower:' lower=STRING)?
	//        ('upper:' upper=STRING)?
	//        ('velocity:' velocity=STRING)?
	//    END;
	public LimitElements getLimitAccess() {
		return pLimit;
	}
	
	public ParserRule getLimitRule() {
		return getLimitAccess().getRule();
	}
	
	//Inertial returns Inertial:
	//    {Inertial}
	//    BEGIN
	//        ('origin:' origin=Pose)?
	//        ('mass:' mass=Mass)?
	//        ('inertia:' inertia=Inertia)?
	//    END;
	public InertialElements getInertialAccess() {
		return pInertial;
	}
	
	public ParserRule getInertialRule() {
		return getInertialAccess().getRule();
	}
	
	//Visual returns Visual:
	//    BEGIN
	//        ('origin:' origin=Pose)?
	//        'geometry:' geometry=Geometry
	//    END;
	public VisualElements getVisualAccess() {
		return pVisual;
	}
	
	public ParserRule getVisualRule() {
		return getVisualAccess().getRule();
	}
	
	//Collision returns Collision:
	//    BEGIN
	//        ('origin:' origin=Pose)?
	//        'geometry:' geometry=Geometry
	//    END;
	public CollisionElements getCollisionAccess() {
		return pCollision;
	}
	
	public ParserRule getCollisionRule() {
		return getCollisionAccess().getRule();
	}
	
	//Mass returns Mass:
	//    {Mass}
	//    value=Double0;
	public MassElements getMassAccess() {
		return pMass;
	}
	
	public ParserRule getMassRule() {
		return getMassAccess().getRule();
	}
	
	//Inertia returns Inertia:
	//    {Inertia}
	//    BEGIN
	//        ('ixx:' ixx=Double0)?
	//        ('ixy:' ixy=Double0)?
	//        ('ixz:' ixz=Double0)?
	//        ('iyy:' iyy=Double0)?
	//        ('iyz:' iyz=Double0)?
	//        ('izz:' izz=Double0)?
	//    END;
	public InertiaElements getInertiaAccess() {
		return pInertia;
	}
	
	public ParserRule getInertiaRule() {
		return getInertiaAccess().getRule();
	}
	
	//Geometry returns Geometry:
	//    {Geometry}
	//    BEGIN
	//        ('box:' box=Box)?
	//        ('cylinder:' cylinder=Cylinder)?
	//        ('sphere:' sphere=Sphere)?
	//        ('mesh:' mesh=Mesh)?
	//    END;
	public GeometryElements getGeometryAccess() {
		return pGeometry;
	}
	
	public ParserRule getGeometryRule() {
		return getGeometryAccess().getRule();
	}
	
	//Box returns Box:
	//    {Box}
	//    BEGIN
	//        'size' size=ParameterString
	//    END;
	public BoxElements getBoxAccess() {
		return pBox;
	}
	
	public ParserRule getBoxRule() {
		return getBoxAccess().getRule();
	}
	
	//Cylinder returns Cylinder:
	//    BEGIN
	//        'length:' length=Double0
	//        'radius:' radius=Double0
	//    END;
	public CylinderElements getCylinderAccess() {
		return pCylinder;
	}
	
	public ParserRule getCylinderRule() {
		return getCylinderAccess().getRule();
	}
	
	//Sphere returns Sphere:
	//    BEGIN
	//        'radius:' radius=Double0
	//    END;
	public SphereElements getSphereAccess() {
		return pSphere;
	}
	
	public ParserRule getSphereRule() {
		return getSphereAccess().getRule();
	}
	
	//Mesh returns Mesh:
	//    BEGIN
	//        'filename:' filename=STRING
	//        ('scale:' scale=Double0)?
	//    END;
	public MeshElements getMeshAccess() {
		return pMesh;
	}
	
	public ParserRule getMeshRule() {
		return getMeshAccess().getRule();
	}
	
	//AnyURI returns type::AnyURI:
	//    'AnyURI' /* TODO: implement this rule and an appropriate IValueConverter */;
	public AnyURIElements getAnyURIAccess() {
		return pAnyURI;
	}
	
	public ParserRule getAnyURIRule() {
		return getAnyURIAccess().getRule();
	}
	
	//EString returns ecore::EString:
	//    STRING
	//;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}
	
	//// from https://github.com/ipa320/ros-model/blob/e9279c9eab1c5d2554f239e80150f2df1bbb5ab3/plugins/de.fraunhofer.ipa.rossystem.xtext/src/de/fraunhofer/ipa/rossystem/RosSystem.xtext#L283-L307
	//terminal fragment DIGIT: '0'..'9';
	public TerminalRule getDIGITRule() {
		return tDIGIT;
	}
	
	//terminal BOOLEAN: 'true'|'false';
	public TerminalRule getBOOLEANRule() {
		return tBOOLEAN;
	}
	
	//terminal DOUBLE returns ecore::EDouble: DECINT (('.' DIGIT*) | (('.' DIGIT*)? ('E'|'e') ('-'|'+')? DECINT));
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//  // Use terminal to avoid 'e' turning into a keyword
	//terminal DECINT: '0' | ('1'..'9' DIGIT*) | ('-''0'..'9' DIGIT*) ;
	public TerminalRule getDECINTRule() {
		return tDECINT;
	}
	
	//terminal JOINTTYPE: 'revolute' | 'continuous' | 'prismatic' | 'fixed' | 'floating' | 'planar';
	public TerminalRule getJOINTTYPERule() {
		return tJOINTTYPE;
	}
	
	/////////////////////
	//// YAML format
	/////////////////////
	//terminal BEGIN: 'synthetic:BEGIN';
	public TerminalRule getBEGINRule() {
		return tBEGIN;
	}
	
	//terminal END: 'synthetic:END';
	public TerminalRule getENDRule() {
		return tEND;
	}
	
	//@Override
	//terminal SL_COMMENT: '#' !('\n'|'\r')*;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//Double0 returns type::Double:
	//    DOUBLE;
	public Double0Elements getDouble0Access() {
		return pDouble0;
	}
	
	public ParserRule getDouble0Rule() {
		return getDouble0Access().getRule();
	}
	
	//Integer0 returns type::Int:
	//    DECINT;
	public Integer0Elements getInteger0Access() {
		return pInteger0;
	}
	
	public ParserRule getInteger0Rule() {
		return getInteger0Access().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
