/*
 * generated by Xtext 2.26.0
 */
package de.fraunhofer.ipa.kinematics.serializer;

import com.google.inject.Inject;
import de.fraunhofer.ipa.kinematics.services.KinematicsGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import urdf.Axis;
import urdf.Box;
import urdf.Collision;
import urdf.Cylinder;
import urdf.Geometry;
import urdf.Inertia;
import urdf.Inertial;
import urdf.Joint;
import urdf.Limit;
import urdf.Link;
import urdf.Mass;
import urdf.Mesh;
import urdf.Pose;
import urdf.Sphere;
import urdf.UrdfPackage;
import urdf.Visual;
import xacro.XacroPackage;
import xacro.XacroRobot;

@SuppressWarnings("all")
public class KinematicsSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private KinematicsGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == UrdfPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case UrdfPackage.AXIS:
				sequence_Axis(context, (Axis) semanticObject); 
				return; 
			case UrdfPackage.BOX:
				sequence_Box(context, (Box) semanticObject); 
				return; 
			case UrdfPackage.COLLISION:
				sequence_Collision(context, (Collision) semanticObject); 
				return; 
			case UrdfPackage.CYLINDER:
				sequence_Cylinder(context, (Cylinder) semanticObject); 
				return; 
			case UrdfPackage.GEOMETRY:
				sequence_Geometry(context, (Geometry) semanticObject); 
				return; 
			case UrdfPackage.INERTIA:
				sequence_Inertia(context, (Inertia) semanticObject); 
				return; 
			case UrdfPackage.INERTIAL:
				sequence_Inertial(context, (Inertial) semanticObject); 
				return; 
			case UrdfPackage.JOINT:
				sequence_Joint(context, (Joint) semanticObject); 
				return; 
			case UrdfPackage.LIMIT:
				sequence_Limit(context, (Limit) semanticObject); 
				return; 
			case UrdfPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case UrdfPackage.MASS:
				sequence_Mass(context, (Mass) semanticObject); 
				return; 
			case UrdfPackage.MESH:
				sequence_Mesh(context, (Mesh) semanticObject); 
				return; 
			case UrdfPackage.POSE:
				sequence_Pose(context, (Pose) semanticObject); 
				return; 
			case UrdfPackage.SPHERE:
				sequence_Sphere(context, (Sphere) semanticObject); 
				return; 
			case UrdfPackage.VISUAL:
				sequence_Visual(context, (Visual) semanticObject); 
				return; 
			}
		else if (epackage == XacroPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case XacroPackage.PARAMETER:
				sequence_Parameter(context, (xacro.Parameter) semanticObject); 
				return; 
			case XacroPackage.XACRO_ROBOT:
				sequence_Robot(context, (XacroRobot) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * <pre>
	 * Contexts:
	 *     Axis returns Axis
	 *
	 * Constraint:
	 *     xyz=EString?
	 * </pre>
	 */
	protected void sequence_Axis(ISerializationContext context, Axis semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Box returns Box
	 *
	 * Constraint:
	 *     size=EString?
	 * </pre>
	 */
	protected void sequence_Box(ISerializationContext context, Box semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Collision returns Collision
	 *
	 * Constraint:
	 *     (origin=Pose? geometry=Geometry)
	 * </pre>
	 */
	protected void sequence_Collision(ISerializationContext context, Collision semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Cylinder returns Cylinder
	 *
	 * Constraint:
	 *     (length=Double0 radius=Double0)
	 * </pre>
	 */
	protected void sequence_Cylinder(ISerializationContext context, Cylinder semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UrdfPackage.Literals.CYLINDER__LENGTH) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UrdfPackage.Literals.CYLINDER__LENGTH));
			if (transientValues.isValueTransient(semanticObject, UrdfPackage.Literals.CYLINDER__RADIUS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UrdfPackage.Literals.CYLINDER__RADIUS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCylinderAccess().getLengthDouble0ParserRuleCall_3_0(), semanticObject.getLength());
		feeder.accept(grammarAccess.getCylinderAccess().getRadiusDouble0ParserRuleCall_5_0(), semanticObject.getRadius());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Geometry returns Geometry
	 *
	 * Constraint:
	 *     (box=Box? cylinder=Cylinder? sphere=Sphere? mesh=Mesh?)
	 * </pre>
	 */
	protected void sequence_Geometry(ISerializationContext context, Geometry semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Inertia returns Inertia
	 *
	 * Constraint:
	 *     (
	 *         ixx=Double0? 
	 *         ixy=Double0? 
	 *         ixz=Double0? 
	 *         iyy=Double0? 
	 *         iyz=Double0? 
	 *         izz=Double0?
	 *     )
	 * </pre>
	 */
	protected void sequence_Inertia(ISerializationContext context, Inertia semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Inertial returns Inertial
	 *
	 * Constraint:
	 *     (origin=Pose? mass=Mass? inertia=Inertia?)
	 * </pre>
	 */
	protected void sequence_Inertial(ISerializationContext context, Inertial semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Joint returns Joint
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         type=JOINTTYPE 
	 *         parent=[Link|ID] 
	 *         child=[Link|ID] 
	 *         origin=Pose? 
	 *         axis=Axis? 
	 *         limit=Limit?
	 *     )
	 * </pre>
	 */
	protected void sequence_Joint(ISerializationContext context, Joint semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Limit returns Limit
	 *
	 * Constraint:
	 *     (effort=Double0? lower=Double0? upper=Double0? velocity=Double0?)
	 * </pre>
	 */
	protected void sequence_Limit(ISerializationContext context, Limit semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Link returns Link
	 *
	 * Constraint:
	 *     (name=EString inertial=Inertial? visual=Visual? collision=Collision?)
	 * </pre>
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Mass returns Mass
	 *
	 * Constraint:
	 *     value=Double0?
	 * </pre>
	 */
	protected void sequence_Mass(ISerializationContext context, Mass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Mesh returns Mesh
	 *
	 * Constraint:
	 *     (filename=STRING scale=EString?)
	 * </pre>
	 */
	protected void sequence_Mesh(ISerializationContext context, Mesh semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Parameter returns Parameter
	 *
	 * Constraint:
	 *     name=EString
	 * </pre>
	 */
	protected void sequence_Parameter(ISerializationContext context, xacro.Parameter semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, XacroPackage.Literals.PARAMETER__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, XacroPackage.Literals.PARAMETER__NAME));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getParameterAccess().getNameEStringParserRuleCall_2_0(), semanticObject.getName());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Pose returns Pose
	 *
	 * Constraint:
	 *     (rpy=EString? xyz=EString?)
	 * </pre>
	 */
	protected void sequence_Pose(ISerializationContext context, Pose semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Robot returns XacroRobot
	 *
	 * Constraint:
	 *     {XacroRobot}
	 * </pre>
	 */
	protected void sequence_Robot(ISerializationContext context, XacroRobot semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Sphere returns Sphere
	 *
	 * Constraint:
	 *     radius=Double0
	 * </pre>
	 */
	protected void sequence_Sphere(ISerializationContext context, Sphere semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, UrdfPackage.Literals.SPHERE__RADIUS) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, UrdfPackage.Literals.SPHERE__RADIUS));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getSphereAccess().getRadiusDouble0ParserRuleCall_3_0(), semanticObject.getRadius());
		feeder.finish();
	}
	
	
	/**
	 * <pre>
	 * Contexts:
	 *     Visual returns Visual
	 *
	 * Constraint:
	 *     (origin=Pose? geometry=Geometry)
	 * </pre>
	 */
	protected void sequence_Visual(ISerializationContext context, Visual semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
