/*
 * generated by Xtext 2.26.0
 */
grammar DebugInternalKinematics;

// Rule Robot
ruleRobot:
	'xacrorobot:'
	RULE_BEGIN
	'name:'
	ruleEString
	(
		'macros:'
		ruleMacro
		*
	)?
	RULE_END
;

// Rule Macro
ruleMacro:
	'-'
	'name:'
	ruleEString
	RULE_BEGIN
	(
		'parameters:'
		ruleParameter
		*
	)?
	(
		'link:'
		ruleLink
		*
	)?
	(
		'joint:'
		ruleJoint
		*
	)?
	RULE_END
;

// Rule Parameter
ruleParameter:
	'-'
	'name:'
	ruleEString
	RULE_BEGIN
	'type:'
	ruleParameterType
	(
		'default'
		ruleEString
	)?
	(
		'value'
		ruleEString
	)?
	RULE_END
;

// Rule Joint
ruleJoint:
	'-'
	'name:'
	ruleEString
	RULE_BEGIN
	'type:'
	RULE_JOINTTYPE
	'parent:'
	RULE_ID
	'child:'
	RULE_ID
	'origin:'
	rulePose
	(
		'axis:'
		ruleVector3
	)?
	(
		'limit:'
		ruleLimit
	)?
	RULE_END
;

// Rule Link
ruleLink:
	'-'
	'name:'
	ruleEString
	(
		':'
		RULE_BEGIN
		(
			'inertial:'
			ruleInertial
		)?
		(
			'visual:'
			ruleVisual
		)?
		(
			'collision:'
			ruleCollision
		)?
		RULE_END
	)?
;

// Rule Pose
rulePose:
	RULE_BEGIN
	(
		'rpy:'
		ruleEString
	)?
	(
		'xyz:'
		ruleEString
	)?
	RULE_END
;

// Rule Vector3
ruleVector3:
	RULE_BEGIN
	(
		'xyz:'
		ruleEString
	)?
	RULE_END
;

// Rule Limit
ruleLimit:
	RULE_BEGIN
	(
		'effort:'
		ruleDouble0
	)?
	(
		'lower:'
		ruleDouble0
	)?
	(
		'upper:'
		ruleDouble0
	)?
	(
		'velocity:'
		ruleDouble0
	)?
	RULE_END
;

// Rule Inertial
ruleInertial:
	RULE_BEGIN
	(
		'origin:'
		rulePose
	)?
	(
		'mass:'
		ruleMass
	)?
	(
		'inertia:'
		ruleInertia
	)?
	RULE_END
;

// Rule Visual
ruleVisual:
	RULE_BEGIN
	(
		'origin:'
		rulePose
	)?
	'geometry:'
	ruleGeometry
	RULE_END
;

// Rule Collision
ruleCollision:
	RULE_BEGIN
	(
		'origin:'
		rulePose
	)?
	'geometry:'
	ruleGeometry
	RULE_END
;

// Rule Mass
ruleMass:
	ruleDouble0
;

// Rule Inertia
ruleInertia:
	RULE_BEGIN
	(
		'ixx:'
		ruleDouble0
	)?
	(
		'ixy:'
		ruleDouble0
	)?
	(
		'ixz:'
		ruleDouble0
	)?
	(
		'iyy:'
		ruleDouble0
	)?
	(
		'iyz:'
		ruleDouble0
	)?
	(
		'izz:'
		ruleDouble0
	)?
	RULE_END
;

// Rule Geometry
ruleGeometry:
	RULE_BEGIN
	(
		'box:'
		ruleBox
	)?
	(
		'cylinder:'
		ruleCylinder
	)?
	(
		'sphere:'
		ruleSphere
	)?
	(
		'mesh:'
		ruleMesh
	)?
	RULE_END
;

// Rule Box
ruleBox:
	RULE_BEGIN
	'size'
	ruleEString
	RULE_END
;

// Rule Cylinder
ruleCylinder:
	RULE_BEGIN
	'length:'
	ruleDouble0
	'radius:'
	ruleDouble0
	RULE_END
;

// Rule Sphere
ruleSphere:
	RULE_BEGIN
	'radius:'
	ruleDouble0
	RULE_END
;

// Rule Mesh
ruleMesh:
	RULE_BEGIN
	'filename:'
	ruleEString
	(
		'scale:'
		ruleEString
	)?
	RULE_END
;

// Rule EString
ruleEString:
	RULE_STRING
;

// Rule Double0
ruleDouble0:
	RULE_DOUBLE
;

// Rule ParameterType
ruleParameterType:
	(
		'0'
		    |
		'1'
		    |
		'2'
	)
;

fragment RULE_DIGIT : '0'..'9';

RULE_BOOLEAN : ('true'|'false');

RULE_DOUBLE : RULE_DECINT ('.' RULE_DIGIT*|('.' RULE_DIGIT*)? ('E'|'e') ('-'|'+')? RULE_DECINT);

RULE_DECINT : ('0'|'1'..'9' RULE_DIGIT*|'-' '0'..'9' RULE_DIGIT*);

RULE_JOINTTYPE : ('revolute'|'continuous'|'prismatic'|'fixed'|'floating'|'planar');

fragment RULE_BEGIN : ;

fragment RULE_END : ;

RULE_SL_COMMENT : '#' ~(('\n'|'\r'))* {skip();};

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/' {skip();};

RULE_WS : (' '|'\t'|'\r'|'\n')+ {skip();};

RULE_ANY_OTHER : .;
