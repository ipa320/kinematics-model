/*
 * generated by Xtext 2.26.0
 */
grammar InternalKinematics;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.fraunhofer.ipa.kinematics.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.fraunhofer.ipa.kinematics.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.fraunhofer.ipa.kinematics.services.KinematicsGrammarAccess;

}

@parser::members {

 	private KinematicsGrammarAccess grammarAccess;

    public InternalKinematicsParser(TokenStream input, KinematicsGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Robot";
   	}

   	@Override
   	protected KinematicsGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRobot
entryRuleRobot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRobotRule()); }
	iv_ruleRobot=ruleRobot
	{ $current=$iv_ruleRobot.current; }
	EOF;

// Rule Robot
ruleRobot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRobotAccess().getXacroRobotAction_0(),
					$current);
			}
		)
		otherlv_1='Robot'
		{
			newLeafNode(otherlv_1, grammarAccess.getRobotAccess().getRobotKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getRobotAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getRobotAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleAxis
entryRuleAxis returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAxisRule()); }
	iv_ruleAxis=ruleAxis
	{ $current=$iv_ruleAxis.current; }
	EOF;

// Rule Axis
ruleAxis returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAxisAccess().getAxisAction_0(),
					$current);
			}
		)
		otherlv_1='Axis'
		{
			newLeafNode(otherlv_1, grammarAccess.getAxisAccess().getAxisKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getAxisAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='xyz'
			{
				newLeafNode(otherlv_3, grammarAccess.getAxisAccess().getXyzKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getAxisAccess().getXyzEStringParserRuleCall_3_1_0());
					}
					lv_xyz_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAxisRule());
						}
						set(
							$current,
							"xyz",
							lv_xyz_4_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getAxisAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRulePose
entryRulePose returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPoseRule()); }
	iv_rulePose=rulePose
	{ $current=$iv_rulePose.current; }
	EOF;

// Rule Pose
rulePose returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPoseAccess().getPoseAction_0(),
					$current);
			}
		)
		otherlv_1='Pose'
		{
			newLeafNode(otherlv_1, grammarAccess.getPoseAccess().getPoseKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getPoseAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='rpy'
			{
				newLeafNode(otherlv_3, grammarAccess.getPoseAccess().getRpyKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPoseAccess().getRpyEStringParserRuleCall_3_1_0());
					}
					lv_rpy_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPoseRule());
						}
						set(
							$current,
							"rpy",
							lv_rpy_4_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='xyz'
			{
				newLeafNode(otherlv_5, grammarAccess.getPoseAccess().getXyzKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getPoseAccess().getXyzEStringParserRuleCall_4_1_0());
					}
					lv_xyz_6_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPoseRule());
						}
						set(
							$current,
							"xyz",
							lv_xyz_6_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getPoseAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleLimit
entryRuleLimit returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLimitRule()); }
	iv_ruleLimit=ruleLimit
	{ $current=$iv_ruleLimit.current; }
	EOF;

// Rule Limit
ruleLimit returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLimitAccess().getLimitAction_0(),
					$current);
			}
		)
		otherlv_1='Limit'
		{
			newLeafNode(otherlv_1, grammarAccess.getLimitAccess().getLimitKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getLimitAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='effort'
			{
				newLeafNode(otherlv_3, grammarAccess.getLimitAccess().getEffortKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLimitAccess().getEffortDouble0ParserRuleCall_3_1_0());
					}
					lv_effort_4_0=ruleDouble0
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLimitRule());
						}
						set(
							$current,
							"effort",
							lv_effort_4_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Double0");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='lower'
			{
				newLeafNode(otherlv_5, grammarAccess.getLimitAccess().getLowerKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLimitAccess().getLowerDouble0ParserRuleCall_4_1_0());
					}
					lv_lower_6_0=ruleDouble0
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLimitRule());
						}
						set(
							$current,
							"lower",
							lv_lower_6_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Double0");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_7='upper'
			{
				newLeafNode(otherlv_7, grammarAccess.getLimitAccess().getUpperKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLimitAccess().getUpperDouble0ParserRuleCall_5_1_0());
					}
					lv_upper_8_0=ruleDouble0
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLimitRule());
						}
						set(
							$current,
							"upper",
							lv_upper_8_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Double0");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_9='velocity'
			{
				newLeafNode(otherlv_9, grammarAccess.getLimitAccess().getVelocityKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLimitAccess().getVelocityDouble0ParserRuleCall_6_1_0());
					}
					lv_velocity_10_0=ruleDouble0
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLimitRule());
						}
						set(
							$current,
							"velocity",
							lv_velocity_10_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Double0");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getLimitAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleInertial
entryRuleInertial returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInertialRule()); }
	iv_ruleInertial=ruleInertial
	{ $current=$iv_ruleInertial.current; }
	EOF;

// Rule Inertial
ruleInertial returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInertialAccess().getInertialAction_0(),
					$current);
			}
		)
		otherlv_1='Inertial'
		{
			newLeafNode(otherlv_1, grammarAccess.getInertialAccess().getInertialKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getInertialAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='origin'
			{
				newLeafNode(otherlv_3, grammarAccess.getInertialAccess().getOriginKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInertialAccess().getOriginPoseParserRuleCall_3_1_0());
					}
					lv_origin_4_0=rulePose
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInertialRule());
						}
						set(
							$current,
							"origin",
							lv_origin_4_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Pose");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='mass'
			{
				newLeafNode(otherlv_5, grammarAccess.getInertialAccess().getMassKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInertialAccess().getMassMassParserRuleCall_4_1_0());
					}
					lv_mass_6_0=ruleMass
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInertialRule());
						}
						set(
							$current,
							"mass",
							lv_mass_6_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Mass");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_7='inertia'
			{
				newLeafNode(otherlv_7, grammarAccess.getInertialAccess().getInertiaKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInertialAccess().getInertiaInertiaParserRuleCall_5_1_0());
					}
					lv_inertia_8_0=ruleInertia
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInertialRule());
						}
						set(
							$current,
							"inertia",
							lv_inertia_8_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Inertia");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_9='}'
		{
			newLeafNode(otherlv_9, grammarAccess.getInertialAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleVisual
entryRuleVisual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVisualRule()); }
	iv_ruleVisual=ruleVisual
	{ $current=$iv_ruleVisual.current; }
	EOF;

// Rule Visual
ruleVisual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Visual'
		{
			newLeafNode(otherlv_0, grammarAccess.getVisualAccess().getVisualKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getVisualAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='origin'
			{
				newLeafNode(otherlv_2, grammarAccess.getVisualAccess().getOriginKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getVisualAccess().getOriginPoseParserRuleCall_2_1_0());
					}
					lv_origin_3_0=rulePose
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVisualRule());
						}
						set(
							$current,
							"origin",
							lv_origin_3_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Pose");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='geometry'
		{
			newLeafNode(otherlv_4, grammarAccess.getVisualAccess().getGeometryKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVisualAccess().getGeometryGeometryParserRuleCall_4_0());
				}
				lv_geometry_5_0=ruleGeometry
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVisualRule());
					}
					set(
						$current,
						"geometry",
						lv_geometry_5_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.Geometry");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getVisualAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleCollision
entryRuleCollision returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCollisionRule()); }
	iv_ruleCollision=ruleCollision
	{ $current=$iv_ruleCollision.current; }
	EOF;

// Rule Collision
ruleCollision returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Collision'
		{
			newLeafNode(otherlv_0, grammarAccess.getCollisionAccess().getCollisionKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCollisionAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			otherlv_2='origin'
			{
				newLeafNode(otherlv_2, grammarAccess.getCollisionAccess().getOriginKeyword_2_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCollisionAccess().getOriginPoseParserRuleCall_2_1_0());
					}
					lv_origin_3_0=rulePose
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCollisionRule());
						}
						set(
							$current,
							"origin",
							lv_origin_3_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Pose");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_4='geometry'
		{
			newLeafNode(otherlv_4, grammarAccess.getCollisionAccess().getGeometryKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCollisionAccess().getGeometryGeometryParserRuleCall_4_0());
				}
				lv_geometry_5_0=ruleGeometry
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCollisionRule());
					}
					set(
						$current,
						"geometry",
						lv_geometry_5_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.Geometry");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getCollisionAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleMass
entryRuleMass returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMassRule()); }
	iv_ruleMass=ruleMass
	{ $current=$iv_ruleMass.current; }
	EOF;

// Rule Mass
ruleMass returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getMassAccess().getMassAction_0(),
					$current);
			}
		)
		otherlv_1='Mass'
		{
			newLeafNode(otherlv_1, grammarAccess.getMassAccess().getMassKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getMassAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='value'
			{
				newLeafNode(otherlv_3, grammarAccess.getMassAccess().getValueKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMassAccess().getValueDouble0ParserRuleCall_3_1_0());
					}
					lv_value_4_0=ruleDouble0
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMassRule());
						}
						set(
							$current,
							"value",
							lv_value_4_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Double0");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getMassAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleInertia
entryRuleInertia returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInertiaRule()); }
	iv_ruleInertia=ruleInertia
	{ $current=$iv_ruleInertia.current; }
	EOF;

// Rule Inertia
ruleInertia returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getInertiaAccess().getInertiaAction_0(),
					$current);
			}
		)
		otherlv_1='Inertia'
		{
			newLeafNode(otherlv_1, grammarAccess.getInertiaAccess().getInertiaKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getInertiaAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='ixx'
			{
				newLeafNode(otherlv_3, grammarAccess.getInertiaAccess().getIxxKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInertiaAccess().getIxxDouble0ParserRuleCall_3_1_0());
					}
					lv_ixx_4_0=ruleDouble0
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInertiaRule());
						}
						set(
							$current,
							"ixx",
							lv_ixx_4_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Double0");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='ixy'
			{
				newLeafNode(otherlv_5, grammarAccess.getInertiaAccess().getIxyKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInertiaAccess().getIxyDouble0ParserRuleCall_4_1_0());
					}
					lv_ixy_6_0=ruleDouble0
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInertiaRule());
						}
						set(
							$current,
							"ixy",
							lv_ixy_6_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Double0");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_7='ixz'
			{
				newLeafNode(otherlv_7, grammarAccess.getInertiaAccess().getIxzKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInertiaAccess().getIxzDouble0ParserRuleCall_5_1_0());
					}
					lv_ixz_8_0=ruleDouble0
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInertiaRule());
						}
						set(
							$current,
							"ixz",
							lv_ixz_8_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Double0");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_9='iyy'
			{
				newLeafNode(otherlv_9, grammarAccess.getInertiaAccess().getIyyKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInertiaAccess().getIyyDouble0ParserRuleCall_6_1_0());
					}
					lv_iyy_10_0=ruleDouble0
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInertiaRule());
						}
						set(
							$current,
							"iyy",
							lv_iyy_10_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Double0");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_11='iyz'
			{
				newLeafNode(otherlv_11, grammarAccess.getInertiaAccess().getIyzKeyword_7_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInertiaAccess().getIyzDouble0ParserRuleCall_7_1_0());
					}
					lv_iyz_12_0=ruleDouble0
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInertiaRule());
						}
						set(
							$current,
							"iyz",
							lv_iyz_12_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Double0");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_13='izz'
			{
				newLeafNode(otherlv_13, grammarAccess.getInertiaAccess().getIzzKeyword_8_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getInertiaAccess().getIzzDouble0ParserRuleCall_8_1_0());
					}
					lv_izz_14_0=ruleDouble0
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getInertiaRule());
						}
						set(
							$current,
							"izz",
							lv_izz_14_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Double0");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_15='}'
		{
			newLeafNode(otherlv_15, grammarAccess.getInertiaAccess().getRightCurlyBracketKeyword_9());
		}
	)
;

// Entry rule entryRuleGeometry
entryRuleGeometry returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getGeometryRule()); }
	iv_ruleGeometry=ruleGeometry
	{ $current=$iv_ruleGeometry.current; }
	EOF;

// Rule Geometry
ruleGeometry returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getGeometryAccess().getGeometryAction_0(),
					$current);
			}
		)
		otherlv_1='Geometry'
		{
			newLeafNode(otherlv_1, grammarAccess.getGeometryAccess().getGeometryKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getGeometryAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='box'
			{
				newLeafNode(otherlv_3, grammarAccess.getGeometryAccess().getBoxKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGeometryAccess().getBoxBoxParserRuleCall_3_1_0());
					}
					lv_box_4_0=ruleBox
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGeometryRule());
						}
						set(
							$current,
							"box",
							lv_box_4_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Box");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_5='cylinder'
			{
				newLeafNode(otherlv_5, grammarAccess.getGeometryAccess().getCylinderKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGeometryAccess().getCylinderCylinderParserRuleCall_4_1_0());
					}
					lv_cylinder_6_0=ruleCylinder
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGeometryRule());
						}
						set(
							$current,
							"cylinder",
							lv_cylinder_6_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Cylinder");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_7='sphere'
			{
				newLeafNode(otherlv_7, grammarAccess.getGeometryAccess().getSphereKeyword_5_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGeometryAccess().getSphereSphereParserRuleCall_5_1_0());
					}
					lv_sphere_8_0=ruleSphere
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGeometryRule());
						}
						set(
							$current,
							"sphere",
							lv_sphere_8_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Sphere");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		(
			otherlv_9='mesh'
			{
				newLeafNode(otherlv_9, grammarAccess.getGeometryAccess().getMeshKeyword_6_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getGeometryAccess().getMeshMeshParserRuleCall_6_1_0());
					}
					lv_mesh_10_0=ruleMesh
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getGeometryRule());
						}
						set(
							$current,
							"mesh",
							lv_mesh_10_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.Mesh");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_11='}'
		{
			newLeafNode(otherlv_11, grammarAccess.getGeometryAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleBox
entryRuleBox returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBoxRule()); }
	iv_ruleBox=ruleBox
	{ $current=$iv_ruleBox.current; }
	EOF;

// Rule Box
ruleBox returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBoxAccess().getBoxAction_0(),
					$current);
			}
		)
		otherlv_1='Box'
		{
			newLeafNode(otherlv_1, grammarAccess.getBoxAccess().getBoxKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getBoxAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			otherlv_3='size'
			{
				newLeafNode(otherlv_3, grammarAccess.getBoxAccess().getSizeKeyword_3_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getBoxAccess().getSizeEStringParserRuleCall_3_1_0());
					}
					lv_size_4_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getBoxRule());
						}
						set(
							$current,
							"size",
							lv_size_4_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_5='}'
		{
			newLeafNode(otherlv_5, grammarAccess.getBoxAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleCylinder
entryRuleCylinder returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCylinderRule()); }
	iv_ruleCylinder=ruleCylinder
	{ $current=$iv_ruleCylinder.current; }
	EOF;

// Rule Cylinder
ruleCylinder returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Cylinder'
		{
			newLeafNode(otherlv_0, grammarAccess.getCylinderAccess().getCylinderKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getCylinderAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='length'
		{
			newLeafNode(otherlv_2, grammarAccess.getCylinderAccess().getLengthKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCylinderAccess().getLengthDouble0ParserRuleCall_3_0());
				}
				lv_length_3_0=ruleDouble0
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCylinderRule());
					}
					set(
						$current,
						"length",
						lv_length_3_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.Double0");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='radius'
		{
			newLeafNode(otherlv_4, grammarAccess.getCylinderAccess().getRadiusKeyword_4());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCylinderAccess().getRadiusDouble0ParserRuleCall_5_0());
				}
				lv_radius_5_0=ruleDouble0
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCylinderRule());
					}
					set(
						$current,
						"radius",
						lv_radius_5_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.Double0");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getCylinderAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleSphere
entryRuleSphere returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSphereRule()); }
	iv_ruleSphere=ruleSphere
	{ $current=$iv_ruleSphere.current; }
	EOF;

// Rule Sphere
ruleSphere returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Sphere'
		{
			newLeafNode(otherlv_0, grammarAccess.getSphereAccess().getSphereKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getSphereAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='radius'
		{
			newLeafNode(otherlv_2, grammarAccess.getSphereAccess().getRadiusKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getSphereAccess().getRadiusDouble0ParserRuleCall_3_0());
				}
				lv_radius_3_0=ruleDouble0
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSphereRule());
					}
					set(
						$current,
						"radius",
						lv_radius_3_0,
						"de.fraunhofer.ipa.kinematics.Kinematics.Double0");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getSphereAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleMesh
entryRuleMesh returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMeshRule()); }
	iv_ruleMesh=ruleMesh
	{ $current=$iv_ruleMesh.current; }
	EOF;

// Rule Mesh
ruleMesh returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='Mesh'
		{
			newLeafNode(otherlv_0, grammarAccess.getMeshAccess().getMeshKeyword_0());
		}
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getMeshAccess().getLeftCurlyBracketKeyword_1());
		}
		otherlv_2='filename'
		{
			newLeafNode(otherlv_2, grammarAccess.getMeshAccess().getFilenameKeyword_2());
		}
		(
			(
				lv_filename_3_0=RULE_STRING
				{
					newLeafNode(lv_filename_3_0, grammarAccess.getMeshAccess().getFilenameSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getMeshRule());
					}
					setWithLastConsumed(
						$current,
						"filename",
						lv_filename_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			otherlv_4='scale'
			{
				newLeafNode(otherlv_4, grammarAccess.getMeshAccess().getScaleKeyword_4_0());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getMeshAccess().getScaleEStringParserRuleCall_4_1_0());
					}
					lv_scale_5_0=ruleEString
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMeshRule());
						}
						set(
							$current,
							"scale",
							lv_scale_5_0,
							"de.fraunhofer.ipa.kinematics.Kinematics.EString");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getMeshAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_STRING_0=RULE_STRING
	{
		$current.merge(this_STRING_0);
	}
	{
		newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall());
	}
;

// Entry rule entryRuleDouble0
entryRuleDouble0 returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDouble0Rule()); }
	iv_ruleDouble0=ruleDouble0
	{ $current=$iv_ruleDouble0.current.getText(); }
	EOF;

// Rule Double0
ruleDouble0 returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	this_DOUBLE_0=RULE_DOUBLE
	{
		$current.merge(this_DOUBLE_0);
	}
	{
		newLeafNode(this_DOUBLE_0, grammarAccess.getDouble0Access().getDOUBLETerminalRuleCall());
	}
;

fragment RULE_DIGIT : '0'..'9';

RULE_BOOLEAN : ('true'|'false');

RULE_DOUBLE : RULE_DECINT ('.' RULE_DIGIT*|('.' RULE_DIGIT*)? ('E'|'e') ('-'|'+')? RULE_DECINT);

RULE_DECINT : ('0'|'1'..'9' RULE_DIGIT*|'-' '0'..'9' RULE_DIGIT*);

RULE_JOINTTYPE : ('revolute'|'continuous'|'prismatic'|'fixed'|'floating'|'planar');

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
