/*
 * generated by Xtext 2.25.0
 */
grammar InternalKinematics;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package de.fraunhofer.ipa.kinematics.xtext.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package de.fraunhofer.ipa.kinematics.xtext.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import de.fraunhofer.ipa.kinematics.xtext.services.KinematicsGrammarAccess;

}
@parser::members {
	private KinematicsGrammarAccess grammarAccess;

	public void setGrammarAccess(KinematicsGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleKinematics
entryRuleKinematics
:
{ before(grammarAccess.getKinematicsRule()); }
	 ruleKinematics
{ after(grammarAccess.getKinematicsRule()); } 
	 EOF 
;

// Rule Kinematics
ruleKinematics 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getKinematicsAccess().getGroup()); }
		(rule__Kinematics__Group__0)
		{ after(grammarAccess.getKinematicsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulejoint
entryRulejoint
:
{ before(grammarAccess.getJointRule()); }
	 rulejoint
{ after(grammarAccess.getJointRule()); } 
	 EOF 
;

// Rule joint
rulejoint 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getJointAccess().getGroup()); }
		(rule__Joint__Group__0)
		{ after(grammarAccess.getJointAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulelink
entryRulelink
:
{ before(grammarAccess.getLinkRule()); }
	 rulelink
{ after(grammarAccess.getLinkRule()); } 
	 EOF 
;

// Rule link
rulelink 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLinkAccess().getGroup()); }
		(rule__Link__Group__0)
		{ after(grammarAccess.getLinkAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleEString
entryRuleEString
:
{ before(grammarAccess.getEStringRule()); }
	 ruleEString
{ after(grammarAccess.getEStringRule()); } 
	 EOF 
;

// Rule EString
ruleEString 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getEStringAccess().getAlternatives()); }
		(rule__EString__Alternatives)
		{ after(grammarAccess.getEStringAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__EString__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
		RULE_STRING
		{ after(grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
		RULE_ID
		{ after(grammarAccess.getEStringAccess().getIDTerminalRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Kinematics__Group__0__Impl
	rule__Kinematics__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKinematicsAccess().getRobotKeyword_0()); }
	'robot'
	{ after(grammarAccess.getKinematicsAccess().getRobotKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Kinematics__Group__1__Impl
	rule__Kinematics__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKinematicsAccess().getNameAssignment_1()); }
	(rule__Kinematics__NameAssignment_1)
	{ after(grammarAccess.getKinematicsAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Kinematics__Group__2__Impl
	rule__Kinematics__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKinematicsAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getKinematicsAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Kinematics__Group__3__Impl
	rule__Kinematics__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKinematicsAccess().getRoot_linkKeyword_3()); }
	'root_link'
	{ after(grammarAccess.getKinematicsAccess().getRoot_linkKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Kinematics__Group__4__Impl
	rule__Kinematics__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKinematicsAccess().getRoot_linkAssignment_4()); }
	(rule__Kinematics__Root_linkAssignment_4)
	{ after(grammarAccess.getKinematicsAccess().getRoot_linkAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Kinematics__Group__5__Impl
	rule__Kinematics__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKinematicsAccess().getGroup_5()); }
	(rule__Kinematics__Group_5__0)?
	{ after(grammarAccess.getKinematicsAccess().getGroup_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Kinematics__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKinematicsAccess().getRightCurlyBracketKeyword_6()); }
	'}'
	{ after(grammarAccess.getKinematicsAccess().getRightCurlyBracketKeyword_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Kinematics__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Kinematics__Group_5__0__Impl
	rule__Kinematics__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKinematicsAccess().getJointsKeyword_5_0()); }
	'joints'
	{ after(grammarAccess.getKinematicsAccess().getJointsKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Kinematics__Group_5__1__Impl
	rule__Kinematics__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKinematicsAccess().getLeftCurlyBracketKeyword_5_1()); }
	'{'
	{ after(grammarAccess.getKinematicsAccess().getLeftCurlyBracketKeyword_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Kinematics__Group_5__2__Impl
	rule__Kinematics__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKinematicsAccess().getJointsAssignment_5_2()); }
	(rule__Kinematics__JointsAssignment_5_2)*
	{ after(grammarAccess.getKinematicsAccess().getJointsAssignment_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group_5__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Kinematics__Group_5__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Group_5__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getKinematicsAccess().getRightCurlyBracketKeyword_5_3()); }
	'}'
	{ after(grammarAccess.getKinematicsAccess().getRightCurlyBracketKeyword_5_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Joint__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__0__Impl
	rule__Joint__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getJointKeyword_0()); }
	'joint'
	{ after(grammarAccess.getJointAccess().getJointKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__1__Impl
	rule__Joint__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getNameAssignment_1()); }
	(rule__Joint__NameAssignment_1)
	{ after(grammarAccess.getJointAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__2__Impl
	rule__Joint__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getLeftCurlyBracketKeyword_2()); }
	'{'
	{ after(grammarAccess.getJointAccess().getLeftCurlyBracketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__3__Impl
	rule__Joint__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getParentKeyword_3()); }
	'parent'
	{ after(grammarAccess.getJointAccess().getParentKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__4__Impl
	rule__Joint__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getParentAssignment_4()); }
	(rule__Joint__ParentAssignment_4)
	{ after(grammarAccess.getJointAccess().getParentAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__5__Impl
	rule__Joint__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getChildKeyword_5()); }
	'child'
	{ after(grammarAccess.getJointAccess().getChildKeyword_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__6__Impl
	rule__Joint__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getChildAssignment_6()); }
	(rule__Joint__ChildAssignment_6)
	{ after(grammarAccess.getJointAccess().getChildAssignment_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Joint__Group__7__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getJointAccess().getRightCurlyBracketKeyword_7()); }
	'}'
	{ after(grammarAccess.getJointAccess().getRightCurlyBracketKeyword_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Link__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__0__Impl
	rule__Link__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getLinkAction_0()); }
	()
	{ after(grammarAccess.getLinkAccess().getLinkAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__1__Impl
	rule__Link__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getLinkKeyword_1()); }
	'link'
	{ after(grammarAccess.getLinkAccess().getLinkKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Link__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLinkAccess().getNameAssignment_2()); }
	(rule__Link__NameAssignment_2)
	{ after(grammarAccess.getLinkAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Kinematics__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKinematicsAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getKinematicsAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__Root_linkAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKinematicsAccess().getRoot_linkLinkParserRuleCall_4_0()); }
		rulelink
		{ after(grammarAccess.getKinematicsAccess().getRoot_linkLinkParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Kinematics__JointsAssignment_5_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getKinematicsAccess().getJointsJointParserRuleCall_5_2_0()); }
		rulejoint
		{ after(grammarAccess.getKinematicsAccess().getJointsJointParserRuleCall_5_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJointAccess().getNameEStringParserRuleCall_1_0()); }
		ruleEString
		{ after(grammarAccess.getJointAccess().getNameEStringParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__ParentAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJointAccess().getParentLinkCrossReference_4_0()); }
		(
			{ before(grammarAccess.getJointAccess().getParentLinkEStringParserRuleCall_4_0_1()); }
			ruleEString
			{ after(grammarAccess.getJointAccess().getParentLinkEStringParserRuleCall_4_0_1()); }
		)
		{ after(grammarAccess.getJointAccess().getParentLinkCrossReference_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Joint__ChildAssignment_6
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getJointAccess().getChildLinkParserRuleCall_6_0()); }
		rulelink
		{ after(grammarAccess.getJointAccess().getChildLinkParserRuleCall_6_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Link__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLinkAccess().getNameEStringParserRuleCall_2_0()); }
		ruleEString
		{ after(grammarAccess.getLinkAccess().getNameEStringParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
