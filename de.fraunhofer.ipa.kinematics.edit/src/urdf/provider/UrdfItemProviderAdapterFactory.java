/**
 */
package urdf.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import urdf.util.UrdfAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class UrdfItemProviderAdapterFactory extends UrdfAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public UrdfItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.ActuatorTransmission} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActuatorTransmissionItemProvider actuatorTransmissionItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.ActuatorTransmission}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActuatorTransmissionAdapter() {
		if (actuatorTransmissionItemProvider == null) {
			actuatorTransmissionItemProvider = new ActuatorTransmissionItemProvider(this);
		}

		return actuatorTransmissionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Axis} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AxisItemProvider axisItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Axis}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAxisAdapter() {
		if (axisItemProvider == null) {
			axisItemProvider = new AxisItemProvider(this);
		}

		return axisItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Box} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BoxItemProvider boxItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Box}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBoxAdapter() {
		if (boxItemProvider == null) {
			boxItemProvider = new BoxItemProvider(this);
		}

		return boxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Calibration} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CalibrationItemProvider calibrationItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Calibration}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCalibrationAdapter() {
		if (calibrationItemProvider == null) {
			calibrationItemProvider = new CalibrationItemProvider(this);
		}

		return calibrationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Collision} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CollisionItemProvider collisionItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Collision}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCollisionAdapter() {
		if (collisionItemProvider == null) {
			collisionItemProvider = new CollisionItemProvider(this);
		}

		return collisionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Color} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColorItemProvider colorItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Color}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColorAdapter() {
		if (colorItemProvider == null) {
			colorItemProvider = new ColorItemProvider(this);
		}

		return colorItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Cylinder} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CylinderItemProvider cylinderItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Cylinder}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCylinderAdapter() {
		if (cylinderItemProvider == null) {
			cylinderItemProvider = new CylinderItemProvider(this);
		}

		return cylinderItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.DocumentRoot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DocumentRootItemProvider documentRootItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.DocumentRoot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDocumentRootAdapter() {
		if (documentRootItemProvider == null) {
			documentRootItemProvider = new DocumentRootItemProvider(this);
		}

		return documentRootItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Dynamics} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DynamicsItemProvider dynamicsItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Dynamics}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDynamicsAdapter() {
		if (dynamicsItemProvider == null) {
			dynamicsItemProvider = new DynamicsItemProvider(this);
		}

		return dynamicsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.GapJointTransmission} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GapJointTransmissionItemProvider gapJointTransmissionItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.GapJointTransmission}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGapJointTransmissionAdapter() {
		if (gapJointTransmissionItemProvider == null) {
			gapJointTransmissionItemProvider = new GapJointTransmissionItemProvider(this);
		}

		return gapJointTransmissionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Geometry} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GeometryItemProvider geometryItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Geometry}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGeometryAdapter() {
		if (geometryItemProvider == null) {
			geometryItemProvider = new GeometryItemProvider(this);
		}

		return geometryItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Inertia} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InertiaItemProvider inertiaItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Inertia}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInertiaAdapter() {
		if (inertiaItemProvider == null) {
			inertiaItemProvider = new InertiaItemProvider(this);
		}

		return inertiaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Inertial} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected InertialItemProvider inertialItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Inertial}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createInertialAdapter() {
		if (inertialItemProvider == null) {
			inertialItemProvider = new InertialItemProvider(this);
		}

		return inertialItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Joint} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected JointItemProvider jointItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Joint}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createJointAdapter() {
		if (jointItemProvider == null) {
			jointItemProvider = new JointItemProvider(this);
		}

		return jointItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Limit} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LimitItemProvider limitItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Limit}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLimitAdapter() {
		if (limitItemProvider == null) {
			limitItemProvider = new LimitItemProvider(this);
		}

		return limitItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Link} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LinkItemProvider linkItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Link}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLinkAdapter() {
		if (linkItemProvider == null) {
			linkItemProvider = new LinkItemProvider(this);
		}

		return linkItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Mass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MassItemProvider massItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Mass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMassAdapter() {
		if (massItemProvider == null) {
			massItemProvider = new MassItemProvider(this);
		}

		return massItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Material} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaterialItemProvider materialItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Material}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaterialAdapter() {
		if (materialItemProvider == null) {
			materialItemProvider = new MaterialItemProvider(this);
		}

		return materialItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.MaterialGlobal} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaterialGlobalItemProvider materialGlobalItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.MaterialGlobal}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaterialGlobalAdapter() {
		if (materialGlobalItemProvider == null) {
			materialGlobalItemProvider = new MaterialGlobalItemProvider(this);
		}

		return materialGlobalItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Mesh} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MeshItemProvider meshItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Mesh}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMeshAdapter() {
		if (meshItemProvider == null) {
			meshItemProvider = new MeshItemProvider(this);
		}

		return meshItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Mimic} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MimicItemProvider mimicItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Mimic}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMimicAdapter() {
		if (mimicItemProvider == null) {
			mimicItemProvider = new MimicItemProvider(this);
		}

		return mimicItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Name} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NameItemProvider nameItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Name}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNameAdapter() {
		if (nameItemProvider == null) {
			nameItemProvider = new NameItemProvider(this);
		}

		return nameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.PassiveJointTransmission} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PassiveJointTransmissionItemProvider passiveJointTransmissionItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.PassiveJointTransmission}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPassiveJointTransmissionAdapter() {
		if (passiveJointTransmissionItemProvider == null) {
			passiveJointTransmissionItemProvider = new PassiveJointTransmissionItemProvider(this);
		}

		return passiveJointTransmissionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Pose} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PoseItemProvider poseItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Pose}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPoseAdapter() {
		if (poseItemProvider == null) {
			poseItemProvider = new PoseItemProvider(this);
		}

		return poseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Robot} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RobotItemProvider robotItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Robot}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRobotAdapter() {
		if (robotItemProvider == null) {
			robotItemProvider = new RobotItemProvider(this);
		}

		return robotItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.SafetyController} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SafetyControllerItemProvider safetyControllerItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.SafetyController}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSafetyControllerAdapter() {
		if (safetyControllerItemProvider == null) {
			safetyControllerItemProvider = new SafetyControllerItemProvider(this);
		}

		return safetyControllerItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Sphere} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SphereItemProvider sphereItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Sphere}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSphereAdapter() {
		if (sphereItemProvider == null) {
			sphereItemProvider = new SphereItemProvider(this);
		}

		return sphereItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Texture} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextureItemProvider textureItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Texture}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextureAdapter() {
		if (textureItemProvider == null) {
			textureItemProvider = new TextureItemProvider(this);
		}

		return textureItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Transmission} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransmissionItemProvider transmissionItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Transmission}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransmissionAdapter() {
		if (transmissionItemProvider == null) {
			transmissionItemProvider = new TransmissionItemProvider(this);
		}

		return transmissionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.UseSimulatedGripperJointType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected UseSimulatedGripperJointTypeItemProvider useSimulatedGripperJointTypeItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.UseSimulatedGripperJointType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createUseSimulatedGripperJointTypeAdapter() {
		if (useSimulatedGripperJointTypeItemProvider == null) {
			useSimulatedGripperJointTypeItemProvider = new UseSimulatedGripperJointTypeItemProvider(this);
		}

		return useSimulatedGripperJointTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Verbose} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VerboseItemProvider verboseItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Verbose}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVerboseAdapter() {
		if (verboseItemProvider == null) {
			verboseItemProvider = new VerboseItemProvider(this);
		}

		return verboseItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link urdf.Visual} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected VisualItemProvider visualItemProvider;

	/**
	 * This creates an adapter for a {@link urdf.Visual}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createVisualAdapter() {
		if (visualItemProvider == null) {
			visualItemProvider = new VisualItemProvider(this);
		}

		return visualItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (actuatorTransmissionItemProvider != null) actuatorTransmissionItemProvider.dispose();
		if (axisItemProvider != null) axisItemProvider.dispose();
		if (boxItemProvider != null) boxItemProvider.dispose();
		if (calibrationItemProvider != null) calibrationItemProvider.dispose();
		if (collisionItemProvider != null) collisionItemProvider.dispose();
		if (colorItemProvider != null) colorItemProvider.dispose();
		if (cylinderItemProvider != null) cylinderItemProvider.dispose();
		if (documentRootItemProvider != null) documentRootItemProvider.dispose();
		if (dynamicsItemProvider != null) dynamicsItemProvider.dispose();
		if (gapJointTransmissionItemProvider != null) gapJointTransmissionItemProvider.dispose();
		if (geometryItemProvider != null) geometryItemProvider.dispose();
		if (inertiaItemProvider != null) inertiaItemProvider.dispose();
		if (inertialItemProvider != null) inertialItemProvider.dispose();
		if (jointItemProvider != null) jointItemProvider.dispose();
		if (limitItemProvider != null) limitItemProvider.dispose();
		if (linkItemProvider != null) linkItemProvider.dispose();
		if (massItemProvider != null) massItemProvider.dispose();
		if (materialItemProvider != null) materialItemProvider.dispose();
		if (materialGlobalItemProvider != null) materialGlobalItemProvider.dispose();
		if (meshItemProvider != null) meshItemProvider.dispose();
		if (mimicItemProvider != null) mimicItemProvider.dispose();
		if (nameItemProvider != null) nameItemProvider.dispose();
		if (passiveJointTransmissionItemProvider != null) passiveJointTransmissionItemProvider.dispose();
		if (poseItemProvider != null) poseItemProvider.dispose();
		if (robotItemProvider != null) robotItemProvider.dispose();
		if (safetyControllerItemProvider != null) safetyControllerItemProvider.dispose();
		if (sphereItemProvider != null) sphereItemProvider.dispose();
		if (textureItemProvider != null) textureItemProvider.dispose();
		if (transmissionItemProvider != null) transmissionItemProvider.dispose();
		if (useSimulatedGripperJointTypeItemProvider != null) useSimulatedGripperJointTypeItemProvider.dispose();
		if (verboseItemProvider != null) verboseItemProvider.dispose();
		if (visualItemProvider != null) visualItemProvider.dispose();
	}

}
